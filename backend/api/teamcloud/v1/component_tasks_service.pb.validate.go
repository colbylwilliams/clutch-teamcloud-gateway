// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: teamcloud/v1/component_tasks_service.proto

package teamcloudv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CancelComponentTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelComponentTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelComponentTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelComponentTaskRequestMultiError, or nil if none found.
func (m *CancelComponentTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelComponentTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	// no validation rules for ComponentId

	// no validation rules for TaskId

	if len(errors) > 0 {
		return CancelComponentTaskRequestMultiError(errors)
	}

	return nil
}

// CancelComponentTaskRequestMultiError is an error wrapping multiple
// validation errors returned by CancelComponentTaskRequest.ValidateAll() if
// the designated constraints aren't met.
type CancelComponentTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelComponentTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelComponentTaskRequestMultiError) AllErrors() []error { return m }

// CancelComponentTaskRequestValidationError is the validation error returned
// by CancelComponentTaskRequest.Validate if the designated constraints aren't met.
type CancelComponentTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelComponentTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelComponentTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelComponentTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelComponentTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelComponentTaskRequestValidationError) ErrorName() string {
	return "CancelComponentTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelComponentTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelComponentTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelComponentTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelComponentTaskRequestValidationError{}

// Validate checks the field values on CreateComponentTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateComponentTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateComponentTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateComponentTaskRequestMultiError, or nil if none found.
func (m *CreateComponentTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateComponentTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	// no validation rules for ComponentId

	if all {
		switch v := interface{}(m.GetComponentTaskDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateComponentTaskRequestValidationError{
					field:  "ComponentTaskDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateComponentTaskRequestValidationError{
					field:  "ComponentTaskDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComponentTaskDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateComponentTaskRequestValidationError{
				field:  "ComponentTaskDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateComponentTaskRequestMultiError(errors)
	}

	return nil
}

// CreateComponentTaskRequestMultiError is an error wrapping multiple
// validation errors returned by CreateComponentTaskRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateComponentTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateComponentTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateComponentTaskRequestMultiError) AllErrors() []error { return m }

// CreateComponentTaskRequestValidationError is the validation error returned
// by CreateComponentTaskRequest.Validate if the designated constraints aren't met.
type CreateComponentTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateComponentTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateComponentTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateComponentTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateComponentTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateComponentTaskRequestValidationError) ErrorName() string {
	return "CreateComponentTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateComponentTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateComponentTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateComponentTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateComponentTaskRequestValidationError{}

// Validate checks the field values on GetComponentTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetComponentTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetComponentTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetComponentTaskRequestMultiError, or nil if none found.
func (m *GetComponentTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetComponentTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	// no validation rules for ComponentId

	if len(errors) > 0 {
		return GetComponentTaskRequestMultiError(errors)
	}

	return nil
}

// GetComponentTaskRequestMultiError is an error wrapping multiple validation
// errors returned by GetComponentTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type GetComponentTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetComponentTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetComponentTaskRequestMultiError) AllErrors() []error { return m }

// GetComponentTaskRequestValidationError is the validation error returned by
// GetComponentTaskRequest.Validate if the designated constraints aren't met.
type GetComponentTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetComponentTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetComponentTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetComponentTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetComponentTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetComponentTaskRequestValidationError) ErrorName() string {
	return "GetComponentTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetComponentTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetComponentTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetComponentTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetComponentTaskRequestValidationError{}

// Validate checks the field values on GetComponentTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetComponentTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetComponentTasksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetComponentTasksRequestMultiError, or nil if none found.
func (m *GetComponentTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetComponentTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	// no validation rules for ComponentId

	if len(errors) > 0 {
		return GetComponentTasksRequestMultiError(errors)
	}

	return nil
}

// GetComponentTasksRequestMultiError is an error wrapping multiple validation
// errors returned by GetComponentTasksRequest.ValidateAll() if the designated
// constraints aren't met.
type GetComponentTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetComponentTasksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetComponentTasksRequestMultiError) AllErrors() []error { return m }

// GetComponentTasksRequestValidationError is the validation error returned by
// GetComponentTasksRequest.Validate if the designated constraints aren't met.
type GetComponentTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetComponentTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetComponentTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetComponentTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetComponentTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetComponentTasksRequestValidationError) ErrorName() string {
	return "GetComponentTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetComponentTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetComponentTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetComponentTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetComponentTasksRequestValidationError{}

// Validate checks the field values on ReRunComponentTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReRunComponentTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReRunComponentTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReRunComponentTaskRequestMultiError, or nil if none found.
func (m *ReRunComponentTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReRunComponentTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	// no validation rules for ComponentId

	// no validation rules for TaskId

	if len(errors) > 0 {
		return ReRunComponentTaskRequestMultiError(errors)
	}

	return nil
}

// ReRunComponentTaskRequestMultiError is an error wrapping multiple validation
// errors returned by ReRunComponentTaskRequest.ValidateAll() if the
// designated constraints aren't met.
type ReRunComponentTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReRunComponentTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReRunComponentTaskRequestMultiError) AllErrors() []error { return m }

// ReRunComponentTaskRequestValidationError is the validation error returned by
// ReRunComponentTaskRequest.Validate if the designated constraints aren't met.
type ReRunComponentTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReRunComponentTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReRunComponentTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReRunComponentTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReRunComponentTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReRunComponentTaskRequestValidationError) ErrorName() string {
	return "ReRunComponentTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReRunComponentTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReRunComponentTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReRunComponentTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReRunComponentTaskRequestValidationError{}
