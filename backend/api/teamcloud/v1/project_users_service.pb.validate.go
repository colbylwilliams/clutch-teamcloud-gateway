// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: teamcloud/v1/project_users_service.proto

package teamcloudv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProjectUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectUserRequestMultiError, or nil if none found.
func (m *CreateProjectUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if all {
		switch v := interface{}(m.GetUserDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectUserRequestValidationError{
					field:  "UserDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectUserRequestValidationError{
					field:  "UserDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectUserRequestValidationError{
				field:  "UserDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectUserRequestMultiError(errors)
	}

	return nil
}

// CreateProjectUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProjectUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectUserRequestMultiError) AllErrors() []error { return m }

// CreateProjectUserRequestValidationError is the validation error returned by
// CreateProjectUserRequest.Validate if the designated constraints aren't met.
type CreateProjectUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectUserRequestValidationError) ErrorName() string {
	return "CreateProjectUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectUserRequestValidationError{}

// Validate checks the field values on DeleteProjectUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectUserRequestMultiError, or nil if none found.
func (m *DeleteProjectUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return DeleteProjectUserRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectUserRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectUserRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectUserRequestMultiError) AllErrors() []error { return m }

// DeleteProjectUserRequestValidationError is the validation error returned by
// DeleteProjectUserRequest.Validate if the designated constraints aren't met.
type DeleteProjectUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectUserRequestValidationError) ErrorName() string {
	return "DeleteProjectUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectUserRequestValidationError{}

// Validate checks the field values on GetProjectUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectUserRequestMultiError, or nil if none found.
func (m *GetProjectUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetProjectUserRequestMultiError(errors)
	}

	return nil
}

// GetProjectUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProjectUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectUserRequestMultiError) AllErrors() []error { return m }

// GetProjectUserRequestValidationError is the validation error returned by
// GetProjectUserRequest.Validate if the designated constraints aren't met.
type GetProjectUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectUserRequestValidationError) ErrorName() string {
	return "GetProjectUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectUserRequestValidationError{}

// Validate checks the field values on GetProjectUserMeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectUserMeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectUserMeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectUserMeRequestMultiError, or nil if none found.
func (m *GetProjectUserMeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectUserMeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetProjectUserMeRequestMultiError(errors)
	}

	return nil
}

// GetProjectUserMeRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectUserMeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProjectUserMeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectUserMeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectUserMeRequestMultiError) AllErrors() []error { return m }

// GetProjectUserMeRequestValidationError is the validation error returned by
// GetProjectUserMeRequest.Validate if the designated constraints aren't met.
type GetProjectUserMeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectUserMeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectUserMeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectUserMeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectUserMeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectUserMeRequestValidationError) ErrorName() string {
	return "GetProjectUserMeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectUserMeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectUserMeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectUserMeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectUserMeRequestValidationError{}

// Validate checks the field values on GetProjectUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectUsersRequestMultiError, or nil if none found.
func (m *GetProjectUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetProjectUsersRequestMultiError(errors)
	}

	return nil
}

// GetProjectUsersRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProjectUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectUsersRequestMultiError) AllErrors() []error { return m }

// GetProjectUsersRequestValidationError is the validation error returned by
// GetProjectUsersRequest.Validate if the designated constraints aren't met.
type GetProjectUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectUsersRequestValidationError) ErrorName() string {
	return "GetProjectUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectUsersRequestValidationError{}

// Validate checks the field values on UpdateProjectUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectUserRequestMultiError, or nil if none found.
func (m *UpdateProjectUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectUserRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectUserRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectUserRequestMultiError) AllErrors() []error { return m }

// UpdateProjectUserRequestValidationError is the validation error returned by
// UpdateProjectUserRequest.Validate if the designated constraints aren't met.
type UpdateProjectUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectUserRequestValidationError) ErrorName() string {
	return "UpdateProjectUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectUserRequestValidationError{}

// Validate checks the field values on UpdateProjectUserMeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectUserMeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectUserMeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectUserMeRequestMultiError, or nil if none found.
func (m *UpdateProjectUserMeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectUserMeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectUserMeRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectUserMeRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectUserMeRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectUserMeRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectUserMeRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectUserMeRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProjectUserMeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectUserMeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectUserMeRequestMultiError) AllErrors() []error { return m }

// UpdateProjectUserMeRequestValidationError is the validation error returned
// by UpdateProjectUserMeRequest.Validate if the designated constraints aren't met.
type UpdateProjectUserMeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectUserMeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectUserMeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectUserMeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectUserMeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectUserMeRequestValidationError) ErrorName() string {
	return "UpdateProjectUserMeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectUserMeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectUserMeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectUserMeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectUserMeRequestValidationError{}
