// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: teamcloud/v1/project_templates_service.proto

package teamcloudv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectTemplatesAPIClient is the client API for ProjectTemplatesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectTemplatesAPIClient interface {
	CreateProjectTemplate(ctx context.Context, in *CreateProjectTemplateRequest, opts ...grpc.CallOption) (*ProjectTemplateDataResult, error)
	DeleteProjectTemplate(ctx context.Context, in *DeleteProjectTemplateRequest, opts ...grpc.CallOption) (*ProjectTemplateDataResult, error)
	GetProjectTemplate(ctx context.Context, in *GetProjectTemplateRequest, opts ...grpc.CallOption) (*ProjectTemplateDataResult, error)
	GetProjectTemplates(ctx context.Context, in *GetProjectTemplatesRequest, opts ...grpc.CallOption) (*ProjectTemplateListDataResult, error)
	UpdateProjectTemplate(ctx context.Context, in *UpdateProjectTemplateRequest, opts ...grpc.CallOption) (*ProjectTemplateDataResult, error)
}

type projectTemplatesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectTemplatesAPIClient(cc grpc.ClientConnInterface) ProjectTemplatesAPIClient {
	return &projectTemplatesAPIClient{cc}
}

func (c *projectTemplatesAPIClient) CreateProjectTemplate(ctx context.Context, in *CreateProjectTemplateRequest, opts ...grpc.CallOption) (*ProjectTemplateDataResult, error) {
	out := new(ProjectTemplateDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectTemplatesAPI/CreateProjectTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectTemplatesAPIClient) DeleteProjectTemplate(ctx context.Context, in *DeleteProjectTemplateRequest, opts ...grpc.CallOption) (*ProjectTemplateDataResult, error) {
	out := new(ProjectTemplateDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectTemplatesAPI/DeleteProjectTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectTemplatesAPIClient) GetProjectTemplate(ctx context.Context, in *GetProjectTemplateRequest, opts ...grpc.CallOption) (*ProjectTemplateDataResult, error) {
	out := new(ProjectTemplateDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectTemplatesAPI/GetProjectTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectTemplatesAPIClient) GetProjectTemplates(ctx context.Context, in *GetProjectTemplatesRequest, opts ...grpc.CallOption) (*ProjectTemplateListDataResult, error) {
	out := new(ProjectTemplateListDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectTemplatesAPI/GetProjectTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectTemplatesAPIClient) UpdateProjectTemplate(ctx context.Context, in *UpdateProjectTemplateRequest, opts ...grpc.CallOption) (*ProjectTemplateDataResult, error) {
	out := new(ProjectTemplateDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectTemplatesAPI/UpdateProjectTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectTemplatesAPIServer is the server API for ProjectTemplatesAPI service.
// All implementations should embed UnimplementedProjectTemplatesAPIServer
// for forward compatibility
type ProjectTemplatesAPIServer interface {
	CreateProjectTemplate(context.Context, *CreateProjectTemplateRequest) (*ProjectTemplateDataResult, error)
	DeleteProjectTemplate(context.Context, *DeleteProjectTemplateRequest) (*ProjectTemplateDataResult, error)
	GetProjectTemplate(context.Context, *GetProjectTemplateRequest) (*ProjectTemplateDataResult, error)
	GetProjectTemplates(context.Context, *GetProjectTemplatesRequest) (*ProjectTemplateListDataResult, error)
	UpdateProjectTemplate(context.Context, *UpdateProjectTemplateRequest) (*ProjectTemplateDataResult, error)
}

// UnimplementedProjectTemplatesAPIServer should be embedded to have forward compatible implementations.
type UnimplementedProjectTemplatesAPIServer struct {
}

func (UnimplementedProjectTemplatesAPIServer) CreateProjectTemplate(context.Context, *CreateProjectTemplateRequest) (*ProjectTemplateDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectTemplate not implemented")
}
func (UnimplementedProjectTemplatesAPIServer) DeleteProjectTemplate(context.Context, *DeleteProjectTemplateRequest) (*ProjectTemplateDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectTemplate not implemented")
}
func (UnimplementedProjectTemplatesAPIServer) GetProjectTemplate(context.Context, *GetProjectTemplateRequest) (*ProjectTemplateDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectTemplate not implemented")
}
func (UnimplementedProjectTemplatesAPIServer) GetProjectTemplates(context.Context, *GetProjectTemplatesRequest) (*ProjectTemplateListDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectTemplates not implemented")
}
func (UnimplementedProjectTemplatesAPIServer) UpdateProjectTemplate(context.Context, *UpdateProjectTemplateRequest) (*ProjectTemplateDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectTemplate not implemented")
}

// UnsafeProjectTemplatesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectTemplatesAPIServer will
// result in compilation errors.
type UnsafeProjectTemplatesAPIServer interface {
	mustEmbedUnimplementedProjectTemplatesAPIServer()
}

func RegisterProjectTemplatesAPIServer(s grpc.ServiceRegistrar, srv ProjectTemplatesAPIServer) {
	s.RegisterService(&ProjectTemplatesAPI_ServiceDesc, srv)
}

func _ProjectTemplatesAPI_CreateProjectTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTemplatesAPIServer).CreateProjectTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectTemplatesAPI/CreateProjectTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTemplatesAPIServer).CreateProjectTemplate(ctx, req.(*CreateProjectTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectTemplatesAPI_DeleteProjectTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTemplatesAPIServer).DeleteProjectTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectTemplatesAPI/DeleteProjectTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTemplatesAPIServer).DeleteProjectTemplate(ctx, req.(*DeleteProjectTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectTemplatesAPI_GetProjectTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTemplatesAPIServer).GetProjectTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectTemplatesAPI/GetProjectTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTemplatesAPIServer).GetProjectTemplate(ctx, req.(*GetProjectTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectTemplatesAPI_GetProjectTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTemplatesAPIServer).GetProjectTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectTemplatesAPI/GetProjectTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTemplatesAPIServer).GetProjectTemplates(ctx, req.(*GetProjectTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectTemplatesAPI_UpdateProjectTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTemplatesAPIServer).UpdateProjectTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectTemplatesAPI/UpdateProjectTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTemplatesAPIServer).UpdateProjectTemplate(ctx, req.(*UpdateProjectTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectTemplatesAPI_ServiceDesc is the grpc.ServiceDesc for ProjectTemplatesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectTemplatesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colbylwilliams.teamcloud.v1.ProjectTemplatesAPI",
	HandlerType: (*ProjectTemplatesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectTemplate",
			Handler:    _ProjectTemplatesAPI_CreateProjectTemplate_Handler,
		},
		{
			MethodName: "DeleteProjectTemplate",
			Handler:    _ProjectTemplatesAPI_DeleteProjectTemplate_Handler,
		},
		{
			MethodName: "GetProjectTemplate",
			Handler:    _ProjectTemplatesAPI_GetProjectTemplate_Handler,
		},
		{
			MethodName: "GetProjectTemplates",
			Handler:    _ProjectTemplatesAPI_GetProjectTemplates_Handler,
		},
		{
			MethodName: "UpdateProjectTemplate",
			Handler:    _ProjectTemplatesAPI_UpdateProjectTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamcloud/v1/project_templates_service.proto",
}
