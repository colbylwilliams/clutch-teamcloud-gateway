// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: teamcloud/v1/components_service.proto

package teamcloudv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateComponentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateComponentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateComponentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateComponentRequestMultiError, or nil if none found.
func (m *CreateComponentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateComponentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if all {
		switch v := interface{}(m.GetComponentDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateComponentRequestValidationError{
					field:  "ComponentDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateComponentRequestValidationError{
					field:  "ComponentDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComponentDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateComponentRequestValidationError{
				field:  "ComponentDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateComponentRequestMultiError(errors)
	}

	return nil
}

// CreateComponentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateComponentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateComponentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateComponentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateComponentRequestMultiError) AllErrors() []error { return m }

// CreateComponentRequestValidationError is the validation error returned by
// CreateComponentRequest.Validate if the designated constraints aren't met.
type CreateComponentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateComponentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateComponentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateComponentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateComponentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateComponentRequestValidationError) ErrorName() string {
	return "CreateComponentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateComponentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateComponentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateComponentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateComponentRequestValidationError{}

// Validate checks the field values on DeleteComponentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteComponentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteComponentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteComponentRequestMultiError, or nil if none found.
func (m *DeleteComponentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteComponentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return DeleteComponentRequestMultiError(errors)
	}

	return nil
}

// DeleteComponentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteComponentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteComponentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteComponentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteComponentRequestMultiError) AllErrors() []error { return m }

// DeleteComponentRequestValidationError is the validation error returned by
// DeleteComponentRequest.Validate if the designated constraints aren't met.
type DeleteComponentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteComponentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteComponentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteComponentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteComponentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteComponentRequestValidationError) ErrorName() string {
	return "DeleteComponentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteComponentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteComponentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteComponentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteComponentRequestValidationError{}

// Validate checks the field values on GetComponentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetComponentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetComponentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetComponentRequestMultiError, or nil if none found.
func (m *GetComponentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetComponentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetComponentRequestMultiError(errors)
	}

	return nil
}

// GetComponentRequestMultiError is an error wrapping multiple validation
// errors returned by GetComponentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetComponentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetComponentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetComponentRequestMultiError) AllErrors() []error { return m }

// GetComponentRequestValidationError is the validation error returned by
// GetComponentRequest.Validate if the designated constraints aren't met.
type GetComponentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetComponentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetComponentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetComponentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetComponentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetComponentRequestValidationError) ErrorName() string {
	return "GetComponentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetComponentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetComponentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetComponentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetComponentRequestValidationError{}

// Validate checks the field values on GetComponentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetComponentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetComponentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetComponentsRequestMultiError, or nil if none found.
func (m *GetComponentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetComponentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	// no validation rules for Deleted

	if len(errors) > 0 {
		return GetComponentsRequestMultiError(errors)
	}

	return nil
}

// GetComponentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetComponentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetComponentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetComponentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetComponentsRequestMultiError) AllErrors() []error { return m }

// GetComponentsRequestValidationError is the validation error returned by
// GetComponentsRequest.Validate if the designated constraints aren't met.
type GetComponentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetComponentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetComponentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetComponentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetComponentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetComponentsRequestValidationError) ErrorName() string {
	return "GetComponentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetComponentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetComponentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetComponentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetComponentsRequestValidationError{}
