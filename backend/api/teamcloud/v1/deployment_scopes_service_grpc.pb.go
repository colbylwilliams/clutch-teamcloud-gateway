// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: teamcloud/v1/deployment_scopes_service.proto

package teamcloudv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeploymentScopesAPIClient is the client API for DeploymentScopesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentScopesAPIClient interface {
	CreateDeploymentScope(ctx context.Context, in *CreateDeploymentScopeRequest, opts ...grpc.CallOption) (*DeploymentScopeDataResult, error)
	DeleteDeploymentScope(ctx context.Context, in *DeleteDeploymentScopeRequest, opts ...grpc.CallOption) (*DeploymentScopeDataResult, error)
	GetDeploymentScope(ctx context.Context, in *GetDeploymentScopeRequest, opts ...grpc.CallOption) (*DeploymentScopeDataResult, error)
	GetDeploymentScopes(ctx context.Context, in *GetDeploymentScopesRequest, opts ...grpc.CallOption) (*DeploymentScopeListDataResult, error)
	UpdateDeploymentScope(ctx context.Context, in *UpdateDeploymentScopeRequest, opts ...grpc.CallOption) (*DeploymentScopeDataResult, error)
}

type deploymentScopesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentScopesAPIClient(cc grpc.ClientConnInterface) DeploymentScopesAPIClient {
	return &deploymentScopesAPIClient{cc}
}

func (c *deploymentScopesAPIClient) CreateDeploymentScope(ctx context.Context, in *CreateDeploymentScopeRequest, opts ...grpc.CallOption) (*DeploymentScopeDataResult, error) {
	out := new(DeploymentScopeDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.DeploymentScopesAPI/CreateDeploymentScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentScopesAPIClient) DeleteDeploymentScope(ctx context.Context, in *DeleteDeploymentScopeRequest, opts ...grpc.CallOption) (*DeploymentScopeDataResult, error) {
	out := new(DeploymentScopeDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.DeploymentScopesAPI/DeleteDeploymentScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentScopesAPIClient) GetDeploymentScope(ctx context.Context, in *GetDeploymentScopeRequest, opts ...grpc.CallOption) (*DeploymentScopeDataResult, error) {
	out := new(DeploymentScopeDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.DeploymentScopesAPI/GetDeploymentScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentScopesAPIClient) GetDeploymentScopes(ctx context.Context, in *GetDeploymentScopesRequest, opts ...grpc.CallOption) (*DeploymentScopeListDataResult, error) {
	out := new(DeploymentScopeListDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.DeploymentScopesAPI/GetDeploymentScopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentScopesAPIClient) UpdateDeploymentScope(ctx context.Context, in *UpdateDeploymentScopeRequest, opts ...grpc.CallOption) (*DeploymentScopeDataResult, error) {
	out := new(DeploymentScopeDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.DeploymentScopesAPI/UpdateDeploymentScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentScopesAPIServer is the server API for DeploymentScopesAPI service.
// All implementations should embed UnimplementedDeploymentScopesAPIServer
// for forward compatibility
type DeploymentScopesAPIServer interface {
	CreateDeploymentScope(context.Context, *CreateDeploymentScopeRequest) (*DeploymentScopeDataResult, error)
	DeleteDeploymentScope(context.Context, *DeleteDeploymentScopeRequest) (*DeploymentScopeDataResult, error)
	GetDeploymentScope(context.Context, *GetDeploymentScopeRequest) (*DeploymentScopeDataResult, error)
	GetDeploymentScopes(context.Context, *GetDeploymentScopesRequest) (*DeploymentScopeListDataResult, error)
	UpdateDeploymentScope(context.Context, *UpdateDeploymentScopeRequest) (*DeploymentScopeDataResult, error)
}

// UnimplementedDeploymentScopesAPIServer should be embedded to have forward compatible implementations.
type UnimplementedDeploymentScopesAPIServer struct {
}

func (UnimplementedDeploymentScopesAPIServer) CreateDeploymentScope(context.Context, *CreateDeploymentScopeRequest) (*DeploymentScopeDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeploymentScope not implemented")
}
func (UnimplementedDeploymentScopesAPIServer) DeleteDeploymentScope(context.Context, *DeleteDeploymentScopeRequest) (*DeploymentScopeDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeploymentScope not implemented")
}
func (UnimplementedDeploymentScopesAPIServer) GetDeploymentScope(context.Context, *GetDeploymentScopeRequest) (*DeploymentScopeDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentScope not implemented")
}
func (UnimplementedDeploymentScopesAPIServer) GetDeploymentScopes(context.Context, *GetDeploymentScopesRequest) (*DeploymentScopeListDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentScopes not implemented")
}
func (UnimplementedDeploymentScopesAPIServer) UpdateDeploymentScope(context.Context, *UpdateDeploymentScopeRequest) (*DeploymentScopeDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploymentScope not implemented")
}

// UnsafeDeploymentScopesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentScopesAPIServer will
// result in compilation errors.
type UnsafeDeploymentScopesAPIServer interface {
	mustEmbedUnimplementedDeploymentScopesAPIServer()
}

func RegisterDeploymentScopesAPIServer(s grpc.ServiceRegistrar, srv DeploymentScopesAPIServer) {
	s.RegisterService(&DeploymentScopesAPI_ServiceDesc, srv)
}

func _DeploymentScopesAPI_CreateDeploymentScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentScopesAPIServer).CreateDeploymentScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.DeploymentScopesAPI/CreateDeploymentScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentScopesAPIServer).CreateDeploymentScope(ctx, req.(*CreateDeploymentScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentScopesAPI_DeleteDeploymentScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentScopesAPIServer).DeleteDeploymentScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.DeploymentScopesAPI/DeleteDeploymentScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentScopesAPIServer).DeleteDeploymentScope(ctx, req.(*DeleteDeploymentScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentScopesAPI_GetDeploymentScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentScopesAPIServer).GetDeploymentScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.DeploymentScopesAPI/GetDeploymentScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentScopesAPIServer).GetDeploymentScope(ctx, req.(*GetDeploymentScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentScopesAPI_GetDeploymentScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentScopesAPIServer).GetDeploymentScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.DeploymentScopesAPI/GetDeploymentScopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentScopesAPIServer).GetDeploymentScopes(ctx, req.(*GetDeploymentScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentScopesAPI_UpdateDeploymentScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentScopesAPIServer).UpdateDeploymentScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.DeploymentScopesAPI/UpdateDeploymentScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentScopesAPIServer).UpdateDeploymentScope(ctx, req.(*UpdateDeploymentScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeploymentScopesAPI_ServiceDesc is the grpc.ServiceDesc for DeploymentScopesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeploymentScopesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colbylwilliams.teamcloud.v1.DeploymentScopesAPI",
	HandlerType: (*DeploymentScopesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeploymentScope",
			Handler:    _DeploymentScopesAPI_CreateDeploymentScope_Handler,
		},
		{
			MethodName: "DeleteDeploymentScope",
			Handler:    _DeploymentScopesAPI_DeleteDeploymentScope_Handler,
		},
		{
			MethodName: "GetDeploymentScope",
			Handler:    _DeploymentScopesAPI_GetDeploymentScope_Handler,
		},
		{
			MethodName: "GetDeploymentScopes",
			Handler:    _DeploymentScopesAPI_GetDeploymentScopes_Handler,
		},
		{
			MethodName: "UpdateDeploymentScope",
			Handler:    _DeploymentScopesAPI_UpdateDeploymentScope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamcloud/v1/deployment_scopes_service.proto",
}
