// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: teamcloud/v1/schedule_service.proto

package teamcloudv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScheduleRequestMultiError, or nil if none found.
func (m *CreateScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if all {
		switch v := interface{}(m.GetScheduleDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "ScheduleDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "ScheduleDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduleDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateScheduleRequestValidationError{
				field:  "ScheduleDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateScheduleRequestMultiError(errors)
	}

	return nil
}

// CreateScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScheduleRequestMultiError) AllErrors() []error { return m }

// CreateScheduleRequestValidationError is the validation error returned by
// CreateScheduleRequest.Validate if the designated constraints aren't met.
type CreateScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScheduleRequestValidationError) ErrorName() string {
	return "CreateScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScheduleRequestValidationError{}

// Validate checks the field values on GetScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScheduleRequestMultiError, or nil if none found.
func (m *GetScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduleId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetScheduleRequestMultiError(errors)
	}

	return nil
}

// GetScheduleRequestMultiError is an error wrapping multiple validation errors
// returned by GetScheduleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScheduleRequestMultiError) AllErrors() []error { return m }

// GetScheduleRequestValidationError is the validation error returned by
// GetScheduleRequest.Validate if the designated constraints aren't met.
type GetScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScheduleRequestValidationError) ErrorName() string {
	return "GetScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScheduleRequestValidationError{}

// Validate checks the field values on GetSchedulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSchedulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSchedulesRequestMultiError, or nil if none found.
func (m *GetSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetSchedulesRequestMultiError(errors)
	}

	return nil
}

// GetSchedulesRequestMultiError is an error wrapping multiple validation
// errors returned by GetSchedulesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSchedulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSchedulesRequestMultiError) AllErrors() []error { return m }

// GetSchedulesRequestValidationError is the validation error returned by
// GetSchedulesRequest.Validate if the designated constraints aren't met.
type GetSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSchedulesRequestValidationError) ErrorName() string {
	return "GetSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSchedulesRequestValidationError{}

// Validate checks the field values on RunScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunScheduleRequestMultiError, or nil if none found.
func (m *RunScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduleId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return RunScheduleRequestMultiError(errors)
	}

	return nil
}

// RunScheduleRequestMultiError is an error wrapping multiple validation errors
// returned by RunScheduleRequest.ValidateAll() if the designated constraints
// aren't met.
type RunScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunScheduleRequestMultiError) AllErrors() []error { return m }

// RunScheduleRequestValidationError is the validation error returned by
// RunScheduleRequest.Validate if the designated constraints aren't met.
type RunScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunScheduleRequestValidationError) ErrorName() string {
	return "RunScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunScheduleRequestValidationError{}

// Validate checks the field values on UpdateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateScheduleRequestMultiError, or nil if none found.
func (m *UpdateScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduleId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateScheduleRequestValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateScheduleRequestValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateScheduleRequestValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateScheduleRequestMultiError(errors)
	}

	return nil
}

// UpdateScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateScheduleRequestMultiError) AllErrors() []error { return m }

// UpdateScheduleRequestValidationError is the validation error returned by
// UpdateScheduleRequest.Validate if the designated constraints aren't met.
type UpdateScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScheduleRequestValidationError) ErrorName() string {
	return "UpdateScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScheduleRequestValidationError{}
