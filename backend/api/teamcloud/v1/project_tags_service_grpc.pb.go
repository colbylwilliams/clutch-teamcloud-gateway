// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: teamcloud/v1/project_tags_service.proto

package teamcloudv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectTagsAPIClient is the client API for ProjectTagsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectTagsAPIClient interface {
	CreateProjectTag(ctx context.Context, in *CreateProjectTagRequest, opts ...grpc.CallOption) (*StatusResult, error)
	DeleteProjectTag(ctx context.Context, in *DeleteProjectTagRequest, opts ...grpc.CallOption) (*StatusResult, error)
	GetProjectTagByKey(ctx context.Context, in *GetProjectTagByKeyRequest, opts ...grpc.CallOption) (*StringStringDictionaryDataResult, error)
	GetProjectTags(ctx context.Context, in *GetProjectTagsRequest, opts ...grpc.CallOption) (*StringStringDictionaryDataResult, error)
	UpdateProjectTag(ctx context.Context, in *UpdateProjectTagRequest, opts ...grpc.CallOption) (*StatusResult, error)
}

type projectTagsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectTagsAPIClient(cc grpc.ClientConnInterface) ProjectTagsAPIClient {
	return &projectTagsAPIClient{cc}
}

func (c *projectTagsAPIClient) CreateProjectTag(ctx context.Context, in *CreateProjectTagRequest, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectTagsAPI/CreateProjectTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectTagsAPIClient) DeleteProjectTag(ctx context.Context, in *DeleteProjectTagRequest, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectTagsAPI/DeleteProjectTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectTagsAPIClient) GetProjectTagByKey(ctx context.Context, in *GetProjectTagByKeyRequest, opts ...grpc.CallOption) (*StringStringDictionaryDataResult, error) {
	out := new(StringStringDictionaryDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectTagsAPI/GetProjectTagByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectTagsAPIClient) GetProjectTags(ctx context.Context, in *GetProjectTagsRequest, opts ...grpc.CallOption) (*StringStringDictionaryDataResult, error) {
	out := new(StringStringDictionaryDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectTagsAPI/GetProjectTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectTagsAPIClient) UpdateProjectTag(ctx context.Context, in *UpdateProjectTagRequest, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectTagsAPI/UpdateProjectTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectTagsAPIServer is the server API for ProjectTagsAPI service.
// All implementations should embed UnimplementedProjectTagsAPIServer
// for forward compatibility
type ProjectTagsAPIServer interface {
	CreateProjectTag(context.Context, *CreateProjectTagRequest) (*StatusResult, error)
	DeleteProjectTag(context.Context, *DeleteProjectTagRequest) (*StatusResult, error)
	GetProjectTagByKey(context.Context, *GetProjectTagByKeyRequest) (*StringStringDictionaryDataResult, error)
	GetProjectTags(context.Context, *GetProjectTagsRequest) (*StringStringDictionaryDataResult, error)
	UpdateProjectTag(context.Context, *UpdateProjectTagRequest) (*StatusResult, error)
}

// UnimplementedProjectTagsAPIServer should be embedded to have forward compatible implementations.
type UnimplementedProjectTagsAPIServer struct {
}

func (UnimplementedProjectTagsAPIServer) CreateProjectTag(context.Context, *CreateProjectTagRequest) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectTag not implemented")
}
func (UnimplementedProjectTagsAPIServer) DeleteProjectTag(context.Context, *DeleteProjectTagRequest) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectTag not implemented")
}
func (UnimplementedProjectTagsAPIServer) GetProjectTagByKey(context.Context, *GetProjectTagByKeyRequest) (*StringStringDictionaryDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectTagByKey not implemented")
}
func (UnimplementedProjectTagsAPIServer) GetProjectTags(context.Context, *GetProjectTagsRequest) (*StringStringDictionaryDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectTags not implemented")
}
func (UnimplementedProjectTagsAPIServer) UpdateProjectTag(context.Context, *UpdateProjectTagRequest) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectTag not implemented")
}

// UnsafeProjectTagsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectTagsAPIServer will
// result in compilation errors.
type UnsafeProjectTagsAPIServer interface {
	mustEmbedUnimplementedProjectTagsAPIServer()
}

func RegisterProjectTagsAPIServer(s grpc.ServiceRegistrar, srv ProjectTagsAPIServer) {
	s.RegisterService(&ProjectTagsAPI_ServiceDesc, srv)
}

func _ProjectTagsAPI_CreateProjectTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTagsAPIServer).CreateProjectTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectTagsAPI/CreateProjectTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTagsAPIServer).CreateProjectTag(ctx, req.(*CreateProjectTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectTagsAPI_DeleteProjectTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTagsAPIServer).DeleteProjectTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectTagsAPI/DeleteProjectTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTagsAPIServer).DeleteProjectTag(ctx, req.(*DeleteProjectTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectTagsAPI_GetProjectTagByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectTagByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTagsAPIServer).GetProjectTagByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectTagsAPI/GetProjectTagByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTagsAPIServer).GetProjectTagByKey(ctx, req.(*GetProjectTagByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectTagsAPI_GetProjectTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTagsAPIServer).GetProjectTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectTagsAPI/GetProjectTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTagsAPIServer).GetProjectTags(ctx, req.(*GetProjectTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectTagsAPI_UpdateProjectTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTagsAPIServer).UpdateProjectTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectTagsAPI/UpdateProjectTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTagsAPIServer).UpdateProjectTag(ctx, req.(*UpdateProjectTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectTagsAPI_ServiceDesc is the grpc.ServiceDesc for ProjectTagsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectTagsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colbylwilliams.teamcloud.v1.ProjectTagsAPI",
	HandlerType: (*ProjectTagsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectTag",
			Handler:    _ProjectTagsAPI_CreateProjectTag_Handler,
		},
		{
			MethodName: "DeleteProjectTag",
			Handler:    _ProjectTagsAPI_DeleteProjectTag_Handler,
		},
		{
			MethodName: "GetProjectTagByKey",
			Handler:    _ProjectTagsAPI_GetProjectTagByKey_Handler,
		},
		{
			MethodName: "GetProjectTags",
			Handler:    _ProjectTagsAPI_GetProjectTags_Handler,
		},
		{
			MethodName: "UpdateProjectTag",
			Handler:    _ProjectTagsAPI_UpdateProjectTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamcloud/v1/project_tags_service.proto",
}
