// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: teamcloud/v1/negotiate_service.proto

package teamcloudv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NegotiateAPIClient is the client API for NegotiateAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NegotiateAPIClient interface {
	NegotiateSignalR(ctx context.Context, in *NegotiateSignalRRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type negotiateAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNegotiateAPIClient(cc grpc.ClientConnInterface) NegotiateAPIClient {
	return &negotiateAPIClient{cc}
}

func (c *negotiateAPIClient) NegotiateSignalR(ctx context.Context, in *NegotiateSignalRRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.NegotiateAPI/NegotiateSignalR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NegotiateAPIServer is the server API for NegotiateAPI service.
// All implementations should embed UnimplementedNegotiateAPIServer
// for forward compatibility
type NegotiateAPIServer interface {
	NegotiateSignalR(context.Context, *NegotiateSignalRRequest) (*emptypb.Empty, error)
}

// UnimplementedNegotiateAPIServer should be embedded to have forward compatible implementations.
type UnimplementedNegotiateAPIServer struct {
}

func (UnimplementedNegotiateAPIServer) NegotiateSignalR(context.Context, *NegotiateSignalRRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NegotiateSignalR not implemented")
}

// UnsafeNegotiateAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NegotiateAPIServer will
// result in compilation errors.
type UnsafeNegotiateAPIServer interface {
	mustEmbedUnimplementedNegotiateAPIServer()
}

func RegisterNegotiateAPIServer(s grpc.ServiceRegistrar, srv NegotiateAPIServer) {
	s.RegisterService(&NegotiateAPI_ServiceDesc, srv)
}

func _NegotiateAPI_NegotiateSignalR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NegotiateSignalRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NegotiateAPIServer).NegotiateSignalR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.NegotiateAPI/NegotiateSignalR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NegotiateAPIServer).NegotiateSignalR(ctx, req.(*NegotiateSignalRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NegotiateAPI_ServiceDesc is the grpc.ServiceDesc for NegotiateAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NegotiateAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colbylwilliams.teamcloud.v1.NegotiateAPI",
	HandlerType: (*NegotiateAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NegotiateSignalR",
			Handler:    _NegotiateAPI_NegotiateSignalR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamcloud/v1/negotiate_service.proto",
}
