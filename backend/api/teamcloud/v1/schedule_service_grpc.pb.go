// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: teamcloud/v1/schedule_service.proto

package teamcloudv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScheduleAPIClient is the client API for ScheduleAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleAPIClient interface {
	CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*ScheduleDataResult, error)
	GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*ScheduleDataResult, error)
	GetSchedules(ctx context.Context, in *GetSchedulesRequest, opts ...grpc.CallOption) (*ScheduleListDataResult, error)
	RunSchedule(ctx context.Context, in *RunScheduleRequest, opts ...grpc.CallOption) (*ScheduleDataResult, error)
	UpdateSchedule(ctx context.Context, in *UpdateScheduleRequest, opts ...grpc.CallOption) (*ScheduleDataResult, error)
}

type scheduleAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleAPIClient(cc grpc.ClientConnInterface) ScheduleAPIClient {
	return &scheduleAPIClient{cc}
}

func (c *scheduleAPIClient) CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*ScheduleDataResult, error) {
	out := new(ScheduleDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ScheduleAPI/CreateSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleAPIClient) GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*ScheduleDataResult, error) {
	out := new(ScheduleDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ScheduleAPI/GetSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleAPIClient) GetSchedules(ctx context.Context, in *GetSchedulesRequest, opts ...grpc.CallOption) (*ScheduleListDataResult, error) {
	out := new(ScheduleListDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ScheduleAPI/GetSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleAPIClient) RunSchedule(ctx context.Context, in *RunScheduleRequest, opts ...grpc.CallOption) (*ScheduleDataResult, error) {
	out := new(ScheduleDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ScheduleAPI/RunSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleAPIClient) UpdateSchedule(ctx context.Context, in *UpdateScheduleRequest, opts ...grpc.CallOption) (*ScheduleDataResult, error) {
	out := new(ScheduleDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ScheduleAPI/UpdateSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleAPIServer is the server API for ScheduleAPI service.
// All implementations should embed UnimplementedScheduleAPIServer
// for forward compatibility
type ScheduleAPIServer interface {
	CreateSchedule(context.Context, *CreateScheduleRequest) (*ScheduleDataResult, error)
	GetSchedule(context.Context, *GetScheduleRequest) (*ScheduleDataResult, error)
	GetSchedules(context.Context, *GetSchedulesRequest) (*ScheduleListDataResult, error)
	RunSchedule(context.Context, *RunScheduleRequest) (*ScheduleDataResult, error)
	UpdateSchedule(context.Context, *UpdateScheduleRequest) (*ScheduleDataResult, error)
}

// UnimplementedScheduleAPIServer should be embedded to have forward compatible implementations.
type UnimplementedScheduleAPIServer struct {
}

func (UnimplementedScheduleAPIServer) CreateSchedule(context.Context, *CreateScheduleRequest) (*ScheduleDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedule not implemented")
}
func (UnimplementedScheduleAPIServer) GetSchedule(context.Context, *GetScheduleRequest) (*ScheduleDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedScheduleAPIServer) GetSchedules(context.Context, *GetSchedulesRequest) (*ScheduleListDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedules not implemented")
}
func (UnimplementedScheduleAPIServer) RunSchedule(context.Context, *RunScheduleRequest) (*ScheduleDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSchedule not implemented")
}
func (UnimplementedScheduleAPIServer) UpdateSchedule(context.Context, *UpdateScheduleRequest) (*ScheduleDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchedule not implemented")
}

// UnsafeScheduleAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleAPIServer will
// result in compilation errors.
type UnsafeScheduleAPIServer interface {
	mustEmbedUnimplementedScheduleAPIServer()
}

func RegisterScheduleAPIServer(s grpc.ServiceRegistrar, srv ScheduleAPIServer) {
	s.RegisterService(&ScheduleAPI_ServiceDesc, srv)
}

func _ScheduleAPI_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleAPIServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ScheduleAPI/CreateSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleAPIServer).CreateSchedule(ctx, req.(*CreateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleAPI_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleAPIServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ScheduleAPI/GetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleAPIServer).GetSchedule(ctx, req.(*GetScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleAPI_GetSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleAPIServer).GetSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ScheduleAPI/GetSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleAPIServer).GetSchedules(ctx, req.(*GetSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleAPI_RunSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleAPIServer).RunSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ScheduleAPI/RunSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleAPIServer).RunSchedule(ctx, req.(*RunScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleAPI_UpdateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleAPIServer).UpdateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ScheduleAPI/UpdateSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleAPIServer).UpdateSchedule(ctx, req.(*UpdateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleAPI_ServiceDesc is the grpc.ServiceDesc for ScheduleAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colbylwilliams.teamcloud.v1.ScheduleAPI",
	HandlerType: (*ScheduleAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchedule",
			Handler:    _ScheduleAPI_CreateSchedule_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _ScheduleAPI_GetSchedule_Handler,
		},
		{
			MethodName: "GetSchedules",
			Handler:    _ScheduleAPI_GetSchedules_Handler,
		},
		{
			MethodName: "RunSchedule",
			Handler:    _ScheduleAPI_RunSchedule_Handler,
		},
		{
			MethodName: "UpdateSchedule",
			Handler:    _ScheduleAPI_UpdateSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamcloud/v1/schedule_service.proto",
}
