// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: teamcloud/v1/project_users_service.proto

package teamcloudv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectUsersAPIClient is the client API for ProjectUsersAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectUsersAPIClient interface {
	CreateProjectUser(ctx context.Context, in *CreateProjectUserRequest, opts ...grpc.CallOption) (*UserDataResult, error)
	DeleteProjectUser(ctx context.Context, in *DeleteProjectUserRequest, opts ...grpc.CallOption) (*StatusResult, error)
	GetProjectUser(ctx context.Context, in *GetProjectUserRequest, opts ...grpc.CallOption) (*UserDataResult, error)
	GetProjectUserMe(ctx context.Context, in *GetProjectUserMeRequest, opts ...grpc.CallOption) (*UserDataResult, error)
	GetProjectUsers(ctx context.Context, in *GetProjectUsersRequest, opts ...grpc.CallOption) (*UserListDataResult, error)
	UpdateProjectUser(ctx context.Context, in *UpdateProjectUserRequest, opts ...grpc.CallOption) (*UserDataResult, error)
	UpdateProjectUserMe(ctx context.Context, in *UpdateProjectUserMeRequest, opts ...grpc.CallOption) (*UserDataResult, error)
}

type projectUsersAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectUsersAPIClient(cc grpc.ClientConnInterface) ProjectUsersAPIClient {
	return &projectUsersAPIClient{cc}
}

func (c *projectUsersAPIClient) CreateProjectUser(ctx context.Context, in *CreateProjectUserRequest, opts ...grpc.CallOption) (*UserDataResult, error) {
	out := new(UserDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/CreateProjectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectUsersAPIClient) DeleteProjectUser(ctx context.Context, in *DeleteProjectUserRequest, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/DeleteProjectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectUsersAPIClient) GetProjectUser(ctx context.Context, in *GetProjectUserRequest, opts ...grpc.CallOption) (*UserDataResult, error) {
	out := new(UserDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/GetProjectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectUsersAPIClient) GetProjectUserMe(ctx context.Context, in *GetProjectUserMeRequest, opts ...grpc.CallOption) (*UserDataResult, error) {
	out := new(UserDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/GetProjectUserMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectUsersAPIClient) GetProjectUsers(ctx context.Context, in *GetProjectUsersRequest, opts ...grpc.CallOption) (*UserListDataResult, error) {
	out := new(UserListDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/GetProjectUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectUsersAPIClient) UpdateProjectUser(ctx context.Context, in *UpdateProjectUserRequest, opts ...grpc.CallOption) (*UserDataResult, error) {
	out := new(UserDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/UpdateProjectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectUsersAPIClient) UpdateProjectUserMe(ctx context.Context, in *UpdateProjectUserMeRequest, opts ...grpc.CallOption) (*UserDataResult, error) {
	out := new(UserDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/UpdateProjectUserMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectUsersAPIServer is the server API for ProjectUsersAPI service.
// All implementations should embed UnimplementedProjectUsersAPIServer
// for forward compatibility
type ProjectUsersAPIServer interface {
	CreateProjectUser(context.Context, *CreateProjectUserRequest) (*UserDataResult, error)
	DeleteProjectUser(context.Context, *DeleteProjectUserRequest) (*StatusResult, error)
	GetProjectUser(context.Context, *GetProjectUserRequest) (*UserDataResult, error)
	GetProjectUserMe(context.Context, *GetProjectUserMeRequest) (*UserDataResult, error)
	GetProjectUsers(context.Context, *GetProjectUsersRequest) (*UserListDataResult, error)
	UpdateProjectUser(context.Context, *UpdateProjectUserRequest) (*UserDataResult, error)
	UpdateProjectUserMe(context.Context, *UpdateProjectUserMeRequest) (*UserDataResult, error)
}

// UnimplementedProjectUsersAPIServer should be embedded to have forward compatible implementations.
type UnimplementedProjectUsersAPIServer struct {
}

func (UnimplementedProjectUsersAPIServer) CreateProjectUser(context.Context, *CreateProjectUserRequest) (*UserDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectUser not implemented")
}
func (UnimplementedProjectUsersAPIServer) DeleteProjectUser(context.Context, *DeleteProjectUserRequest) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectUser not implemented")
}
func (UnimplementedProjectUsersAPIServer) GetProjectUser(context.Context, *GetProjectUserRequest) (*UserDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectUser not implemented")
}
func (UnimplementedProjectUsersAPIServer) GetProjectUserMe(context.Context, *GetProjectUserMeRequest) (*UserDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectUserMe not implemented")
}
func (UnimplementedProjectUsersAPIServer) GetProjectUsers(context.Context, *GetProjectUsersRequest) (*UserListDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectUsers not implemented")
}
func (UnimplementedProjectUsersAPIServer) UpdateProjectUser(context.Context, *UpdateProjectUserRequest) (*UserDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectUser not implemented")
}
func (UnimplementedProjectUsersAPIServer) UpdateProjectUserMe(context.Context, *UpdateProjectUserMeRequest) (*UserDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectUserMe not implemented")
}

// UnsafeProjectUsersAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectUsersAPIServer will
// result in compilation errors.
type UnsafeProjectUsersAPIServer interface {
	mustEmbedUnimplementedProjectUsersAPIServer()
}

func RegisterProjectUsersAPIServer(s grpc.ServiceRegistrar, srv ProjectUsersAPIServer) {
	s.RegisterService(&ProjectUsersAPI_ServiceDesc, srv)
}

func _ProjectUsersAPI_CreateProjectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectUsersAPIServer).CreateProjectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/CreateProjectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectUsersAPIServer).CreateProjectUser(ctx, req.(*CreateProjectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectUsersAPI_DeleteProjectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectUsersAPIServer).DeleteProjectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/DeleteProjectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectUsersAPIServer).DeleteProjectUser(ctx, req.(*DeleteProjectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectUsersAPI_GetProjectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectUsersAPIServer).GetProjectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/GetProjectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectUsersAPIServer).GetProjectUser(ctx, req.(*GetProjectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectUsersAPI_GetProjectUserMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectUserMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectUsersAPIServer).GetProjectUserMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/GetProjectUserMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectUsersAPIServer).GetProjectUserMe(ctx, req.(*GetProjectUserMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectUsersAPI_GetProjectUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectUsersAPIServer).GetProjectUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/GetProjectUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectUsersAPIServer).GetProjectUsers(ctx, req.(*GetProjectUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectUsersAPI_UpdateProjectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectUsersAPIServer).UpdateProjectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/UpdateProjectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectUsersAPIServer).UpdateProjectUser(ctx, req.(*UpdateProjectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectUsersAPI_UpdateProjectUserMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectUserMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectUsersAPIServer).UpdateProjectUserMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ProjectUsersAPI/UpdateProjectUserMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectUsersAPIServer).UpdateProjectUserMe(ctx, req.(*UpdateProjectUserMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectUsersAPI_ServiceDesc is the grpc.ServiceDesc for ProjectUsersAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectUsersAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colbylwilliams.teamcloud.v1.ProjectUsersAPI",
	HandlerType: (*ProjectUsersAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectUser",
			Handler:    _ProjectUsersAPI_CreateProjectUser_Handler,
		},
		{
			MethodName: "DeleteProjectUser",
			Handler:    _ProjectUsersAPI_DeleteProjectUser_Handler,
		},
		{
			MethodName: "GetProjectUser",
			Handler:    _ProjectUsersAPI_GetProjectUser_Handler,
		},
		{
			MethodName: "GetProjectUserMe",
			Handler:    _ProjectUsersAPI_GetProjectUserMe_Handler,
		},
		{
			MethodName: "GetProjectUsers",
			Handler:    _ProjectUsersAPI_GetProjectUsers_Handler,
		},
		{
			MethodName: "UpdateProjectUser",
			Handler:    _ProjectUsersAPI_UpdateProjectUser_Handler,
		},
		{
			MethodName: "UpdateProjectUserMe",
			Handler:    _ProjectUsersAPI_UpdateProjectUserMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamcloud/v1/project_users_service.proto",
}
