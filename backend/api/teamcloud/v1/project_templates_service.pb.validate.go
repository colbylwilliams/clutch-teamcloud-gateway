// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: teamcloud/v1/project_templates_service.proto

package teamcloudv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProjectTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectTemplateRequestMultiError, or nil if none found.
func (m *CreateProjectTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if all {
		switch v := interface{}(m.GetProjectTemplateDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectTemplateRequestValidationError{
					field:  "ProjectTemplateDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectTemplateRequestValidationError{
					field:  "ProjectTemplateDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectTemplateDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectTemplateRequestValidationError{
				field:  "ProjectTemplateDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateProjectTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProjectTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProjectTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectTemplateRequestMultiError) AllErrors() []error { return m }

// CreateProjectTemplateRequestValidationError is the validation error returned
// by CreateProjectTemplateRequest.Validate if the designated constraints
// aren't met.
type CreateProjectTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectTemplateRequestValidationError) ErrorName() string {
	return "CreateProjectTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectTemplateRequestValidationError{}

// Validate checks the field values on DeleteProjectTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectTemplateRequestMultiError, or nil if none found.
func (m *DeleteProjectTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectTemplateId

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return DeleteProjectTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProjectTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteProjectTemplateRequestValidationError is the validation error returned
// by DeleteProjectTemplateRequest.Validate if the designated constraints
// aren't met.
type DeleteProjectTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectTemplateRequestValidationError) ErrorName() string {
	return "DeleteProjectTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectTemplateRequestValidationError{}

// Validate checks the field values on GetProjectTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectTemplateRequestMultiError, or nil if none found.
func (m *GetProjectTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectTemplateId

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return GetProjectTemplateRequestMultiError(errors)
	}

	return nil
}

// GetProjectTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectTemplateRequest.ValidateAll() if the
// designated constraints aren't met.
type GetProjectTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectTemplateRequestMultiError) AllErrors() []error { return m }

// GetProjectTemplateRequestValidationError is the validation error returned by
// GetProjectTemplateRequest.Validate if the designated constraints aren't met.
type GetProjectTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectTemplateRequestValidationError) ErrorName() string {
	return "GetProjectTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectTemplateRequestValidationError{}

// Validate checks the field values on GetProjectTemplatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectTemplatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectTemplatesRequestMultiError, or nil if none found.
func (m *GetProjectTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return GetProjectTemplatesRequestMultiError(errors)
	}

	return nil
}

// GetProjectTemplatesRequestMultiError is an error wrapping multiple
// validation errors returned by GetProjectTemplatesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetProjectTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectTemplatesRequestMultiError) AllErrors() []error { return m }

// GetProjectTemplatesRequestValidationError is the validation error returned
// by GetProjectTemplatesRequest.Validate if the designated constraints aren't met.
type GetProjectTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectTemplatesRequestValidationError) ErrorName() string {
	return "GetProjectTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectTemplatesRequestValidationError{}

// Validate checks the field values on UpdateProjectTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectTemplateRequestMultiError, or nil if none found.
func (m *UpdateProjectTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectTemplateId

	// no validation rules for OrganizationId

	if all {
		switch v := interface{}(m.GetProjectTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectTemplateRequestValidationError{
					field:  "ProjectTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectTemplateRequestValidationError{
					field:  "ProjectTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectTemplateRequestValidationError{
				field:  "ProjectTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProjectTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateProjectTemplateRequestValidationError is the validation error returned
// by UpdateProjectTemplateRequest.Validate if the designated constraints
// aren't met.
type UpdateProjectTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectTemplateRequestValidationError) ErrorName() string {
	return "UpdateProjectTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectTemplateRequestValidationError{}
