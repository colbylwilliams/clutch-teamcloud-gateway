// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: teamcloud/v1/root_service.proto

package teamcloudv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RootAPIClient is the client API for RootAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RootAPIClient interface {
	GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TeamCloudInformationDataResult, error)
}

type rootAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRootAPIClient(cc grpc.ClientConnInterface) RootAPIClient {
	return &rootAPIClient{cc}
}

func (c *rootAPIClient) GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TeamCloudInformationDataResult, error) {
	out := new(TeamCloudInformationDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.RootAPI/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RootAPIServer is the server API for RootAPI service.
// All implementations should embed UnimplementedRootAPIServer
// for forward compatibility
type RootAPIServer interface {
	GetInfo(context.Context, *emptypb.Empty) (*TeamCloudInformationDataResult, error)
}

// UnimplementedRootAPIServer should be embedded to have forward compatible implementations.
type UnimplementedRootAPIServer struct {
}

func (UnimplementedRootAPIServer) GetInfo(context.Context, *emptypb.Empty) (*TeamCloudInformationDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}

// UnsafeRootAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RootAPIServer will
// result in compilation errors.
type UnsafeRootAPIServer interface {
	mustEmbedUnimplementedRootAPIServer()
}

func RegisterRootAPIServer(s grpc.ServiceRegistrar, srv RootAPIServer) {
	s.RegisterService(&RootAPI_ServiceDesc, srv)
}

func _RootAPI_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootAPIServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.RootAPI/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootAPIServer).GetInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RootAPI_ServiceDesc is the grpc.ServiceDesc for RootAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RootAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colbylwilliams.teamcloud.v1.RootAPI",
	HandlerType: (*RootAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _RootAPI_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamcloud/v1/root_service.proto",
}
