// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: teamcloud/v1/deployment_scopes_service.proto

package teamcloudv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDeploymentScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeploymentScopeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeploymentScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeploymentScopeRequestMultiError, or nil if none found.
func (m *CreateDeploymentScopeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeploymentScopeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if all {
		switch v := interface{}(m.GetDeploymentScopeDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeploymentScopeRequestValidationError{
					field:  "DeploymentScopeDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeploymentScopeRequestValidationError{
					field:  "DeploymentScopeDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentScopeDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeploymentScopeRequestValidationError{
				field:  "DeploymentScopeDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDeploymentScopeRequestMultiError(errors)
	}

	return nil
}

// CreateDeploymentScopeRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDeploymentScopeRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateDeploymentScopeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeploymentScopeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeploymentScopeRequestMultiError) AllErrors() []error { return m }

// CreateDeploymentScopeRequestValidationError is the validation error returned
// by CreateDeploymentScopeRequest.Validate if the designated constraints
// aren't met.
type CreateDeploymentScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentScopeRequestValidationError) ErrorName() string {
	return "CreateDeploymentScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentScopeRequestValidationError{}

// Validate checks the field values on DeleteDeploymentScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeploymentScopeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeploymentScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeploymentScopeRequestMultiError, or nil if none found.
func (m *DeleteDeploymentScopeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeploymentScopeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for DeploymentScopeId

	if len(errors) > 0 {
		return DeleteDeploymentScopeRequestMultiError(errors)
	}

	return nil
}

// DeleteDeploymentScopeRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteDeploymentScopeRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteDeploymentScopeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeploymentScopeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeploymentScopeRequestMultiError) AllErrors() []error { return m }

// DeleteDeploymentScopeRequestValidationError is the validation error returned
// by DeleteDeploymentScopeRequest.Validate if the designated constraints
// aren't met.
type DeleteDeploymentScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeploymentScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeploymentScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeploymentScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeploymentScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeploymentScopeRequestValidationError) ErrorName() string {
	return "DeleteDeploymentScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeploymentScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeploymentScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeploymentScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeploymentScopeRequestValidationError{}

// Validate checks the field values on GetDeploymentScopeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentScopeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentScopeRequestMultiError, or nil if none found.
func (m *GetDeploymentScopeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentScopeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for DeploymentScopeId

	if len(errors) > 0 {
		return GetDeploymentScopeRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentScopeRequestMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentScopeRequest.ValidateAll() if the
// designated constraints aren't met.
type GetDeploymentScopeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentScopeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentScopeRequestMultiError) AllErrors() []error { return m }

// GetDeploymentScopeRequestValidationError is the validation error returned by
// GetDeploymentScopeRequest.Validate if the designated constraints aren't met.
type GetDeploymentScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentScopeRequestValidationError) ErrorName() string {
	return "GetDeploymentScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentScopeRequestValidationError{}

// Validate checks the field values on GetDeploymentScopesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentScopesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentScopesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentScopesRequestMultiError, or nil if none found.
func (m *GetDeploymentScopesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentScopesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return GetDeploymentScopesRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentScopesRequestMultiError is an error wrapping multiple
// validation errors returned by GetDeploymentScopesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDeploymentScopesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentScopesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentScopesRequestMultiError) AllErrors() []error { return m }

// GetDeploymentScopesRequestValidationError is the validation error returned
// by GetDeploymentScopesRequest.Validate if the designated constraints aren't met.
type GetDeploymentScopesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentScopesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentScopesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentScopesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentScopesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentScopesRequestValidationError) ErrorName() string {
	return "GetDeploymentScopesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentScopesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentScopesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentScopesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentScopesRequestValidationError{}

// Validate checks the field values on UpdateDeploymentScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeploymentScopeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeploymentScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeploymentScopeRequestMultiError, or nil if none found.
func (m *UpdateDeploymentScopeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeploymentScopeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for DeploymentScopeId

	if all {
		switch v := interface{}(m.GetDeploymentScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeploymentScopeRequestValidationError{
					field:  "DeploymentScope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeploymentScopeRequestValidationError{
					field:  "DeploymentScope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeploymentScopeRequestValidationError{
				field:  "DeploymentScope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDeploymentScopeRequestMultiError(errors)
	}

	return nil
}

// UpdateDeploymentScopeRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDeploymentScopeRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateDeploymentScopeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeploymentScopeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeploymentScopeRequestMultiError) AllErrors() []error { return m }

// UpdateDeploymentScopeRequestValidationError is the validation error returned
// by UpdateDeploymentScopeRequest.Validate if the designated constraints
// aren't met.
type UpdateDeploymentScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentScopeRequestValidationError) ErrorName() string {
	return "UpdateDeploymentScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentScopeRequestValidationError{}
