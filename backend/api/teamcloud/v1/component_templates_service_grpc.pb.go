// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: teamcloud/v1/component_templates_service.proto

package teamcloudv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComponentTemplatesAPIClient is the client API for ComponentTemplatesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentTemplatesAPIClient interface {
	GetComponentTemplate(ctx context.Context, in *GetComponentTemplateRequest, opts ...grpc.CallOption) (*ComponentTemplateDataResult, error)
	GetComponentTemplates(ctx context.Context, in *GetComponentTemplatesRequest, opts ...grpc.CallOption) (*ComponentTemplateListDataResult, error)
}

type componentTemplatesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentTemplatesAPIClient(cc grpc.ClientConnInterface) ComponentTemplatesAPIClient {
	return &componentTemplatesAPIClient{cc}
}

func (c *componentTemplatesAPIClient) GetComponentTemplate(ctx context.Context, in *GetComponentTemplateRequest, opts ...grpc.CallOption) (*ComponentTemplateDataResult, error) {
	out := new(ComponentTemplateDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ComponentTemplatesAPI/GetComponentTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentTemplatesAPIClient) GetComponentTemplates(ctx context.Context, in *GetComponentTemplatesRequest, opts ...grpc.CallOption) (*ComponentTemplateListDataResult, error) {
	out := new(ComponentTemplateListDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ComponentTemplatesAPI/GetComponentTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentTemplatesAPIServer is the server API for ComponentTemplatesAPI service.
// All implementations should embed UnimplementedComponentTemplatesAPIServer
// for forward compatibility
type ComponentTemplatesAPIServer interface {
	GetComponentTemplate(context.Context, *GetComponentTemplateRequest) (*ComponentTemplateDataResult, error)
	GetComponentTemplates(context.Context, *GetComponentTemplatesRequest) (*ComponentTemplateListDataResult, error)
}

// UnimplementedComponentTemplatesAPIServer should be embedded to have forward compatible implementations.
type UnimplementedComponentTemplatesAPIServer struct {
}

func (UnimplementedComponentTemplatesAPIServer) GetComponentTemplate(context.Context, *GetComponentTemplateRequest) (*ComponentTemplateDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentTemplate not implemented")
}
func (UnimplementedComponentTemplatesAPIServer) GetComponentTemplates(context.Context, *GetComponentTemplatesRequest) (*ComponentTemplateListDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentTemplates not implemented")
}

// UnsafeComponentTemplatesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentTemplatesAPIServer will
// result in compilation errors.
type UnsafeComponentTemplatesAPIServer interface {
	mustEmbedUnimplementedComponentTemplatesAPIServer()
}

func RegisterComponentTemplatesAPIServer(s grpc.ServiceRegistrar, srv ComponentTemplatesAPIServer) {
	s.RegisterService(&ComponentTemplatesAPI_ServiceDesc, srv)
}

func _ComponentTemplatesAPI_GetComponentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentTemplatesAPIServer).GetComponentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ComponentTemplatesAPI/GetComponentTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentTemplatesAPIServer).GetComponentTemplate(ctx, req.(*GetComponentTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentTemplatesAPI_GetComponentTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentTemplatesAPIServer).GetComponentTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ComponentTemplatesAPI/GetComponentTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentTemplatesAPIServer).GetComponentTemplates(ctx, req.(*GetComponentTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComponentTemplatesAPI_ServiceDesc is the grpc.ServiceDesc for ComponentTemplatesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComponentTemplatesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colbylwilliams.teamcloud.v1.ComponentTemplatesAPI",
	HandlerType: (*ComponentTemplatesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentTemplate",
			Handler:    _ComponentTemplatesAPI_GetComponentTemplate_Handler,
		},
		{
			MethodName: "GetComponentTemplates",
			Handler:    _ComponentTemplatesAPI_GetComponentTemplates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamcloud/v1/component_templates_service.proto",
}
