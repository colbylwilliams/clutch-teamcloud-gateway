// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: teamcloud/v1/organization_users_service.proto

package teamcloudv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrganizationUsersAPIClient is the client API for OrganizationUsersAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationUsersAPIClient interface {
	CreateOrganizationUser(ctx context.Context, in *CreateOrganizationUserRequest, opts ...grpc.CallOption) (*UserDataResult, error)
	DeleteOrganizationUser(ctx context.Context, in *DeleteOrganizationUserRequest, opts ...grpc.CallOption) (*StatusResult, error)
	GetOrganizationUser(ctx context.Context, in *GetOrganizationUserRequest, opts ...grpc.CallOption) (*UserDataResult, error)
	GetOrganizationUserMe(ctx context.Context, in *GetOrganizationUserMeRequest, opts ...grpc.CallOption) (*UserDataResult, error)
	GetOrganizationUsers(ctx context.Context, in *GetOrganizationUsersRequest, opts ...grpc.CallOption) (*UserListDataResult, error)
	UpdateOrganizationUser(ctx context.Context, in *UpdateOrganizationUserRequest, opts ...grpc.CallOption) (*UserDataResult, error)
	UpdateOrganizationUserMe(ctx context.Context, in *UpdateOrganizationUserMeRequest, opts ...grpc.CallOption) (*UserDataResult, error)
}

type organizationUsersAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationUsersAPIClient(cc grpc.ClientConnInterface) OrganizationUsersAPIClient {
	return &organizationUsersAPIClient{cc}
}

func (c *organizationUsersAPIClient) CreateOrganizationUser(ctx context.Context, in *CreateOrganizationUserRequest, opts ...grpc.CallOption) (*UserDataResult, error) {
	out := new(UserDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/CreateOrganizationUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationUsersAPIClient) DeleteOrganizationUser(ctx context.Context, in *DeleteOrganizationUserRequest, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/DeleteOrganizationUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationUsersAPIClient) GetOrganizationUser(ctx context.Context, in *GetOrganizationUserRequest, opts ...grpc.CallOption) (*UserDataResult, error) {
	out := new(UserDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/GetOrganizationUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationUsersAPIClient) GetOrganizationUserMe(ctx context.Context, in *GetOrganizationUserMeRequest, opts ...grpc.CallOption) (*UserDataResult, error) {
	out := new(UserDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/GetOrganizationUserMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationUsersAPIClient) GetOrganizationUsers(ctx context.Context, in *GetOrganizationUsersRequest, opts ...grpc.CallOption) (*UserListDataResult, error) {
	out := new(UserListDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/GetOrganizationUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationUsersAPIClient) UpdateOrganizationUser(ctx context.Context, in *UpdateOrganizationUserRequest, opts ...grpc.CallOption) (*UserDataResult, error) {
	out := new(UserDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/UpdateOrganizationUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationUsersAPIClient) UpdateOrganizationUserMe(ctx context.Context, in *UpdateOrganizationUserMeRequest, opts ...grpc.CallOption) (*UserDataResult, error) {
	out := new(UserDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/UpdateOrganizationUserMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationUsersAPIServer is the server API for OrganizationUsersAPI service.
// All implementations should embed UnimplementedOrganizationUsersAPIServer
// for forward compatibility
type OrganizationUsersAPIServer interface {
	CreateOrganizationUser(context.Context, *CreateOrganizationUserRequest) (*UserDataResult, error)
	DeleteOrganizationUser(context.Context, *DeleteOrganizationUserRequest) (*StatusResult, error)
	GetOrganizationUser(context.Context, *GetOrganizationUserRequest) (*UserDataResult, error)
	GetOrganizationUserMe(context.Context, *GetOrganizationUserMeRequest) (*UserDataResult, error)
	GetOrganizationUsers(context.Context, *GetOrganizationUsersRequest) (*UserListDataResult, error)
	UpdateOrganizationUser(context.Context, *UpdateOrganizationUserRequest) (*UserDataResult, error)
	UpdateOrganizationUserMe(context.Context, *UpdateOrganizationUserMeRequest) (*UserDataResult, error)
}

// UnimplementedOrganizationUsersAPIServer should be embedded to have forward compatible implementations.
type UnimplementedOrganizationUsersAPIServer struct {
}

func (UnimplementedOrganizationUsersAPIServer) CreateOrganizationUser(context.Context, *CreateOrganizationUserRequest) (*UserDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationUser not implemented")
}
func (UnimplementedOrganizationUsersAPIServer) DeleteOrganizationUser(context.Context, *DeleteOrganizationUserRequest) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationUser not implemented")
}
func (UnimplementedOrganizationUsersAPIServer) GetOrganizationUser(context.Context, *GetOrganizationUserRequest) (*UserDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationUser not implemented")
}
func (UnimplementedOrganizationUsersAPIServer) GetOrganizationUserMe(context.Context, *GetOrganizationUserMeRequest) (*UserDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationUserMe not implemented")
}
func (UnimplementedOrganizationUsersAPIServer) GetOrganizationUsers(context.Context, *GetOrganizationUsersRequest) (*UserListDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationUsers not implemented")
}
func (UnimplementedOrganizationUsersAPIServer) UpdateOrganizationUser(context.Context, *UpdateOrganizationUserRequest) (*UserDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationUser not implemented")
}
func (UnimplementedOrganizationUsersAPIServer) UpdateOrganizationUserMe(context.Context, *UpdateOrganizationUserMeRequest) (*UserDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationUserMe not implemented")
}

// UnsafeOrganizationUsersAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationUsersAPIServer will
// result in compilation errors.
type UnsafeOrganizationUsersAPIServer interface {
	mustEmbedUnimplementedOrganizationUsersAPIServer()
}

func RegisterOrganizationUsersAPIServer(s grpc.ServiceRegistrar, srv OrganizationUsersAPIServer) {
	s.RegisterService(&OrganizationUsersAPI_ServiceDesc, srv)
}

func _OrganizationUsersAPI_CreateOrganizationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationUsersAPIServer).CreateOrganizationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/CreateOrganizationUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationUsersAPIServer).CreateOrganizationUser(ctx, req.(*CreateOrganizationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationUsersAPI_DeleteOrganizationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationUsersAPIServer).DeleteOrganizationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/DeleteOrganizationUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationUsersAPIServer).DeleteOrganizationUser(ctx, req.(*DeleteOrganizationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationUsersAPI_GetOrganizationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationUsersAPIServer).GetOrganizationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/GetOrganizationUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationUsersAPIServer).GetOrganizationUser(ctx, req.(*GetOrganizationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationUsersAPI_GetOrganizationUserMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationUserMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationUsersAPIServer).GetOrganizationUserMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/GetOrganizationUserMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationUsersAPIServer).GetOrganizationUserMe(ctx, req.(*GetOrganizationUserMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationUsersAPI_GetOrganizationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationUsersAPIServer).GetOrganizationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/GetOrganizationUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationUsersAPIServer).GetOrganizationUsers(ctx, req.(*GetOrganizationUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationUsersAPI_UpdateOrganizationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationUsersAPIServer).UpdateOrganizationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/UpdateOrganizationUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationUsersAPIServer).UpdateOrganizationUser(ctx, req.(*UpdateOrganizationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationUsersAPI_UpdateOrganizationUserMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationUserMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationUsersAPIServer).UpdateOrganizationUserMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.OrganizationUsersAPI/UpdateOrganizationUserMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationUsersAPIServer).UpdateOrganizationUserMe(ctx, req.(*UpdateOrganizationUserMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationUsersAPI_ServiceDesc is the grpc.ServiceDesc for OrganizationUsersAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationUsersAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colbylwilliams.teamcloud.v1.OrganizationUsersAPI",
	HandlerType: (*OrganizationUsersAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationUser",
			Handler:    _OrganizationUsersAPI_CreateOrganizationUser_Handler,
		},
		{
			MethodName: "DeleteOrganizationUser",
			Handler:    _OrganizationUsersAPI_DeleteOrganizationUser_Handler,
		},
		{
			MethodName: "GetOrganizationUser",
			Handler:    _OrganizationUsersAPI_GetOrganizationUser_Handler,
		},
		{
			MethodName: "GetOrganizationUserMe",
			Handler:    _OrganizationUsersAPI_GetOrganizationUserMe_Handler,
		},
		{
			MethodName: "GetOrganizationUsers",
			Handler:    _OrganizationUsersAPI_GetOrganizationUsers_Handler,
		},
		{
			MethodName: "UpdateOrganizationUser",
			Handler:    _OrganizationUsersAPI_UpdateOrganizationUser_Handler,
		},
		{
			MethodName: "UpdateOrganizationUserMe",
			Handler:    _OrganizationUsersAPI_UpdateOrganizationUserMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamcloud/v1/organization_users_service.proto",
}
