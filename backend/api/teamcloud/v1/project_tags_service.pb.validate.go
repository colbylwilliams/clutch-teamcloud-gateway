// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: teamcloud/v1/project_tags_service.proto

package teamcloudv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProjectTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectTagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectTagRequestMultiError, or nil if none found.
func (m *CreateProjectTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return CreateProjectTagRequestMultiError(errors)
	}

	return nil
}

// CreateProjectTagRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProjectTagRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectTagRequestMultiError) AllErrors() []error { return m }

// CreateProjectTagRequestValidationError is the validation error returned by
// CreateProjectTagRequest.Validate if the designated constraints aren't met.
type CreateProjectTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectTagRequestValidationError) ErrorName() string {
	return "CreateProjectTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectTagRequestValidationError{}

// Validate checks the field values on DeleteProjectTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectTagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectTagRequestMultiError, or nil if none found.
func (m *DeleteProjectTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TagKey

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return DeleteProjectTagRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectTagRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectTagRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectTagRequestMultiError) AllErrors() []error { return m }

// DeleteProjectTagRequestValidationError is the validation error returned by
// DeleteProjectTagRequest.Validate if the designated constraints aren't met.
type DeleteProjectTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectTagRequestValidationError) ErrorName() string {
	return "DeleteProjectTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectTagRequestValidationError{}

// Validate checks the field values on GetProjectTagByKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectTagByKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectTagByKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectTagByKeyRequestMultiError, or nil if none found.
func (m *GetProjectTagByKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectTagByKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TagKey

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetProjectTagByKeyRequestMultiError(errors)
	}

	return nil
}

// GetProjectTagByKeyRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectTagByKeyRequest.ValidateAll() if the
// designated constraints aren't met.
type GetProjectTagByKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectTagByKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectTagByKeyRequestMultiError) AllErrors() []error { return m }

// GetProjectTagByKeyRequestValidationError is the validation error returned by
// GetProjectTagByKeyRequest.Validate if the designated constraints aren't met.
type GetProjectTagByKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectTagByKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectTagByKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectTagByKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectTagByKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectTagByKeyRequestValidationError) ErrorName() string {
	return "GetProjectTagByKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectTagByKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectTagByKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectTagByKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectTagByKeyRequestValidationError{}

// Validate checks the field values on GetProjectTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectTagsRequestMultiError, or nil if none found.
func (m *GetProjectTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetProjectTagsRequestMultiError(errors)
	}

	return nil
}

// GetProjectTagsRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectTagsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProjectTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectTagsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectTagsRequestMultiError) AllErrors() []error { return m }

// GetProjectTagsRequestValidationError is the validation error returned by
// GetProjectTagsRequest.Validate if the designated constraints aren't met.
type GetProjectTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectTagsRequestValidationError) ErrorName() string {
	return "GetProjectTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectTagsRequestValidationError{}

// Validate checks the field values on UpdateProjectTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectTagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectTagRequestMultiError, or nil if none found.
func (m *UpdateProjectTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return UpdateProjectTagRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectTagRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectTagRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectTagRequestMultiError) AllErrors() []error { return m }

// UpdateProjectTagRequestValidationError is the validation error returned by
// UpdateProjectTagRequest.Validate if the designated constraints aren't met.
type UpdateProjectTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectTagRequestValidationError) ErrorName() string {
	return "UpdateProjectTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectTagRequestValidationError{}
