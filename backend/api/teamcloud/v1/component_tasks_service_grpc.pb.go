// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: teamcloud/v1/component_tasks_service.proto

package teamcloudv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComponentTasksAPIClient is the client API for ComponentTasksAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentTasksAPIClient interface {
	CancelComponentTask(ctx context.Context, in *CancelComponentTaskRequest, opts ...grpc.CallOption) (*ComponentTaskDataResult, error)
	CreateComponentTask(ctx context.Context, in *CreateComponentTaskRequest, opts ...grpc.CallOption) (*ComponentTaskDataResult, error)
	GetComponentTask(ctx context.Context, in *GetComponentTaskRequest, opts ...grpc.CallOption) (*ComponentTaskDataResult, error)
	GetComponentTasks(ctx context.Context, in *GetComponentTasksRequest, opts ...grpc.CallOption) (*ComponentTaskListDataResult, error)
	ReRunComponentTask(ctx context.Context, in *ReRunComponentTaskRequest, opts ...grpc.CallOption) (*ComponentTaskDataResult, error)
}

type componentTasksAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentTasksAPIClient(cc grpc.ClientConnInterface) ComponentTasksAPIClient {
	return &componentTasksAPIClient{cc}
}

func (c *componentTasksAPIClient) CancelComponentTask(ctx context.Context, in *CancelComponentTaskRequest, opts ...grpc.CallOption) (*ComponentTaskDataResult, error) {
	out := new(ComponentTaskDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ComponentTasksAPI/CancelComponentTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentTasksAPIClient) CreateComponentTask(ctx context.Context, in *CreateComponentTaskRequest, opts ...grpc.CallOption) (*ComponentTaskDataResult, error) {
	out := new(ComponentTaskDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ComponentTasksAPI/CreateComponentTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentTasksAPIClient) GetComponentTask(ctx context.Context, in *GetComponentTaskRequest, opts ...grpc.CallOption) (*ComponentTaskDataResult, error) {
	out := new(ComponentTaskDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ComponentTasksAPI/GetComponentTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentTasksAPIClient) GetComponentTasks(ctx context.Context, in *GetComponentTasksRequest, opts ...grpc.CallOption) (*ComponentTaskListDataResult, error) {
	out := new(ComponentTaskListDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ComponentTasksAPI/GetComponentTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentTasksAPIClient) ReRunComponentTask(ctx context.Context, in *ReRunComponentTaskRequest, opts ...grpc.CallOption) (*ComponentTaskDataResult, error) {
	out := new(ComponentTaskDataResult)
	err := c.cc.Invoke(ctx, "/colbylwilliams.teamcloud.v1.ComponentTasksAPI/ReRunComponentTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentTasksAPIServer is the server API for ComponentTasksAPI service.
// All implementations should embed UnimplementedComponentTasksAPIServer
// for forward compatibility
type ComponentTasksAPIServer interface {
	CancelComponentTask(context.Context, *CancelComponentTaskRequest) (*ComponentTaskDataResult, error)
	CreateComponentTask(context.Context, *CreateComponentTaskRequest) (*ComponentTaskDataResult, error)
	GetComponentTask(context.Context, *GetComponentTaskRequest) (*ComponentTaskDataResult, error)
	GetComponentTasks(context.Context, *GetComponentTasksRequest) (*ComponentTaskListDataResult, error)
	ReRunComponentTask(context.Context, *ReRunComponentTaskRequest) (*ComponentTaskDataResult, error)
}

// UnimplementedComponentTasksAPIServer should be embedded to have forward compatible implementations.
type UnimplementedComponentTasksAPIServer struct {
}

func (UnimplementedComponentTasksAPIServer) CancelComponentTask(context.Context, *CancelComponentTaskRequest) (*ComponentTaskDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelComponentTask not implemented")
}
func (UnimplementedComponentTasksAPIServer) CreateComponentTask(context.Context, *CreateComponentTaskRequest) (*ComponentTaskDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComponentTask not implemented")
}
func (UnimplementedComponentTasksAPIServer) GetComponentTask(context.Context, *GetComponentTaskRequest) (*ComponentTaskDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentTask not implemented")
}
func (UnimplementedComponentTasksAPIServer) GetComponentTasks(context.Context, *GetComponentTasksRequest) (*ComponentTaskListDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentTasks not implemented")
}
func (UnimplementedComponentTasksAPIServer) ReRunComponentTask(context.Context, *ReRunComponentTaskRequest) (*ComponentTaskDataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReRunComponentTask not implemented")
}

// UnsafeComponentTasksAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentTasksAPIServer will
// result in compilation errors.
type UnsafeComponentTasksAPIServer interface {
	mustEmbedUnimplementedComponentTasksAPIServer()
}

func RegisterComponentTasksAPIServer(s grpc.ServiceRegistrar, srv ComponentTasksAPIServer) {
	s.RegisterService(&ComponentTasksAPI_ServiceDesc, srv)
}

func _ComponentTasksAPI_CancelComponentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelComponentTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentTasksAPIServer).CancelComponentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ComponentTasksAPI/CancelComponentTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentTasksAPIServer).CancelComponentTask(ctx, req.(*CancelComponentTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentTasksAPI_CreateComponentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComponentTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentTasksAPIServer).CreateComponentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ComponentTasksAPI/CreateComponentTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentTasksAPIServer).CreateComponentTask(ctx, req.(*CreateComponentTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentTasksAPI_GetComponentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentTasksAPIServer).GetComponentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ComponentTasksAPI/GetComponentTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentTasksAPIServer).GetComponentTask(ctx, req.(*GetComponentTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentTasksAPI_GetComponentTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentTasksAPIServer).GetComponentTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ComponentTasksAPI/GetComponentTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentTasksAPIServer).GetComponentTasks(ctx, req.(*GetComponentTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentTasksAPI_ReRunComponentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReRunComponentTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentTasksAPIServer).ReRunComponentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/colbylwilliams.teamcloud.v1.ComponentTasksAPI/ReRunComponentTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentTasksAPIServer).ReRunComponentTask(ctx, req.(*ReRunComponentTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComponentTasksAPI_ServiceDesc is the grpc.ServiceDesc for ComponentTasksAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComponentTasksAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "colbylwilliams.teamcloud.v1.ComponentTasksAPI",
	HandlerType: (*ComponentTasksAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelComponentTask",
			Handler:    _ComponentTasksAPI_CancelComponentTask_Handler,
		},
		{
			MethodName: "CreateComponentTask",
			Handler:    _ComponentTasksAPI_CreateComponentTask_Handler,
		},
		{
			MethodName: "GetComponentTask",
			Handler:    _ComponentTasksAPI_GetComponentTask_Handler,
		},
		{
			MethodName: "GetComponentTasks",
			Handler:    _ComponentTasksAPI_GetComponentTasks_Handler,
		},
		{
			MethodName: "ReRunComponentTask",
			Handler:    _ComponentTasksAPI_ReRunComponentTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teamcloud/v1/component_tasks_service.proto",
}
