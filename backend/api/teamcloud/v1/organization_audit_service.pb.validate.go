// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: teamcloud/v1/organization_audit_service.proto

package teamcloudv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAuditCommandsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuditCommandsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuditCommandsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuditCommandsRequestMultiError, or nil if none found.
func (m *GetAuditCommandsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuditCommandsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return GetAuditCommandsRequestMultiError(errors)
	}

	return nil
}

// GetAuditCommandsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAuditCommandsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuditCommandsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuditCommandsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuditCommandsRequestMultiError) AllErrors() []error { return m }

// GetAuditCommandsRequestValidationError is the validation error returned by
// GetAuditCommandsRequest.Validate if the designated constraints aren't met.
type GetAuditCommandsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuditCommandsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuditCommandsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuditCommandsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuditCommandsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuditCommandsRequestValidationError) ErrorName() string {
	return "GetAuditCommandsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuditCommandsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuditCommandsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuditCommandsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuditCommandsRequestValidationError{}

// Validate checks the field values on GetAuditEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuditEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuditEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuditEntriesRequestMultiError, or nil if none found.
func (m *GetAuditEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuditEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for TimeRange

	if len(errors) > 0 {
		return GetAuditEntriesRequestMultiError(errors)
	}

	return nil
}

// GetAuditEntriesRequestMultiError is an error wrapping multiple validation
// errors returned by GetAuditEntriesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuditEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuditEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuditEntriesRequestMultiError) AllErrors() []error { return m }

// GetAuditEntriesRequestValidationError is the validation error returned by
// GetAuditEntriesRequest.Validate if the designated constraints aren't met.
type GetAuditEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuditEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuditEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuditEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuditEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuditEntriesRequestValidationError) ErrorName() string {
	return "GetAuditEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuditEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuditEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuditEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuditEntriesRequestValidationError{}

// Validate checks the field values on GetAuditEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuditEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuditEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuditEntryRequestMultiError, or nil if none found.
func (m *GetAuditEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuditEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommandId

	// no validation rules for OrganizationId

	// no validation rules for Expand

	if len(errors) > 0 {
		return GetAuditEntryRequestMultiError(errors)
	}

	return nil
}

// GetAuditEntryRequestMultiError is an error wrapping multiple validation
// errors returned by GetAuditEntryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuditEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuditEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuditEntryRequestMultiError) AllErrors() []error { return m }

// GetAuditEntryRequestValidationError is the validation error returned by
// GetAuditEntryRequest.Validate if the designated constraints aren't met.
type GetAuditEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuditEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuditEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuditEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuditEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuditEntryRequestValidationError) ErrorName() string {
	return "GetAuditEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuditEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuditEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuditEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuditEntryRequestValidationError{}
