// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: teamcloud/v1/project_identities_service.proto

package teamcloudv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProjectIdentityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectIdentityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectIdentityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectIdentityRequestMultiError, or nil if none found.
func (m *CreateProjectIdentityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectIdentityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if all {
		switch v := interface{}(m.GetProjectIdentityDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectIdentityRequestValidationError{
					field:  "ProjectIdentityDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectIdentityRequestValidationError{
					field:  "ProjectIdentityDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectIdentityDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectIdentityRequestValidationError{
				field:  "ProjectIdentityDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectIdentityRequestMultiError(errors)
	}

	return nil
}

// CreateProjectIdentityRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProjectIdentityRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProjectIdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectIdentityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectIdentityRequestMultiError) AllErrors() []error { return m }

// CreateProjectIdentityRequestValidationError is the validation error returned
// by CreateProjectIdentityRequest.Validate if the designated constraints
// aren't met.
type CreateProjectIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectIdentityRequestValidationError) ErrorName() string {
	return "CreateProjectIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectIdentityRequestValidationError{}

// Validate checks the field values on DeleteProjectIdentityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectIdentityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectIdentityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectIdentityRequestMultiError, or nil if none found.
func (m *DeleteProjectIdentityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectIdentityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectIdentityId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return DeleteProjectIdentityRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectIdentityRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectIdentityRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProjectIdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectIdentityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectIdentityRequestMultiError) AllErrors() []error { return m }

// DeleteProjectIdentityRequestValidationError is the validation error returned
// by DeleteProjectIdentityRequest.Validate if the designated constraints
// aren't met.
type DeleteProjectIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectIdentityRequestValidationError) ErrorName() string {
	return "DeleteProjectIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectIdentityRequestValidationError{}

// Validate checks the field values on GetProjectIdentitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectIdentitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectIdentitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectIdentitiesRequestMultiError, or nil if none found.
func (m *GetProjectIdentitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectIdentitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetProjectIdentitiesRequestMultiError(errors)
	}

	return nil
}

// GetProjectIdentitiesRequestMultiError is an error wrapping multiple
// validation errors returned by GetProjectIdentitiesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetProjectIdentitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectIdentitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectIdentitiesRequestMultiError) AllErrors() []error { return m }

// GetProjectIdentitiesRequestValidationError is the validation error returned
// by GetProjectIdentitiesRequest.Validate if the designated constraints
// aren't met.
type GetProjectIdentitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectIdentitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectIdentitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectIdentitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectIdentitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectIdentitiesRequestValidationError) ErrorName() string {
	return "GetProjectIdentitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectIdentitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectIdentitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectIdentitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectIdentitiesRequestValidationError{}

// Validate checks the field values on GetProjectIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectIdentityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectIdentityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectIdentityRequestMultiError, or nil if none found.
func (m *GetProjectIdentityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectIdentityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectIdentityId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetProjectIdentityRequestMultiError(errors)
	}

	return nil
}

// GetProjectIdentityRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectIdentityRequest.ValidateAll() if the
// designated constraints aren't met.
type GetProjectIdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectIdentityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectIdentityRequestMultiError) AllErrors() []error { return m }

// GetProjectIdentityRequestValidationError is the validation error returned by
// GetProjectIdentityRequest.Validate if the designated constraints aren't met.
type GetProjectIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectIdentityRequestValidationError) ErrorName() string {
	return "GetProjectIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectIdentityRequestValidationError{}

// Validate checks the field values on UpdateProjectIdentityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectIdentityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectIdentityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectIdentityRequestMultiError, or nil if none found.
func (m *UpdateProjectIdentityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectIdentityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectIdentityId

	// no validation rules for OrganizationId

	// no validation rules for ProjectId

	if all {
		switch v := interface{}(m.GetProjectIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectIdentityRequestValidationError{
					field:  "ProjectIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectIdentityRequestValidationError{
					field:  "ProjectIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectIdentityRequestValidationError{
				field:  "ProjectIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectIdentityRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectIdentityRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectIdentityRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProjectIdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectIdentityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectIdentityRequestMultiError) AllErrors() []error { return m }

// UpdateProjectIdentityRequestValidationError is the validation error returned
// by UpdateProjectIdentityRequest.Validate if the designated constraints
// aren't met.
type UpdateProjectIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectIdentityRequestValidationError) ErrorName() string {
	return "UpdateProjectIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectIdentityRequestValidationError{}
