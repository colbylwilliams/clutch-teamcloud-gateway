// Code generated by protobuf.js in compile-protos.sh. DO NOT EDIT.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const colbylwilliams = $root.colbylwilliams = (() => {

    /**
     * Namespace colbylwilliams.
     * @exports colbylwilliams
     * @namespace
     */
    const colbylwilliams = {};

    colbylwilliams.config = (function() {

        /**
         * Namespace config.
         * @memberof colbylwilliams
         * @namespace
         */
        const config = {};

        config.service = (function() {

            /**
             * Namespace service.
             * @memberof colbylwilliams.config
             * @namespace
             */
            const service = {};

            service.teamcloud = (function() {

                /**
                 * Namespace teamcloud.
                 * @memberof colbylwilliams.config.service
                 * @namespace
                 */
                const teamcloud = {};

                teamcloud.v1 = (function() {

                    /**
                     * Namespace v1.
                     * @memberof colbylwilliams.config.service.teamcloud
                     * @namespace
                     */
                    const v1 = {};

                    v1.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof colbylwilliams.config.service.teamcloud.v1
                         * @interface IConfig
                         * @property {string|null} [host] Config host
                         * @property {string|null} [tenantId] Config tenantId
                         * @property {string|null} [clientId] Config clientId
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof colbylwilliams.config.service.teamcloud.v1
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {colbylwilliams.config.service.teamcloud.v1.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Config host.
                         * @member {string} host
                         * @memberof colbylwilliams.config.service.teamcloud.v1.Config
                         * @instance
                         */
                        Config.prototype.host = "";

                        /**
                         * Config tenantId.
                         * @member {string} tenantId
                         * @memberof colbylwilliams.config.service.teamcloud.v1.Config
                         * @instance
                         */
                        Config.prototype.tenantId = "";

                        /**
                         * Config clientId.
                         * @member {string} clientId
                         * @memberof colbylwilliams.config.service.teamcloud.v1.Config
                         * @instance
                         */
                        Config.prototype.clientId = "";

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof colbylwilliams.config.service.teamcloud.v1.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.host != null && message.hasOwnProperty("host"))
                                if (!$util.isString(message.host))
                                    return "host: string expected";
                            if (message.tenantId != null && message.hasOwnProperty("tenantId"))
                                if (!$util.isString(message.tenantId))
                                    return "tenantId: string expected";
                            if (message.clientId != null && message.hasOwnProperty("clientId"))
                                if (!$util.isString(message.clientId))
                                    return "clientId: string expected";
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof colbylwilliams.config.service.teamcloud.v1.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {colbylwilliams.config.service.teamcloud.v1.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.colbylwilliams.config.service.teamcloud.v1.Config)
                                return object;
                            let message = new $root.colbylwilliams.config.service.teamcloud.v1.Config();
                            if (object.host != null)
                                message.host = String(object.host);
                            if (object.tenantId != null)
                                message.tenantId = String(object.tenantId);
                            if (object.clientId != null)
                                message.clientId = String(object.clientId);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof colbylwilliams.config.service.teamcloud.v1.Config
                         * @static
                         * @param {colbylwilliams.config.service.teamcloud.v1.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.host = "";
                                object.tenantId = "";
                                object.clientId = "";
                            }
                            if (message.host != null && message.hasOwnProperty("host"))
                                object.host = message.host;
                            if (message.tenantId != null && message.hasOwnProperty("tenantId"))
                                object.tenantId = message.tenantId;
                            if (message.clientId != null && message.hasOwnProperty("clientId"))
                                object.clientId = message.clientId;
                            return object;
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof colbylwilliams.config.service.teamcloud.v1.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return v1;
                })();

                return teamcloud;
            })();

            return service;
        })();

        return config;
    })();

    colbylwilliams.echo = (function() {

        /**
         * Namespace echo.
         * @memberof colbylwilliams
         * @namespace
         */
        const echo = {};

        echo.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof colbylwilliams.echo
             * @namespace
             */
            const v1 = {};

            v1.EchoAPI = (function() {

                /**
                 * Constructs a new EchoAPI service.
                 * @memberof colbylwilliams.echo.v1
                 * @classdesc Represents an EchoAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function EchoAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (EchoAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = EchoAPI;

                /**
                 * Callback as used by {@link colbylwilliams.echo.v1.EchoAPI#sayHello}.
                 * @memberof colbylwilliams.echo.v1.EchoAPI
                 * @typedef SayHelloCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.echo.v1.SayHelloResponse} [response] SayHelloResponse
                 */

                /**
                 * Calls SayHello.
                 * @function sayHello
                 * @memberof colbylwilliams.echo.v1.EchoAPI
                 * @instance
                 * @param {colbylwilliams.echo.v1.ISayHelloRequest} request SayHelloRequest message or plain object
                 * @param {colbylwilliams.echo.v1.EchoAPI.SayHelloCallback} callback Node-style callback called with the error, if any, and SayHelloResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(EchoAPI.prototype.sayHello = function sayHello(request, callback) {
                    return this.rpcCall(sayHello, $root.colbylwilliams.echo.v1.SayHelloRequest, $root.colbylwilliams.echo.v1.SayHelloResponse, request, callback);
                }, "name", { value: "SayHello" });

                /**
                 * Calls SayHello.
                 * @function sayHello
                 * @memberof colbylwilliams.echo.v1.EchoAPI
                 * @instance
                 * @param {colbylwilliams.echo.v1.ISayHelloRequest} request SayHelloRequest message or plain object
                 * @returns {Promise<colbylwilliams.echo.v1.SayHelloResponse>} Promise
                 * @variation 2
                 */

                return EchoAPI;
            })();

            v1.SayHelloRequest = (function() {

                /**
                 * Properties of a SayHelloRequest.
                 * @memberof colbylwilliams.echo.v1
                 * @interface ISayHelloRequest
                 * @property {string|null} [name] SayHelloRequest name
                 */

                /**
                 * Constructs a new SayHelloRequest.
                 * @memberof colbylwilliams.echo.v1
                 * @classdesc Represents a SayHelloRequest.
                 * @implements ISayHelloRequest
                 * @constructor
                 * @param {colbylwilliams.echo.v1.ISayHelloRequest=} [properties] Properties to set
                 */
                function SayHelloRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SayHelloRequest name.
                 * @member {string} name
                 * @memberof colbylwilliams.echo.v1.SayHelloRequest
                 * @instance
                 */
                SayHelloRequest.prototype.name = "";

                /**
                 * Verifies a SayHelloRequest message.
                 * @function verify
                 * @memberof colbylwilliams.echo.v1.SayHelloRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SayHelloRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };

                /**
                 * Creates a SayHelloRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.echo.v1.SayHelloRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.echo.v1.SayHelloRequest} SayHelloRequest
                 */
                SayHelloRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.echo.v1.SayHelloRequest)
                        return object;
                    let message = new $root.colbylwilliams.echo.v1.SayHelloRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };

                /**
                 * Creates a plain object from a SayHelloRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.echo.v1.SayHelloRequest
                 * @static
                 * @param {colbylwilliams.echo.v1.SayHelloRequest} message SayHelloRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SayHelloRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };

                /**
                 * Converts this SayHelloRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.echo.v1.SayHelloRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SayHelloRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return SayHelloRequest;
            })();

            v1.SayHelloResponse = (function() {

                /**
                 * Properties of a SayHelloResponse.
                 * @memberof colbylwilliams.echo.v1
                 * @interface ISayHelloResponse
                 * @property {string|null} [message] SayHelloResponse message
                 */

                /**
                 * Constructs a new SayHelloResponse.
                 * @memberof colbylwilliams.echo.v1
                 * @classdesc Represents a SayHelloResponse.
                 * @implements ISayHelloResponse
                 * @constructor
                 * @param {colbylwilliams.echo.v1.ISayHelloResponse=} [properties] Properties to set
                 */
                function SayHelloResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SayHelloResponse message.
                 * @member {string} message
                 * @memberof colbylwilliams.echo.v1.SayHelloResponse
                 * @instance
                 */
                SayHelloResponse.prototype.message = "";

                /**
                 * Verifies a SayHelloResponse message.
                 * @function verify
                 * @memberof colbylwilliams.echo.v1.SayHelloResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SayHelloResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    return null;
                };

                /**
                 * Creates a SayHelloResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.echo.v1.SayHelloResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.echo.v1.SayHelloResponse} SayHelloResponse
                 */
                SayHelloResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.echo.v1.SayHelloResponse)
                        return object;
                    let message = new $root.colbylwilliams.echo.v1.SayHelloResponse();
                    if (object.message != null)
                        message.message = String(object.message);
                    return message;
                };

                /**
                 * Creates a plain object from a SayHelloResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.echo.v1.SayHelloResponse
                 * @static
                 * @param {colbylwilliams.echo.v1.SayHelloResponse} message SayHelloResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SayHelloResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.message = "";
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    return object;
                };

                /**
                 * Converts this SayHelloResponse to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.echo.v1.SayHelloResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SayHelloResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return SayHelloResponse;
            })();

            return v1;
        })();

        return echo;
    })();

    colbylwilliams.teamcloud = (function() {

        /**
         * Namespace teamcloud.
         * @memberof colbylwilliams
         * @namespace
         */
        const teamcloud = {};

        teamcloud.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof colbylwilliams.teamcloud
             * @namespace
             */
            const v1 = {};

            v1.AdapterInformationListDataResult = (function() {

                /**
                 * Properties of an AdapterInformationListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IAdapterInformationListDataResult
                 * @property {number|null} [code] AdapterInformationListDataResult code
                 * @property {string|null} [status] AdapterInformationListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.IAdapterInformation>|null} [data] AdapterInformationListDataResult data
                 * @property {string|null} [location] AdapterInformationListDataResult location
                 */

                /**
                 * Constructs a new AdapterInformationListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an AdapterInformationListDataResult.
                 * @implements IAdapterInformationListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IAdapterInformationListDataResult=} [properties] Properties to set
                 */
                function AdapterInformationListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AdapterInformationListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformationListDataResult
                 * @instance
                 */
                AdapterInformationListDataResult.prototype.code = 0;

                /**
                 * AdapterInformationListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformationListDataResult
                 * @instance
                 */
                AdapterInformationListDataResult.prototype.status = null;

                /**
                 * AdapterInformationListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IAdapterInformation>} data
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformationListDataResult
                 * @instance
                 */
                AdapterInformationListDataResult.prototype.data = $util.emptyArray;

                /**
                 * AdapterInformationListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformationListDataResult
                 * @instance
                 */
                AdapterInformationListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * AdapterInformationListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformationListDataResult
                 * @instance
                 */
                Object.defineProperty(AdapterInformationListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * AdapterInformationListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformationListDataResult
                 * @instance
                 */
                Object.defineProperty(AdapterInformationListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies an AdapterInformationListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformationListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AdapterInformationListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.AdapterInformation.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates an AdapterInformationListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformationListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.AdapterInformationListDataResult} AdapterInformationListDataResult
                 */
                AdapterInformationListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.AdapterInformationListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.AdapterInformationListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.AdapterInformationListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.AdapterInformationListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.AdapterInformation.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from an AdapterInformationListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformationListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.AdapterInformationListDataResult} message AdapterInformationListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AdapterInformationListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.AdapterInformation.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this AdapterInformationListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformationListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AdapterInformationListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AdapterInformationListDataResult;
            })();

            v1.AdapterInformation = (function() {

                /**
                 * Properties of an AdapterInformation.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IAdapterInformation
                 * @property {colbylwilliams.teamcloud.v1.AdapterInformation.TypeEnum|null} [type] AdapterInformation type
                 * @property {string|null} [displayName] AdapterInformation displayName
                 * @property {string|null} [inputDataSchema] AdapterInformation inputDataSchema
                 * @property {string|null} [inputDataForm] AdapterInformation inputDataForm
                 */

                /**
                 * Constructs a new AdapterInformation.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an AdapterInformation.
                 * @implements IAdapterInformation
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IAdapterInformation=} [properties] Properties to set
                 */
                function AdapterInformation(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AdapterInformation type.
                 * @member {colbylwilliams.teamcloud.v1.AdapterInformation.TypeEnum} type
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformation
                 * @instance
                 */
                AdapterInformation.prototype.type = 0;

                /**
                 * AdapterInformation displayName.
                 * @member {string|null|undefined} displayName
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformation
                 * @instance
                 */
                AdapterInformation.prototype.displayName = null;

                /**
                 * AdapterInformation inputDataSchema.
                 * @member {string|null|undefined} inputDataSchema
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformation
                 * @instance
                 */
                AdapterInformation.prototype.inputDataSchema = null;

                /**
                 * AdapterInformation inputDataForm.
                 * @member {string|null|undefined} inputDataForm
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformation
                 * @instance
                 */
                AdapterInformation.prototype.inputDataForm = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * AdapterInformation _displayName.
                 * @member {"displayName"|undefined} _displayName
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformation
                 * @instance
                 */
                Object.defineProperty(AdapterInformation.prototype, "_displayName", {
                    get: $util.oneOfGetter($oneOfFields = ["displayName"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * AdapterInformation _inputDataSchema.
                 * @member {"inputDataSchema"|undefined} _inputDataSchema
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformation
                 * @instance
                 */
                Object.defineProperty(AdapterInformation.prototype, "_inputDataSchema", {
                    get: $util.oneOfGetter($oneOfFields = ["inputDataSchema"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * AdapterInformation _inputDataForm.
                 * @member {"inputDataForm"|undefined} _inputDataForm
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformation
                 * @instance
                 */
                Object.defineProperty(AdapterInformation.prototype, "_inputDataForm", {
                    get: $util.oneOfGetter($oneOfFields = ["inputDataForm"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies an AdapterInformation message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AdapterInformation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.displayName != null && message.hasOwnProperty("displayName")) {
                        properties._displayName = 1;
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    }
                    if (message.inputDataSchema != null && message.hasOwnProperty("inputDataSchema")) {
                        properties._inputDataSchema = 1;
                        if (!$util.isString(message.inputDataSchema))
                            return "inputDataSchema: string expected";
                    }
                    if (message.inputDataForm != null && message.hasOwnProperty("inputDataForm")) {
                        properties._inputDataForm = 1;
                        if (!$util.isString(message.inputDataForm))
                            return "inputDataForm: string expected";
                    }
                    return null;
                };

                /**
                 * Creates an AdapterInformation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.AdapterInformation} AdapterInformation
                 */
                AdapterInformation.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.AdapterInformation)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.AdapterInformation();
                    switch (object.type) {
                    case "AZURERESOURCEMANAGER":
                    case 0:
                        message.type = 0;
                        break;
                    case "AZUREDEVOPS":
                    case 1:
                        message.type = 1;
                        break;
                    case "GITHUB":
                    case 2:
                        message.type = 2;
                        break;
                    case "KUBERNETES":
                    case 3:
                        message.type = 3;
                        break;
                    }
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.inputDataSchema != null)
                        message.inputDataSchema = String(object.inputDataSchema);
                    if (object.inputDataForm != null)
                        message.inputDataForm = String(object.inputDataForm);
                    return message;
                };

                /**
                 * Creates a plain object from an AdapterInformation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformation
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.AdapterInformation} message AdapterInformation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AdapterInformation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.type = options.enums === String ? "AZURERESOURCEMANAGER" : 0;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.colbylwilliams.teamcloud.v1.AdapterInformation.TypeEnum[message.type] : message.type;
                    if (message.inputDataSchema != null && message.hasOwnProperty("inputDataSchema")) {
                        object.inputDataSchema = message.inputDataSchema;
                        if (options.oneofs)
                            object._inputDataSchema = "inputDataSchema";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName")) {
                        object.displayName = message.displayName;
                        if (options.oneofs)
                            object._displayName = "displayName";
                    }
                    if (message.inputDataForm != null && message.hasOwnProperty("inputDataForm")) {
                        object.inputDataForm = message.inputDataForm;
                        if (options.oneofs)
                            object._inputDataForm = "inputDataForm";
                    }
                    return object;
                };

                /**
                 * Converts this AdapterInformation to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.AdapterInformation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AdapterInformation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * TypeEnum enum.
                 * @name colbylwilliams.teamcloud.v1.AdapterInformation.TypeEnum
                 * @enum {number}
                 * @property {number} AZURERESOURCEMANAGER=0 AZURERESOURCEMANAGER value
                 * @property {number} AZUREDEVOPS=1 AZUREDEVOPS value
                 * @property {number} GITHUB=2 GITHUB value
                 * @property {number} KUBERNETES=3 KUBERNETES value
                 */
                AdapterInformation.TypeEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "AZURERESOURCEMANAGER"] = 0;
                    values[valuesById[1] = "AZUREDEVOPS"] = 1;
                    values[valuesById[2] = "GITHUB"] = 2;
                    values[valuesById[3] = "KUBERNETES"] = 3;
                    return values;
                })();

                return AdapterInformation;
            })();

            v1.AdapterAPI = (function() {

                /**
                 * Constructs a new AdapterAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an AdapterAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function AdapterAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (AdapterAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = AdapterAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.AdapterAPI#getAdapters}.
                 * @memberof colbylwilliams.teamcloud.v1.AdapterAPI
                 * @typedef GetAdaptersCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.AdapterInformationListDataResult} [response] AdapterInformationListDataResult
                 */

                /**
                 * Calls GetAdapters.
                 * @function getAdapters
                 * @memberof colbylwilliams.teamcloud.v1.AdapterAPI
                 * @instance
                 * @param {google.protobuf.IEmpty} request Empty message or plain object
                 * @param {colbylwilliams.teamcloud.v1.AdapterAPI.GetAdaptersCallback} callback Node-style callback called with the error, if any, and AdapterInformationListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(AdapterAPI.prototype.getAdapters = function getAdapters(request, callback) {
                    return this.rpcCall(getAdapters, $root.google.protobuf.Empty, $root.colbylwilliams.teamcloud.v1.AdapterInformationListDataResult, request, callback);
                }, "name", { value: "GetAdapters" });

                /**
                 * Calls GetAdapters.
                 * @function getAdapters
                 * @memberof colbylwilliams.teamcloud.v1.AdapterAPI
                 * @instance
                 * @param {google.protobuf.IEmpty} request Empty message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.AdapterInformationListDataResult>} Promise
                 * @variation 2
                 */

                return AdapterAPI;
            })();

            v1.ErrorResult = (function() {

                /**
                 * Properties of an ErrorResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IErrorResult
                 * @property {number|null} [code] ErrorResult code
                 * @property {string|null} [status] ErrorResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.IResultError>|null} [errors] ErrorResult errors
                 */

                /**
                 * Constructs a new ErrorResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an ErrorResult.
                 * @implements IErrorResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IErrorResult=} [properties] Properties to set
                 */
                function ErrorResult(properties) {
                    this.errors = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ErrorResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ErrorResult
                 * @instance
                 */
                ErrorResult.prototype.code = 0;

                /**
                 * ErrorResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ErrorResult
                 * @instance
                 */
                ErrorResult.prototype.status = null;

                /**
                 * ErrorResult errors.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IResultError>} errors
                 * @memberof colbylwilliams.teamcloud.v1.ErrorResult
                 * @instance
                 */
                ErrorResult.prototype.errors = $util.emptyArray;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ErrorResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ErrorResult
                 * @instance
                 */
                Object.defineProperty(ErrorResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies an ErrorResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ErrorResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ErrorResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.errors != null && message.hasOwnProperty("errors")) {
                        if (!Array.isArray(message.errors))
                            return "errors: array expected";
                        for (let i = 0; i < message.errors.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.ResultError.verify(message.errors[i]);
                            if (error)
                                return "errors." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an ErrorResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ErrorResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ErrorResult} ErrorResult
                 */
                ErrorResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ErrorResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ErrorResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.errors) {
                        if (!Array.isArray(object.errors))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ErrorResult.errors: array expected");
                        message.errors = [];
                        for (let i = 0; i < object.errors.length; ++i) {
                            if (typeof object.errors[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ErrorResult.errors: object expected");
                            message.errors[i] = $root.colbylwilliams.teamcloud.v1.ResultError.fromObject(object.errors[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ErrorResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ErrorResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ErrorResult} message ErrorResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ErrorResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.errors = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.errors && message.errors.length) {
                        object.errors = [];
                        for (let j = 0; j < message.errors.length; ++j)
                            object.errors[j] = $root.colbylwilliams.teamcloud.v1.ResultError.toObject(message.errors[j], options);
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ErrorResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ErrorResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ErrorResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ErrorResult;
            })();

            v1.ResultError = (function() {

                /**
                 * Properties of a ResultError.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IResultError
                 * @property {colbylwilliams.teamcloud.v1.ResultError.CodeEnum|null} [code] ResultError code
                 * @property {string|null} [message] ResultError message
                 * @property {Array.<colbylwilliams.teamcloud.v1.IValidationError>|null} [errors] ResultError errors
                 */

                /**
                 * Constructs a new ResultError.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ResultError.
                 * @implements IResultError
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IResultError=} [properties] Properties to set
                 */
                function ResultError(properties) {
                    this.errors = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ResultError code.
                 * @member {colbylwilliams.teamcloud.v1.ResultError.CodeEnum} code
                 * @memberof colbylwilliams.teamcloud.v1.ResultError
                 * @instance
                 */
                ResultError.prototype.code = 0;

                /**
                 * ResultError message.
                 * @member {string|null|undefined} message
                 * @memberof colbylwilliams.teamcloud.v1.ResultError
                 * @instance
                 */
                ResultError.prototype.message = null;

                /**
                 * ResultError errors.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IValidationError>} errors
                 * @memberof colbylwilliams.teamcloud.v1.ResultError
                 * @instance
                 */
                ResultError.prototype.errors = $util.emptyArray;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ResultError _message.
                 * @member {"message"|undefined} _message
                 * @memberof colbylwilliams.teamcloud.v1.ResultError
                 * @instance
                 */
                Object.defineProperty(ResultError.prototype, "_message", {
                    get: $util.oneOfGetter($oneOfFields = ["message"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ResultError message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ResultError
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResultError.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        switch (message.code) {
                        default:
                            return "code: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            break;
                        }
                    if (message.message != null && message.hasOwnProperty("message")) {
                        properties._message = 1;
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    }
                    if (message.errors != null && message.hasOwnProperty("errors")) {
                        if (!Array.isArray(message.errors))
                            return "errors: array expected";
                        for (let i = 0; i < message.errors.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.ValidationError.verify(message.errors[i]);
                            if (error)
                                return "errors." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ResultError message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ResultError
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ResultError} ResultError
                 */
                ResultError.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ResultError)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ResultError();
                    switch (object.code) {
                    case "UNKNOWN":
                    case 0:
                        message.code = 0;
                        break;
                    case "FAILED":
                    case 1:
                        message.code = 1;
                        break;
                    case "CONFLICT":
                    case 2:
                        message.code = 2;
                        break;
                    case "NOTFOUND":
                    case 3:
                        message.code = 3;
                        break;
                    case "SERVERERROR":
                    case 4:
                        message.code = 4;
                        break;
                    case "VALIDATIONERROR":
                    case 5:
                        message.code = 5;
                        break;
                    case "UNAUTHORIZED":
                    case 6:
                        message.code = 6;
                        break;
                    case "FORBIDDEN":
                    case 7:
                        message.code = 7;
                        break;
                    }
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.errors) {
                        if (!Array.isArray(object.errors))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ResultError.errors: array expected");
                        message.errors = [];
                        for (let i = 0; i < object.errors.length; ++i) {
                            if (typeof object.errors[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ResultError.errors: object expected");
                            message.errors[i] = $root.colbylwilliams.teamcloud.v1.ValidationError.fromObject(object.errors[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ResultError message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ResultError
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ResultError} message ResultError
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResultError.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.errors = [];
                    if (options.defaults)
                        object.code = options.enums === String ? "UNKNOWN" : 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = options.enums === String ? $root.colbylwilliams.teamcloud.v1.ResultError.CodeEnum[message.code] : message.code;
                    if (message.errors && message.errors.length) {
                        object.errors = [];
                        for (let j = 0; j < message.errors.length; ++j)
                            object.errors[j] = $root.colbylwilliams.teamcloud.v1.ValidationError.toObject(message.errors[j], options);
                    }
                    if (message.message != null && message.hasOwnProperty("message")) {
                        object.message = message.message;
                        if (options.oneofs)
                            object._message = "message";
                    }
                    return object;
                };

                /**
                 * Converts this ResultError to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ResultError
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResultError.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * CodeEnum enum.
                 * @name colbylwilliams.teamcloud.v1.ResultError.CodeEnum
                 * @enum {number}
                 * @property {number} UNKNOWN=0 UNKNOWN value
                 * @property {number} FAILED=1 FAILED value
                 * @property {number} CONFLICT=2 CONFLICT value
                 * @property {number} NOTFOUND=3 NOTFOUND value
                 * @property {number} SERVERERROR=4 SERVERERROR value
                 * @property {number} VALIDATIONERROR=5 VALIDATIONERROR value
                 * @property {number} UNAUTHORIZED=6 UNAUTHORIZED value
                 * @property {number} FORBIDDEN=7 FORBIDDEN value
                 */
                ResultError.CodeEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN"] = 0;
                    values[valuesById[1] = "FAILED"] = 1;
                    values[valuesById[2] = "CONFLICT"] = 2;
                    values[valuesById[3] = "NOTFOUND"] = 3;
                    values[valuesById[4] = "SERVERERROR"] = 4;
                    values[valuesById[5] = "VALIDATIONERROR"] = 5;
                    values[valuesById[6] = "UNAUTHORIZED"] = 6;
                    values[valuesById[7] = "FORBIDDEN"] = 7;
                    return values;
                })();

                return ResultError;
            })();

            v1.ValidationError = (function() {

                /**
                 * Properties of a ValidationError.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IValidationError
                 * @property {string|null} [field] ValidationError field
                 * @property {string|null} [message] ValidationError message
                 */

                /**
                 * Constructs a new ValidationError.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ValidationError.
                 * @implements IValidationError
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IValidationError=} [properties] Properties to set
                 */
                function ValidationError(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ValidationError field.
                 * @member {string|null|undefined} field
                 * @memberof colbylwilliams.teamcloud.v1.ValidationError
                 * @instance
                 */
                ValidationError.prototype.field = null;

                /**
                 * ValidationError message.
                 * @member {string|null|undefined} message
                 * @memberof colbylwilliams.teamcloud.v1.ValidationError
                 * @instance
                 */
                ValidationError.prototype.message = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ValidationError _field.
                 * @member {"field"|undefined} _field
                 * @memberof colbylwilliams.teamcloud.v1.ValidationError
                 * @instance
                 */
                Object.defineProperty(ValidationError.prototype, "_field", {
                    get: $util.oneOfGetter($oneOfFields = ["field"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ValidationError _message.
                 * @member {"message"|undefined} _message
                 * @memberof colbylwilliams.teamcloud.v1.ValidationError
                 * @instance
                 */
                Object.defineProperty(ValidationError.prototype, "_message", {
                    get: $util.oneOfGetter($oneOfFields = ["message"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ValidationError message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ValidationError
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValidationError.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.field != null && message.hasOwnProperty("field")) {
                        properties._field = 1;
                        if (!$util.isString(message.field))
                            return "field: string expected";
                    }
                    if (message.message != null && message.hasOwnProperty("message")) {
                        properties._message = 1;
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ValidationError message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ValidationError
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ValidationError} ValidationError
                 */
                ValidationError.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ValidationError)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ValidationError();
                    if (object.field != null)
                        message.field = String(object.field);
                    if (object.message != null)
                        message.message = String(object.message);
                    return message;
                };

                /**
                 * Creates a plain object from a ValidationError message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ValidationError
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ValidationError} message ValidationError
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValidationError.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (message.field != null && message.hasOwnProperty("field")) {
                        object.field = message.field;
                        if (options.oneofs)
                            object._field = "field";
                    }
                    if (message.message != null && message.hasOwnProperty("message")) {
                        object.message = message.message;
                        if (options.oneofs)
                            object._message = "message";
                    }
                    return object;
                };

                /**
                 * Converts this ValidationError to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ValidationError
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValidationError.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ValidationError;
            })();

            v1.AlternateIdentity = (function() {

                /**
                 * Properties of an AlternateIdentity.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IAlternateIdentity
                 * @property {string|null} [login] AlternateIdentity login
                 */

                /**
                 * Constructs a new AlternateIdentity.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an AlternateIdentity.
                 * @implements IAlternateIdentity
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IAlternateIdentity=} [properties] Properties to set
                 */
                function AlternateIdentity(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AlternateIdentity login.
                 * @member {string|null|undefined} login
                 * @memberof colbylwilliams.teamcloud.v1.AlternateIdentity
                 * @instance
                 */
                AlternateIdentity.prototype.login = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * AlternateIdentity _login.
                 * @member {"login"|undefined} _login
                 * @memberof colbylwilliams.teamcloud.v1.AlternateIdentity
                 * @instance
                 */
                Object.defineProperty(AlternateIdentity.prototype, "_login", {
                    get: $util.oneOfGetter($oneOfFields = ["login"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies an AlternateIdentity message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.AlternateIdentity
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AlternateIdentity.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.login != null && message.hasOwnProperty("login")) {
                        properties._login = 1;
                        if (!$util.isString(message.login))
                            return "login: string expected";
                    }
                    return null;
                };

                /**
                 * Creates an AlternateIdentity message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.AlternateIdentity
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.AlternateIdentity} AlternateIdentity
                 */
                AlternateIdentity.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.AlternateIdentity)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.AlternateIdentity();
                    if (object.login != null)
                        message.login = String(object.login);
                    return message;
                };

                /**
                 * Creates a plain object from an AlternateIdentity message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.AlternateIdentity
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.AlternateIdentity} message AlternateIdentity
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AlternateIdentity.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (message.login != null && message.hasOwnProperty("login")) {
                        object.login = message.login;
                        if (options.oneofs)
                            object._login = "login";
                    }
                    return object;
                };

                /**
                 * Converts this AlternateIdentity to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.AlternateIdentity
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AlternateIdentity.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AlternateIdentity;
            })();

            v1.CommandAuditEntityDataResult = (function() {

                /**
                 * Properties of a CommandAuditEntityDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICommandAuditEntityDataResult
                 * @property {number|null} [code] CommandAuditEntityDataResult code
                 * @property {string|null} [status] CommandAuditEntityDataResult status
                 * @property {colbylwilliams.teamcloud.v1.ICommandAuditEntity|null} [data] CommandAuditEntityDataResult data
                 * @property {string|null} [location] CommandAuditEntityDataResult location
                 */

                /**
                 * Constructs a new CommandAuditEntityDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CommandAuditEntityDataResult.
                 * @implements ICommandAuditEntityDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICommandAuditEntityDataResult=} [properties] Properties to set
                 */
                function CommandAuditEntityDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CommandAuditEntityDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult
                 * @instance
                 */
                CommandAuditEntityDataResult.prototype.code = 0;

                /**
                 * CommandAuditEntityDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult
                 * @instance
                 */
                CommandAuditEntityDataResult.prototype.status = null;

                /**
                 * CommandAuditEntityDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.ICommandAuditEntity|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult
                 * @instance
                 */
                CommandAuditEntityDataResult.prototype.data = null;

                /**
                 * CommandAuditEntityDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult
                 * @instance
                 */
                CommandAuditEntityDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * CommandAuditEntityDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntityDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntityDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntityDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a CommandAuditEntityDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommandAuditEntityDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.CommandAuditEntity.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a CommandAuditEntityDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult} CommandAuditEntityDataResult
                 */
                CommandAuditEntityDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.CommandAuditEntity.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a CommandAuditEntityDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult} message CommandAuditEntityDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommandAuditEntityDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.CommandAuditEntity.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this CommandAuditEntityDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommandAuditEntityDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CommandAuditEntityDataResult;
            })();

            v1.CommandAuditEntity = (function() {

                /**
                 * Properties of a CommandAuditEntity.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICommandAuditEntity
                 * @property {string|null} [partitionKey] CommandAuditEntity partitionKey
                 * @property {string|null} [rowKey] CommandAuditEntity rowKey
                 * @property {string|null} [timestamp] CommandAuditEntity timestamp
                 * @property {string|null} [eTag] CommandAuditEntity eTag
                 * @property {string|null} [commandId] CommandAuditEntity commandId
                 * @property {string|null} [organizationId] CommandAuditEntity organizationId
                 * @property {string|null} [commandJson] CommandAuditEntity commandJson
                 * @property {string|null} [resultJson] CommandAuditEntity resultJson
                 * @property {string|null} [projectId] CommandAuditEntity projectId
                 * @property {string|null} [userId] CommandAuditEntity userId
                 * @property {string|null} [parentId] CommandAuditEntity parentId
                 * @property {string|null} [command] CommandAuditEntity command
                 * @property {string|null} [componentTask] CommandAuditEntity componentTask
                 * @property {colbylwilliams.teamcloud.v1.CommandAuditEntity.RuntimeStatusEnum|null} [runtimeStatus] CommandAuditEntity runtimeStatus
                 * @property {string|null} [customStatus] CommandAuditEntity customStatus
                 * @property {string|null} [errors] CommandAuditEntity errors
                 * @property {string|null} [created] CommandAuditEntity created
                 * @property {string|null} [updated] CommandAuditEntity updated
                 */

                /**
                 * Constructs a new CommandAuditEntity.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CommandAuditEntity.
                 * @implements ICommandAuditEntity
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICommandAuditEntity=} [properties] Properties to set
                 */
                function CommandAuditEntity(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CommandAuditEntity partitionKey.
                 * @member {string|null|undefined} partitionKey
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.partitionKey = null;

                /**
                 * CommandAuditEntity rowKey.
                 * @member {string|null|undefined} rowKey
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.rowKey = null;

                /**
                 * CommandAuditEntity timestamp.
                 * @member {string|null|undefined} timestamp
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.timestamp = null;

                /**
                 * CommandAuditEntity eTag.
                 * @member {string|null|undefined} eTag
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.eTag = null;

                /**
                 * CommandAuditEntity commandId.
                 * @member {string|null|undefined} commandId
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.commandId = null;

                /**
                 * CommandAuditEntity organizationId.
                 * @member {string|null|undefined} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.organizationId = null;

                /**
                 * CommandAuditEntity commandJson.
                 * @member {string|null|undefined} commandJson
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.commandJson = null;

                /**
                 * CommandAuditEntity resultJson.
                 * @member {string|null|undefined} resultJson
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.resultJson = null;

                /**
                 * CommandAuditEntity projectId.
                 * @member {string|null|undefined} projectId
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.projectId = null;

                /**
                 * CommandAuditEntity userId.
                 * @member {string|null|undefined} userId
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.userId = null;

                /**
                 * CommandAuditEntity parentId.
                 * @member {string|null|undefined} parentId
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.parentId = null;

                /**
                 * CommandAuditEntity command.
                 * @member {string|null|undefined} command
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.command = null;

                /**
                 * CommandAuditEntity componentTask.
                 * @member {string|null|undefined} componentTask
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.componentTask = null;

                /**
                 * CommandAuditEntity runtimeStatus.
                 * @member {colbylwilliams.teamcloud.v1.CommandAuditEntity.RuntimeStatusEnum} runtimeStatus
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.runtimeStatus = 0;

                /**
                 * CommandAuditEntity customStatus.
                 * @member {string|null|undefined} customStatus
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.customStatus = null;

                /**
                 * CommandAuditEntity errors.
                 * @member {string|null|undefined} errors
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.errors = null;

                /**
                 * CommandAuditEntity created.
                 * @member {string|null|undefined} created
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.created = null;

                /**
                 * CommandAuditEntity updated.
                 * @member {string|null|undefined} updated
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                CommandAuditEntity.prototype.updated = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * CommandAuditEntity _partitionKey.
                 * @member {"partitionKey"|undefined} _partitionKey
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_partitionKey", {
                    get: $util.oneOfGetter($oneOfFields = ["partitionKey"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _rowKey.
                 * @member {"rowKey"|undefined} _rowKey
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_rowKey", {
                    get: $util.oneOfGetter($oneOfFields = ["rowKey"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _timestamp.
                 * @member {"timestamp"|undefined} _timestamp
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_timestamp", {
                    get: $util.oneOfGetter($oneOfFields = ["timestamp"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _eTag.
                 * @member {"eTag"|undefined} _eTag
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_eTag", {
                    get: $util.oneOfGetter($oneOfFields = ["eTag"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _commandId.
                 * @member {"commandId"|undefined} _commandId
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_commandId", {
                    get: $util.oneOfGetter($oneOfFields = ["commandId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _organizationId.
                 * @member {"organizationId"|undefined} _organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_organizationId", {
                    get: $util.oneOfGetter($oneOfFields = ["organizationId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _commandJson.
                 * @member {"commandJson"|undefined} _commandJson
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_commandJson", {
                    get: $util.oneOfGetter($oneOfFields = ["commandJson"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _resultJson.
                 * @member {"resultJson"|undefined} _resultJson
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_resultJson", {
                    get: $util.oneOfGetter($oneOfFields = ["resultJson"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _projectId.
                 * @member {"projectId"|undefined} _projectId
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_projectId", {
                    get: $util.oneOfGetter($oneOfFields = ["projectId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _userId.
                 * @member {"userId"|undefined} _userId
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_userId", {
                    get: $util.oneOfGetter($oneOfFields = ["userId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _parentId.
                 * @member {"parentId"|undefined} _parentId
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_parentId", {
                    get: $util.oneOfGetter($oneOfFields = ["parentId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _command.
                 * @member {"command"|undefined} _command
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_command", {
                    get: $util.oneOfGetter($oneOfFields = ["command"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _componentTask.
                 * @member {"componentTask"|undefined} _componentTask
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_componentTask", {
                    get: $util.oneOfGetter($oneOfFields = ["componentTask"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _customStatus.
                 * @member {"customStatus"|undefined} _customStatus
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_customStatus", {
                    get: $util.oneOfGetter($oneOfFields = ["customStatus"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _errors.
                 * @member {"errors"|undefined} _errors
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_errors", {
                    get: $util.oneOfGetter($oneOfFields = ["errors"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _created.
                 * @member {"created"|undefined} _created
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_created", {
                    get: $util.oneOfGetter($oneOfFields = ["created"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntity _updated.
                 * @member {"updated"|undefined} _updated
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntity.prototype, "_updated", {
                    get: $util.oneOfGetter($oneOfFields = ["updated"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a CommandAuditEntity message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommandAuditEntity.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.partitionKey != null && message.hasOwnProperty("partitionKey")) {
                        properties._partitionKey = 1;
                        if (!$util.isString(message.partitionKey))
                            return "partitionKey: string expected";
                    }
                    if (message.rowKey != null && message.hasOwnProperty("rowKey")) {
                        properties._rowKey = 1;
                        if (!$util.isString(message.rowKey))
                            return "rowKey: string expected";
                    }
                    if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                        properties._timestamp = 1;
                        if (!$util.isString(message.timestamp))
                            return "timestamp: string expected";
                    }
                    if (message.eTag != null && message.hasOwnProperty("eTag")) {
                        properties._eTag = 1;
                        if (!$util.isString(message.eTag))
                            return "eTag: string expected";
                    }
                    if (message.commandId != null && message.hasOwnProperty("commandId")) {
                        properties._commandId = 1;
                        if (!$util.isString(message.commandId))
                            return "commandId: string expected";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId")) {
                        properties._organizationId = 1;
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    }
                    if (message.commandJson != null && message.hasOwnProperty("commandJson")) {
                        properties._commandJson = 1;
                        if (!$util.isString(message.commandJson))
                            return "commandJson: string expected";
                    }
                    if (message.resultJson != null && message.hasOwnProperty("resultJson")) {
                        properties._resultJson = 1;
                        if (!$util.isString(message.resultJson))
                            return "resultJson: string expected";
                    }
                    if (message.projectId != null && message.hasOwnProperty("projectId")) {
                        properties._projectId = 1;
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    }
                    if (message.userId != null && message.hasOwnProperty("userId")) {
                        properties._userId = 1;
                        if (!$util.isString(message.userId))
                            return "userId: string expected";
                    }
                    if (message.parentId != null && message.hasOwnProperty("parentId")) {
                        properties._parentId = 1;
                        if (!$util.isString(message.parentId))
                            return "parentId: string expected";
                    }
                    if (message.command != null && message.hasOwnProperty("command")) {
                        properties._command = 1;
                        if (!$util.isString(message.command))
                            return "command: string expected";
                    }
                    if (message.componentTask != null && message.hasOwnProperty("componentTask")) {
                        properties._componentTask = 1;
                        if (!$util.isString(message.componentTask))
                            return "componentTask: string expected";
                    }
                    if (message.runtimeStatus != null && message.hasOwnProperty("runtimeStatus"))
                        switch (message.runtimeStatus) {
                        default:
                            return "runtimeStatus: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            break;
                        }
                    if (message.customStatus != null && message.hasOwnProperty("customStatus")) {
                        properties._customStatus = 1;
                        if (!$util.isString(message.customStatus))
                            return "customStatus: string expected";
                    }
                    if (message.errors != null && message.hasOwnProperty("errors")) {
                        properties._errors = 1;
                        if (!$util.isString(message.errors))
                            return "errors: string expected";
                    }
                    if (message.created != null && message.hasOwnProperty("created")) {
                        properties._created = 1;
                        if (!$util.isString(message.created))
                            return "created: string expected";
                    }
                    if (message.updated != null && message.hasOwnProperty("updated")) {
                        properties._updated = 1;
                        if (!$util.isString(message.updated))
                            return "updated: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a CommandAuditEntity message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CommandAuditEntity} CommandAuditEntity
                 */
                CommandAuditEntity.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CommandAuditEntity)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CommandAuditEntity();
                    if (object.partitionKey != null)
                        message.partitionKey = String(object.partitionKey);
                    if (object.rowKey != null)
                        message.rowKey = String(object.rowKey);
                    if (object.timestamp != null)
                        message.timestamp = String(object.timestamp);
                    if (object.eTag != null)
                        message.eTag = String(object.eTag);
                    if (object.commandId != null)
                        message.commandId = String(object.commandId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.commandJson != null)
                        message.commandJson = String(object.commandJson);
                    if (object.resultJson != null)
                        message.resultJson = String(object.resultJson);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.userId != null)
                        message.userId = String(object.userId);
                    if (object.parentId != null)
                        message.parentId = String(object.parentId);
                    if (object.command != null)
                        message.command = String(object.command);
                    if (object.componentTask != null)
                        message.componentTask = String(object.componentTask);
                    switch (object.runtimeStatus) {
                    case "RUNNING":
                    case 0:
                        message.runtimeStatus = 0;
                        break;
                    case "COMPLETED":
                    case 1:
                        message.runtimeStatus = 1;
                        break;
                    case "CONTINUEDASNEW":
                    case 2:
                        message.runtimeStatus = 2;
                        break;
                    case "FAILED":
                    case 3:
                        message.runtimeStatus = 3;
                        break;
                    case "CANCELED":
                    case 4:
                        message.runtimeStatus = 4;
                        break;
                    case "TERMINATED":
                    case 5:
                        message.runtimeStatus = 5;
                        break;
                    case "PENDING":
                    case 6:
                        message.runtimeStatus = 6;
                        break;
                    case "UNKNOWN":
                    case 7:
                        message.runtimeStatus = 7;
                        break;
                    }
                    if (object.customStatus != null)
                        message.customStatus = String(object.customStatus);
                    if (object.errors != null)
                        message.errors = String(object.errors);
                    if (object.created != null)
                        message.created = String(object.created);
                    if (object.updated != null)
                        message.updated = String(object.updated);
                    return message;
                };

                /**
                 * Creates a plain object from a CommandAuditEntity message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CommandAuditEntity} message CommandAuditEntity
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommandAuditEntity.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.runtimeStatus = options.enums === String ? "RUNNING" : 0;
                    if (message.eTag != null && message.hasOwnProperty("eTag")) {
                        object.eTag = message.eTag;
                        if (options.oneofs)
                            object._eTag = "eTag";
                    }
                    if (message.resultJson != null && message.hasOwnProperty("resultJson")) {
                        object.resultJson = message.resultJson;
                        if (options.oneofs)
                            object._resultJson = "resultJson";
                    }
                    if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                        object.timestamp = message.timestamp;
                        if (options.oneofs)
                            object._timestamp = "timestamp";
                    }
                    if (message.componentTask != null && message.hasOwnProperty("componentTask")) {
                        object.componentTask = message.componentTask;
                        if (options.oneofs)
                            object._componentTask = "componentTask";
                    }
                    if (message.parentId != null && message.hasOwnProperty("parentId")) {
                        object.parentId = message.parentId;
                        if (options.oneofs)
                            object._parentId = "parentId";
                    }
                    if (message.errors != null && message.hasOwnProperty("errors")) {
                        object.errors = message.errors;
                        if (options.oneofs)
                            object._errors = "errors";
                    }
                    if (message.partitionKey != null && message.hasOwnProperty("partitionKey")) {
                        object.partitionKey = message.partitionKey;
                        if (options.oneofs)
                            object._partitionKey = "partitionKey";
                    }
                    if (message.updated != null && message.hasOwnProperty("updated")) {
                        object.updated = message.updated;
                        if (options.oneofs)
                            object._updated = "updated";
                    }
                    if (message.userId != null && message.hasOwnProperty("userId")) {
                        object.userId = message.userId;
                        if (options.oneofs)
                            object._userId = "userId";
                    }
                    if (message.projectId != null && message.hasOwnProperty("projectId")) {
                        object.projectId = message.projectId;
                        if (options.oneofs)
                            object._projectId = "projectId";
                    }
                    if (message.customStatus != null && message.hasOwnProperty("customStatus")) {
                        object.customStatus = message.customStatus;
                        if (options.oneofs)
                            object._customStatus = "customStatus";
                    }
                    if (message.commandJson != null && message.hasOwnProperty("commandJson")) {
                        object.commandJson = message.commandJson;
                        if (options.oneofs)
                            object._commandJson = "commandJson";
                    }
                    if (message.rowKey != null && message.hasOwnProperty("rowKey")) {
                        object.rowKey = message.rowKey;
                        if (options.oneofs)
                            object._rowKey = "rowKey";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId")) {
                        object.organizationId = message.organizationId;
                        if (options.oneofs)
                            object._organizationId = "organizationId";
                    }
                    if (message.command != null && message.hasOwnProperty("command")) {
                        object.command = message.command;
                        if (options.oneofs)
                            object._command = "command";
                    }
                    if (message.commandId != null && message.hasOwnProperty("commandId")) {
                        object.commandId = message.commandId;
                        if (options.oneofs)
                            object._commandId = "commandId";
                    }
                    if (message.runtimeStatus != null && message.hasOwnProperty("runtimeStatus"))
                        object.runtimeStatus = options.enums === String ? $root.colbylwilliams.teamcloud.v1.CommandAuditEntity.RuntimeStatusEnum[message.runtimeStatus] : message.runtimeStatus;
                    if (message.created != null && message.hasOwnProperty("created")) {
                        object.created = message.created;
                        if (options.oneofs)
                            object._created = "created";
                    }
                    return object;
                };

                /**
                 * Converts this CommandAuditEntity to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntity
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommandAuditEntity.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * RuntimeStatusEnum enum.
                 * @name colbylwilliams.teamcloud.v1.CommandAuditEntity.RuntimeStatusEnum
                 * @enum {number}
                 * @property {number} RUNNING=0 RUNNING value
                 * @property {number} COMPLETED=1 COMPLETED value
                 * @property {number} CONTINUEDASNEW=2 CONTINUEDASNEW value
                 * @property {number} FAILED=3 FAILED value
                 * @property {number} CANCELED=4 CANCELED value
                 * @property {number} TERMINATED=5 TERMINATED value
                 * @property {number} PENDING=6 PENDING value
                 * @property {number} UNKNOWN=7 UNKNOWN value
                 */
                CommandAuditEntity.RuntimeStatusEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "RUNNING"] = 0;
                    values[valuesById[1] = "COMPLETED"] = 1;
                    values[valuesById[2] = "CONTINUEDASNEW"] = 2;
                    values[valuesById[3] = "FAILED"] = 3;
                    values[valuesById[4] = "CANCELED"] = 4;
                    values[valuesById[5] = "TERMINATED"] = 5;
                    values[valuesById[6] = "PENDING"] = 6;
                    values[valuesById[7] = "UNKNOWN"] = 7;
                    return values;
                })();

                return CommandAuditEntity;
            })();

            v1.CommandAuditEntityListDataResult = (function() {

                /**
                 * Properties of a CommandAuditEntityListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICommandAuditEntityListDataResult
                 * @property {number|null} [code] CommandAuditEntityListDataResult code
                 * @property {string|null} [status] CommandAuditEntityListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.ICommandAuditEntity>|null} [data] CommandAuditEntityListDataResult data
                 * @property {string|null} [location] CommandAuditEntityListDataResult location
                 */

                /**
                 * Constructs a new CommandAuditEntityListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CommandAuditEntityListDataResult.
                 * @implements ICommandAuditEntityListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICommandAuditEntityListDataResult=} [properties] Properties to set
                 */
                function CommandAuditEntityListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CommandAuditEntityListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult
                 * @instance
                 */
                CommandAuditEntityListDataResult.prototype.code = 0;

                /**
                 * CommandAuditEntityListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult
                 * @instance
                 */
                CommandAuditEntityListDataResult.prototype.status = null;

                /**
                 * CommandAuditEntityListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.ICommandAuditEntity>} data
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult
                 * @instance
                 */
                CommandAuditEntityListDataResult.prototype.data = $util.emptyArray;

                /**
                 * CommandAuditEntityListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult
                 * @instance
                 */
                CommandAuditEntityListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * CommandAuditEntityListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntityListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * CommandAuditEntityListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult
                 * @instance
                 */
                Object.defineProperty(CommandAuditEntityListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a CommandAuditEntityListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommandAuditEntityListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.CommandAuditEntity.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a CommandAuditEntityListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult} CommandAuditEntityListDataResult
                 */
                CommandAuditEntityListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.CommandAuditEntity.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a CommandAuditEntityListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult} message CommandAuditEntityListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommandAuditEntityListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.CommandAuditEntity.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this CommandAuditEntityListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommandAuditEntityListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CommandAuditEntityListDataResult;
            })();

            v1.ComponentDataResult = (function() {

                /**
                 * Properties of a ComponentDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentDataResult
                 * @property {number|null} [code] ComponentDataResult code
                 * @property {string|null} [status] ComponentDataResult status
                 * @property {colbylwilliams.teamcloud.v1.IComponent|null} [data] ComponentDataResult data
                 * @property {string|null} [location] ComponentDataResult location
                 */

                /**
                 * Constructs a new ComponentDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentDataResult.
                 * @implements IComponentDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentDataResult=} [properties] Properties to set
                 */
                function ComponentDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDataResult
                 * @instance
                 */
                ComponentDataResult.prototype.code = 0;

                /**
                 * ComponentDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDataResult
                 * @instance
                 */
                ComponentDataResult.prototype.status = null;

                /**
                 * ComponentDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.IComponent|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDataResult
                 * @instance
                 */
                ComponentDataResult.prototype.data = null;

                /**
                 * ComponentDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDataResult
                 * @instance
                 */
                ComponentDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.Component.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentDataResult} ComponentDataResult
                 */
                ComponentDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.Component.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentDataResult} message ComponentDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.Component.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ComponentDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ComponentDataResult;
            })();

            v1.Component = (function() {

                /**
                 * Properties of a Component.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponent
                 * @property {string|null} [href] Component href
                 * @property {string|null} [organization] Component organization
                 * @property {string|null} [organizationName] Component organizationName
                 * @property {string|null} [templateId] Component templateId
                 * @property {string|null} [projectId] Component projectId
                 * @property {string|null} [projectName] Component projectName
                 * @property {string|null} [creator] Component creator
                 * @property {string|null} [displayName] Component displayName
                 * @property {string|null} [description] Component description
                 * @property {string|null} [inputJson] Component inputJson
                 * @property {string|null} [valueJson] Component valueJson
                 * @property {colbylwilliams.teamcloud.v1.Component.TypeEnum|null} [type] Component type
                 * @property {string|null} [resourceId] Component resourceId
                 * @property {string|null} [resourceUrl] Component resourceUrl
                 * @property {colbylwilliams.teamcloud.v1.Component.ResourceStateEnum|null} [resourceState] Component resourceState
                 * @property {string|null} [deploymentScopeId] Component deploymentScopeId
                 * @property {string|null} [deploymentScopeName] Component deploymentScopeName
                 * @property {string|null} [identityId] Component identityId
                 * @property {string|null} [deleted] Component deleted
                 * @property {number|null} [ttl] Component ttl
                 * @property {string|null} [slug] Component slug
                 * @property {string|null} [id] Component id
                 */

                /**
                 * Constructs a new Component.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a Component.
                 * @implements IComponent
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponent=} [properties] Properties to set
                 */
                function Component(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Component href.
                 * @member {string|null|undefined} href
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.href = null;

                /**
                 * Component organization.
                 * @member {string} organization
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.organization = "";

                /**
                 * Component organizationName.
                 * @member {string} organizationName
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.organizationName = "";

                /**
                 * Component templateId.
                 * @member {string} templateId
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.templateId = "";

                /**
                 * Component projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.projectId = "";

                /**
                 * Component projectName.
                 * @member {string} projectName
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.projectName = "";

                /**
                 * Component creator.
                 * @member {string} creator
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.creator = "";

                /**
                 * Component displayName.
                 * @member {string|null|undefined} displayName
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.displayName = null;

                /**
                 * Component description.
                 * @member {string|null|undefined} description
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.description = null;

                /**
                 * Component inputJson.
                 * @member {string|null|undefined} inputJson
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.inputJson = null;

                /**
                 * Component valueJson.
                 * @member {string|null|undefined} valueJson
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.valueJson = null;

                /**
                 * Component type.
                 * @member {colbylwilliams.teamcloud.v1.Component.TypeEnum} type
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.type = 0;

                /**
                 * Component resourceId.
                 * @member {string|null|undefined} resourceId
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.resourceId = null;

                /**
                 * Component resourceUrl.
                 * @member {string|null|undefined} resourceUrl
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.resourceUrl = null;

                /**
                 * Component resourceState.
                 * @member {colbylwilliams.teamcloud.v1.Component.ResourceStateEnum} resourceState
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.resourceState = 0;

                /**
                 * Component deploymentScopeId.
                 * @member {string|null|undefined} deploymentScopeId
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.deploymentScopeId = null;

                /**
                 * Component deploymentScopeName.
                 * @member {string|null|undefined} deploymentScopeName
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.deploymentScopeName = null;

                /**
                 * Component identityId.
                 * @member {string|null|undefined} identityId
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.identityId = null;

                /**
                 * Component deleted.
                 * @member {string|null|undefined} deleted
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.deleted = null;

                /**
                 * Component ttl.
                 * @member {number|null|undefined} ttl
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.ttl = null;

                /**
                 * Component slug.
                 * @member {string} slug
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.slug = "";

                /**
                 * Component id.
                 * @member {string} id
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Component.prototype.id = "";

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * Component _href.
                 * @member {"href"|undefined} _href
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_href", {
                    get: $util.oneOfGetter($oneOfFields = ["href"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Component _displayName.
                 * @member {"displayName"|undefined} _displayName
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_displayName", {
                    get: $util.oneOfGetter($oneOfFields = ["displayName"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Component _description.
                 * @member {"description"|undefined} _description
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_description", {
                    get: $util.oneOfGetter($oneOfFields = ["description"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Component _inputJson.
                 * @member {"inputJson"|undefined} _inputJson
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_inputJson", {
                    get: $util.oneOfGetter($oneOfFields = ["inputJson"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Component _valueJson.
                 * @member {"valueJson"|undefined} _valueJson
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_valueJson", {
                    get: $util.oneOfGetter($oneOfFields = ["valueJson"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Component _resourceId.
                 * @member {"resourceId"|undefined} _resourceId
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_resourceId", {
                    get: $util.oneOfGetter($oneOfFields = ["resourceId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Component _resourceUrl.
                 * @member {"resourceUrl"|undefined} _resourceUrl
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_resourceUrl", {
                    get: $util.oneOfGetter($oneOfFields = ["resourceUrl"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Component _deploymentScopeId.
                 * @member {"deploymentScopeId"|undefined} _deploymentScopeId
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_deploymentScopeId", {
                    get: $util.oneOfGetter($oneOfFields = ["deploymentScopeId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Component _deploymentScopeName.
                 * @member {"deploymentScopeName"|undefined} _deploymentScopeName
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_deploymentScopeName", {
                    get: $util.oneOfGetter($oneOfFields = ["deploymentScopeName"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Component _identityId.
                 * @member {"identityId"|undefined} _identityId
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_identityId", {
                    get: $util.oneOfGetter($oneOfFields = ["identityId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Component _deleted.
                 * @member {"deleted"|undefined} _deleted
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_deleted", {
                    get: $util.oneOfGetter($oneOfFields = ["deleted"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Component _ttl.
                 * @member {"ttl"|undefined} _ttl
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 */
                Object.defineProperty(Component.prototype, "_ttl", {
                    get: $util.oneOfGetter($oneOfFields = ["ttl"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a Component message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Component.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.href != null && message.hasOwnProperty("href")) {
                        properties._href = 1;
                        if (!$util.isString(message.href))
                            return "href: string expected";
                    }
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        if (!$util.isString(message.organization))
                            return "organization: string expected";
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        if (!$util.isString(message.organizationName))
                            return "organizationName: string expected";
                    if (message.templateId != null && message.hasOwnProperty("templateId"))
                        if (!$util.isString(message.templateId))
                            return "templateId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.projectName != null && message.hasOwnProperty("projectName"))
                        if (!$util.isString(message.projectName))
                            return "projectName: string expected";
                    if (message.creator != null && message.hasOwnProperty("creator"))
                        if (!$util.isString(message.creator))
                            return "creator: string expected";
                    if (message.displayName != null && message.hasOwnProperty("displayName")) {
                        properties._displayName = 1;
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    }
                    if (message.description != null && message.hasOwnProperty("description")) {
                        properties._description = 1;
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    }
                    if (message.inputJson != null && message.hasOwnProperty("inputJson")) {
                        properties._inputJson = 1;
                        if (!$util.isString(message.inputJson))
                            return "inputJson: string expected";
                    }
                    if (message.valueJson != null && message.hasOwnProperty("valueJson")) {
                        properties._valueJson = 1;
                        if (!$util.isString(message.valueJson))
                            return "valueJson: string expected";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.resourceId != null && message.hasOwnProperty("resourceId")) {
                        properties._resourceId = 1;
                        if (!$util.isString(message.resourceId))
                            return "resourceId: string expected";
                    }
                    if (message.resourceUrl != null && message.hasOwnProperty("resourceUrl")) {
                        properties._resourceUrl = 1;
                        if (!$util.isString(message.resourceUrl))
                            return "resourceUrl: string expected";
                    }
                    if (message.resourceState != null && message.hasOwnProperty("resourceState"))
                        switch (message.resourceState) {
                        default:
                            return "resourceState: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            break;
                        }
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId")) {
                        properties._deploymentScopeId = 1;
                        if (!$util.isString(message.deploymentScopeId))
                            return "deploymentScopeId: string expected";
                    }
                    if (message.deploymentScopeName != null && message.hasOwnProperty("deploymentScopeName")) {
                        properties._deploymentScopeName = 1;
                        if (!$util.isString(message.deploymentScopeName))
                            return "deploymentScopeName: string expected";
                    }
                    if (message.identityId != null && message.hasOwnProperty("identityId")) {
                        properties._identityId = 1;
                        if (!$util.isString(message.identityId))
                            return "identityId: string expected";
                    }
                    if (message.deleted != null && message.hasOwnProperty("deleted")) {
                        properties._deleted = 1;
                        if (!$util.isString(message.deleted))
                            return "deleted: string expected";
                    }
                    if (message.ttl != null && message.hasOwnProperty("ttl")) {
                        properties._ttl = 1;
                        if (!$util.isInteger(message.ttl))
                            return "ttl: integer expected";
                    }
                    if (message.slug != null && message.hasOwnProperty("slug"))
                        if (!$util.isString(message.slug))
                            return "slug: string expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    return null;
                };

                /**
                 * Creates a Component message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.Component} Component
                 */
                Component.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.Component)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.Component();
                    if (object.href != null)
                        message.href = String(object.href);
                    if (object.organization != null)
                        message.organization = String(object.organization);
                    if (object.organizationName != null)
                        message.organizationName = String(object.organizationName);
                    if (object.templateId != null)
                        message.templateId = String(object.templateId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.projectName != null)
                        message.projectName = String(object.projectName);
                    if (object.creator != null)
                        message.creator = String(object.creator);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.inputJson != null)
                        message.inputJson = String(object.inputJson);
                    if (object.valueJson != null)
                        message.valueJson = String(object.valueJson);
                    switch (object.type) {
                    case "ENVIRONMENT":
                    case 0:
                        message.type = 0;
                        break;
                    case "REPOSITORY":
                    case 1:
                        message.type = 1;
                        break;
                    case "NAMESPACE":
                    case 2:
                        message.type = 2;
                        break;
                    }
                    if (object.resourceId != null)
                        message.resourceId = String(object.resourceId);
                    if (object.resourceUrl != null)
                        message.resourceUrl = String(object.resourceUrl);
                    switch (object.resourceState) {
                    case "PENDING":
                    case 0:
                        message.resourceState = 0;
                        break;
                    case "INITIALIZING":
                    case 1:
                        message.resourceState = 1;
                        break;
                    case "PROVISIONING":
                    case 2:
                        message.resourceState = 2;
                        break;
                    case "PROVISIONED":
                    case 3:
                        message.resourceState = 3;
                        break;
                    case "DEPROVISIONING":
                    case 4:
                        message.resourceState = 4;
                        break;
                    case "DEPROVISIONED":
                    case 5:
                        message.resourceState = 5;
                        break;
                    case "FAILED":
                    case 6:
                        message.resourceState = 6;
                        break;
                    }
                    if (object.deploymentScopeId != null)
                        message.deploymentScopeId = String(object.deploymentScopeId);
                    if (object.deploymentScopeName != null)
                        message.deploymentScopeName = String(object.deploymentScopeName);
                    if (object.identityId != null)
                        message.identityId = String(object.identityId);
                    if (object.deleted != null)
                        message.deleted = String(object.deleted);
                    if (object.ttl != null)
                        message.ttl = object.ttl | 0;
                    if (object.slug != null)
                        message.slug = String(object.slug);
                    if (object.id != null)
                        message.id = String(object.id);
                    return message;
                };

                /**
                 * Creates a plain object from a Component message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.Component} message Component
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Component.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.slug = "";
                        object.type = options.enums === String ? "ENVIRONMENT" : 0;
                        object.organization = "";
                        object.organizationName = "";
                        object.templateId = "";
                        object.projectId = "";
                        object.projectName = "";
                        object.resourceState = options.enums === String ? "PENDING" : 0;
                        object.creator = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.ttl != null && message.hasOwnProperty("ttl")) {
                        object.ttl = message.ttl;
                        if (options.oneofs)
                            object._ttl = "ttl";
                    }
                    if (message.href != null && message.hasOwnProperty("href")) {
                        object.href = message.href;
                        if (options.oneofs)
                            object._href = "href";
                    }
                    if (message.slug != null && message.hasOwnProperty("slug"))
                        object.slug = message.slug;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.colbylwilliams.teamcloud.v1.Component.TypeEnum[message.type] : message.type;
                    if (message.identityId != null && message.hasOwnProperty("identityId")) {
                        object.identityId = message.identityId;
                        if (options.oneofs)
                            object._identityId = "identityId";
                    }
                    if (message.deploymentScopeName != null && message.hasOwnProperty("deploymentScopeName")) {
                        object.deploymentScopeName = message.deploymentScopeName;
                        if (options.oneofs)
                            object._deploymentScopeName = "deploymentScopeName";
                    }
                    if (message.inputJson != null && message.hasOwnProperty("inputJson")) {
                        object.inputJson = message.inputJson;
                        if (options.oneofs)
                            object._inputJson = "inputJson";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName")) {
                        object.displayName = message.displayName;
                        if (options.oneofs)
                            object._displayName = "displayName";
                    }
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = message.organization;
                    if (message.description != null && message.hasOwnProperty("description")) {
                        object.description = message.description;
                        if (options.oneofs)
                            object._description = "description";
                    }
                    if (message.resourceUrl != null && message.hasOwnProperty("resourceUrl")) {
                        object.resourceUrl = message.resourceUrl;
                        if (options.oneofs)
                            object._resourceUrl = "resourceUrl";
                    }
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        object.organizationName = message.organizationName;
                    if (message.valueJson != null && message.hasOwnProperty("valueJson")) {
                        object.valueJson = message.valueJson;
                        if (options.oneofs)
                            object._valueJson = "valueJson";
                    }
                    if (message.templateId != null && message.hasOwnProperty("templateId"))
                        object.templateId = message.templateId;
                    if (message.resourceId != null && message.hasOwnProperty("resourceId")) {
                        object.resourceId = message.resourceId;
                        if (options.oneofs)
                            object._resourceId = "resourceId";
                    }
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId")) {
                        object.deploymentScopeId = message.deploymentScopeId;
                        if (options.oneofs)
                            object._deploymentScopeId = "deploymentScopeId";
                    }
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.projectName != null && message.hasOwnProperty("projectName"))
                        object.projectName = message.projectName;
                    if (message.resourceState != null && message.hasOwnProperty("resourceState"))
                        object.resourceState = options.enums === String ? $root.colbylwilliams.teamcloud.v1.Component.ResourceStateEnum[message.resourceState] : message.resourceState;
                    if (message.deleted != null && message.hasOwnProperty("deleted")) {
                        object.deleted = message.deleted;
                        if (options.oneofs)
                            object._deleted = "deleted";
                    }
                    if (message.creator != null && message.hasOwnProperty("creator"))
                        object.creator = message.creator;
                    return object;
                };

                /**
                 * Converts this Component to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.Component
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Component.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * TypeEnum enum.
                 * @name colbylwilliams.teamcloud.v1.Component.TypeEnum
                 * @enum {number}
                 * @property {number} ENVIRONMENT=0 ENVIRONMENT value
                 * @property {number} REPOSITORY=1 REPOSITORY value
                 * @property {number} NAMESPACE=2 NAMESPACE value
                 */
                Component.TypeEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ENVIRONMENT"] = 0;
                    values[valuesById[1] = "REPOSITORY"] = 1;
                    values[valuesById[2] = "NAMESPACE"] = 2;
                    return values;
                })();

                /**
                 * ResourceStateEnum enum.
                 * @name colbylwilliams.teamcloud.v1.Component.ResourceStateEnum
                 * @enum {number}
                 * @property {number} PENDING=0 PENDING value
                 * @property {number} INITIALIZING=1 INITIALIZING value
                 * @property {number} PROVISIONING=2 PROVISIONING value
                 * @property {number} PROVISIONED=3 PROVISIONED value
                 * @property {number} DEPROVISIONING=4 DEPROVISIONING value
                 * @property {number} DEPROVISIONED=5 DEPROVISIONED value
                 * @property {number} FAILED=6 FAILED value
                 */
                Component.ResourceStateEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "PENDING"] = 0;
                    values[valuesById[1] = "INITIALIZING"] = 1;
                    values[valuesById[2] = "PROVISIONING"] = 2;
                    values[valuesById[3] = "PROVISIONED"] = 3;
                    values[valuesById[4] = "DEPROVISIONING"] = 4;
                    values[valuesById[5] = "DEPROVISIONED"] = 5;
                    values[valuesById[6] = "FAILED"] = 6;
                    return values;
                })();

                return Component;
            })();

            v1.ComponentDefinition = (function() {

                /**
                 * Properties of a ComponentDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentDefinition
                 * @property {string|null} [templateId] ComponentDefinition templateId
                 * @property {string|null} [displayName] ComponentDefinition displayName
                 * @property {string|null} [inputJson] ComponentDefinition inputJson
                 * @property {string|null} [deploymentScopeId] ComponentDefinition deploymentScopeId
                 */

                /**
                 * Constructs a new ComponentDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentDefinition.
                 * @implements IComponentDefinition
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentDefinition=} [properties] Properties to set
                 */
                function ComponentDefinition(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentDefinition templateId.
                 * @member {string} templateId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDefinition
                 * @instance
                 */
                ComponentDefinition.prototype.templateId = "";

                /**
                 * ComponentDefinition displayName.
                 * @member {string} displayName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDefinition
                 * @instance
                 */
                ComponentDefinition.prototype.displayName = "";

                /**
                 * ComponentDefinition inputJson.
                 * @member {string|null|undefined} inputJson
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDefinition
                 * @instance
                 */
                ComponentDefinition.prototype.inputJson = null;

                /**
                 * ComponentDefinition deploymentScopeId.
                 * @member {string|null|undefined} deploymentScopeId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDefinition
                 * @instance
                 */
                ComponentDefinition.prototype.deploymentScopeId = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentDefinition _inputJson.
                 * @member {"inputJson"|undefined} _inputJson
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDefinition
                 * @instance
                 */
                Object.defineProperty(ComponentDefinition.prototype, "_inputJson", {
                    get: $util.oneOfGetter($oneOfFields = ["inputJson"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentDefinition _deploymentScopeId.
                 * @member {"deploymentScopeId"|undefined} _deploymentScopeId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDefinition
                 * @instance
                 */
                Object.defineProperty(ComponentDefinition.prototype, "_deploymentScopeId", {
                    get: $util.oneOfGetter($oneOfFields = ["deploymentScopeId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentDefinition message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDefinition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentDefinition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.templateId != null && message.hasOwnProperty("templateId"))
                        if (!$util.isString(message.templateId))
                            return "templateId: string expected";
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    if (message.inputJson != null && message.hasOwnProperty("inputJson")) {
                        properties._inputJson = 1;
                        if (!$util.isString(message.inputJson))
                            return "inputJson: string expected";
                    }
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId")) {
                        properties._deploymentScopeId = 1;
                        if (!$util.isString(message.deploymentScopeId))
                            return "deploymentScopeId: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentDefinition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDefinition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentDefinition} ComponentDefinition
                 */
                ComponentDefinition.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentDefinition)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentDefinition();
                    if (object.templateId != null)
                        message.templateId = String(object.templateId);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.inputJson != null)
                        message.inputJson = String(object.inputJson);
                    if (object.deploymentScopeId != null)
                        message.deploymentScopeId = String(object.deploymentScopeId);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentDefinition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDefinition
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentDefinition} message ComponentDefinition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentDefinition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.displayName = "";
                        object.templateId = "";
                    }
                    if (message.inputJson != null && message.hasOwnProperty("inputJson")) {
                        object.inputJson = message.inputJson;
                        if (options.oneofs)
                            object._inputJson = "inputJson";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        object.displayName = message.displayName;
                    if (message.templateId != null && message.hasOwnProperty("templateId"))
                        object.templateId = message.templateId;
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId")) {
                        object.deploymentScopeId = message.deploymentScopeId;
                        if (options.oneofs)
                            object._deploymentScopeId = "deploymentScopeId";
                    }
                    return object;
                };

                /**
                 * Converts this ComponentDefinition to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentDefinition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentDefinition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ComponentDefinition;
            })();

            v1.ComponentListDataResult = (function() {

                /**
                 * Properties of a ComponentListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentListDataResult
                 * @property {number|null} [code] ComponentListDataResult code
                 * @property {string|null} [status] ComponentListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.IComponent>|null} [data] ComponentListDataResult data
                 * @property {string|null} [location] ComponentListDataResult location
                 */

                /**
                 * Constructs a new ComponentListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentListDataResult.
                 * @implements IComponentListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentListDataResult=} [properties] Properties to set
                 */
                function ComponentListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ComponentListDataResult
                 * @instance
                 */
                ComponentListDataResult.prototype.code = 0;

                /**
                 * ComponentListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentListDataResult
                 * @instance
                 */
                ComponentListDataResult.prototype.status = null;

                /**
                 * ComponentListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IComponent>} data
                 * @memberof colbylwilliams.teamcloud.v1.ComponentListDataResult
                 * @instance
                 */
                ComponentListDataResult.prototype.data = $util.emptyArray;

                /**
                 * ComponentListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentListDataResult
                 * @instance
                 */
                ComponentListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentListDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentListDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.Component.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentListDataResult} ComponentListDataResult
                 */
                ComponentListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ComponentListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.Component.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentListDataResult} message ComponentListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.Component.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ComponentListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ComponentListDataResult;
            })();

            v1.ComponentsAPI = (function() {

                /**
                 * Constructs a new ComponentsAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentsAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ComponentsAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (ComponentsAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ComponentsAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ComponentsAPI#createComponent}.
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @typedef CreateComponentCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ComponentDataResult} [response] ComponentDataResult
                 */

                /**
                 * Calls CreateComponent.
                 * @function createComponent
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateComponentRequest} request CreateComponentRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ComponentsAPI.CreateComponentCallback} callback Node-style callback called with the error, if any, and ComponentDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ComponentsAPI.prototype.createComponent = function createComponent(request, callback) {
                    return this.rpcCall(createComponent, $root.colbylwilliams.teamcloud.v1.CreateComponentRequest, $root.colbylwilliams.teamcloud.v1.ComponentDataResult, request, callback);
                }, "name", { value: "CreateComponent" });

                /**
                 * Calls CreateComponent.
                 * @function createComponent
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateComponentRequest} request CreateComponentRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ComponentDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ComponentsAPI#deleteComponent}.
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @typedef DeleteComponentCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} [response] StatusResult
                 */

                /**
                 * Calls DeleteComponent.
                 * @function deleteComponent
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteComponentRequest} request DeleteComponentRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ComponentsAPI.DeleteComponentCallback} callback Node-style callback called with the error, if any, and StatusResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ComponentsAPI.prototype.deleteComponent = function deleteComponent(request, callback) {
                    return this.rpcCall(deleteComponent, $root.colbylwilliams.teamcloud.v1.DeleteComponentRequest, $root.colbylwilliams.teamcloud.v1.StatusResult, request, callback);
                }, "name", { value: "DeleteComponent" });

                /**
                 * Calls DeleteComponent.
                 * @function deleteComponent
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteComponentRequest} request DeleteComponentRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StatusResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ComponentsAPI#getComponent}.
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @typedef GetComponentCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ComponentDataResult} [response] ComponentDataResult
                 */

                /**
                 * Calls GetComponent.
                 * @function getComponent
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentRequest} request GetComponentRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ComponentsAPI.GetComponentCallback} callback Node-style callback called with the error, if any, and ComponentDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ComponentsAPI.prototype.getComponent = function getComponent(request, callback) {
                    return this.rpcCall(getComponent, $root.colbylwilliams.teamcloud.v1.GetComponentRequest, $root.colbylwilliams.teamcloud.v1.ComponentDataResult, request, callback);
                }, "name", { value: "GetComponent" });

                /**
                 * Calls GetComponent.
                 * @function getComponent
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentRequest} request GetComponentRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ComponentDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ComponentsAPI#getComponents}.
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @typedef GetComponentsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ComponentListDataResult} [response] ComponentListDataResult
                 */

                /**
                 * Calls GetComponents.
                 * @function getComponents
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentsRequest} request GetComponentsRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ComponentsAPI.GetComponentsCallback} callback Node-style callback called with the error, if any, and ComponentListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ComponentsAPI.prototype.getComponents = function getComponents(request, callback) {
                    return this.rpcCall(getComponents, $root.colbylwilliams.teamcloud.v1.GetComponentsRequest, $root.colbylwilliams.teamcloud.v1.ComponentListDataResult, request, callback);
                }, "name", { value: "GetComponents" });

                /**
                 * Calls GetComponents.
                 * @function getComponents
                 * @memberof colbylwilliams.teamcloud.v1.ComponentsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentsRequest} request GetComponentsRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ComponentListDataResult>} Promise
                 * @variation 2
                 */

                return ComponentsAPI;
            })();

            v1.CreateComponentRequest = (function() {

                /**
                 * Properties of a CreateComponentRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICreateComponentRequest
                 * @property {string|null} [organizationId] CreateComponentRequest organizationId
                 * @property {string|null} [projectId] CreateComponentRequest projectId
                 * @property {colbylwilliams.teamcloud.v1.IComponentDefinition|null} [componentDefinition] CreateComponentRequest componentDefinition
                 */

                /**
                 * Constructs a new CreateComponentRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CreateComponentRequest.
                 * @implements ICreateComponentRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICreateComponentRequest=} [properties] Properties to set
                 */
                function CreateComponentRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateComponentRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentRequest
                 * @instance
                 */
                CreateComponentRequest.prototype.organizationId = "";

                /**
                 * CreateComponentRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentRequest
                 * @instance
                 */
                CreateComponentRequest.prototype.projectId = "";

                /**
                 * CreateComponentRequest componentDefinition.
                 * @member {colbylwilliams.teamcloud.v1.IComponentDefinition|null|undefined} componentDefinition
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentRequest
                 * @instance
                 */
                CreateComponentRequest.prototype.componentDefinition = null;

                /**
                 * Verifies a CreateComponentRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateComponentRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.componentDefinition != null && message.hasOwnProperty("componentDefinition")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ComponentDefinition.verify(message.componentDefinition);
                        if (error)
                            return "componentDefinition." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CreateComponentRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CreateComponentRequest} CreateComponentRequest
                 */
                CreateComponentRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CreateComponentRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CreateComponentRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.componentDefinition != null) {
                        if (typeof object.componentDefinition !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.CreateComponentRequest.componentDefinition: object expected");
                        message.componentDefinition = $root.colbylwilliams.teamcloud.v1.ComponentDefinition.fromObject(object.componentDefinition);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CreateComponentRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CreateComponentRequest} message CreateComponentRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateComponentRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                        object.componentDefinition = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.componentDefinition != null && message.hasOwnProperty("componentDefinition"))
                        object.componentDefinition = $root.colbylwilliams.teamcloud.v1.ComponentDefinition.toObject(message.componentDefinition, options);
                    return object;
                };

                /**
                 * Converts this CreateComponentRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateComponentRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CreateComponentRequest;
            })();

            v1.DeleteComponentRequest = (function() {

                /**
                 * Properties of a DeleteComponentRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeleteComponentRequest
                 * @property {string|null} [componentId] DeleteComponentRequest componentId
                 * @property {string|null} [organizationId] DeleteComponentRequest organizationId
                 * @property {string|null} [projectId] DeleteComponentRequest projectId
                 */

                /**
                 * Constructs a new DeleteComponentRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeleteComponentRequest.
                 * @implements IDeleteComponentRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeleteComponentRequest=} [properties] Properties to set
                 */
                function DeleteComponentRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteComponentRequest componentId.
                 * @member {string} componentId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteComponentRequest
                 * @instance
                 */
                DeleteComponentRequest.prototype.componentId = "";

                /**
                 * DeleteComponentRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteComponentRequest
                 * @instance
                 */
                DeleteComponentRequest.prototype.organizationId = "";

                /**
                 * DeleteComponentRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteComponentRequest
                 * @instance
                 */
                DeleteComponentRequest.prototype.projectId = "";

                /**
                 * Verifies a DeleteComponentRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeleteComponentRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteComponentRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        if (!$util.isString(message.componentId))
                            return "componentId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a DeleteComponentRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteComponentRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeleteComponentRequest} DeleteComponentRequest
                 */
                DeleteComponentRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeleteComponentRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeleteComponentRequest();
                    if (object.componentId != null)
                        message.componentId = String(object.componentId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a DeleteComponentRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteComponentRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeleteComponentRequest} message DeleteComponentRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteComponentRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.componentId = "";
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        object.componentId = message.componentId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this DeleteComponentRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeleteComponentRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteComponentRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeleteComponentRequest;
            })();

            v1.GetComponentRequest = (function() {

                /**
                 * Properties of a GetComponentRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetComponentRequest
                 * @property {string|null} [componentId] GetComponentRequest componentId
                 * @property {string|null} [organizationId] GetComponentRequest organizationId
                 * @property {string|null} [projectId] GetComponentRequest projectId
                 */

                /**
                 * Constructs a new GetComponentRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetComponentRequest.
                 * @implements IGetComponentRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentRequest=} [properties] Properties to set
                 */
                function GetComponentRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetComponentRequest componentId.
                 * @member {string} componentId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentRequest
                 * @instance
                 */
                GetComponentRequest.prototype.componentId = "";

                /**
                 * GetComponentRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentRequest
                 * @instance
                 */
                GetComponentRequest.prototype.organizationId = "";

                /**
                 * GetComponentRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentRequest
                 * @instance
                 */
                GetComponentRequest.prototype.projectId = "";

                /**
                 * Verifies a GetComponentRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetComponentRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        if (!$util.isString(message.componentId))
                            return "componentId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetComponentRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetComponentRequest} GetComponentRequest
                 */
                GetComponentRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetComponentRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetComponentRequest();
                    if (object.componentId != null)
                        message.componentId = String(object.componentId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetComponentRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetComponentRequest} message GetComponentRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetComponentRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.componentId = "";
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        object.componentId = message.componentId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetComponentRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetComponentRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetComponentRequest;
            })();

            v1.GetComponentsRequest = (function() {

                /**
                 * Properties of a GetComponentsRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetComponentsRequest
                 * @property {string|null} [organizationId] GetComponentsRequest organizationId
                 * @property {string|null} [projectId] GetComponentsRequest projectId
                 * @property {boolean|null} [deleted] GetComponentsRequest deleted
                 */

                /**
                 * Constructs a new GetComponentsRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetComponentsRequest.
                 * @implements IGetComponentsRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentsRequest=} [properties] Properties to set
                 */
                function GetComponentsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetComponentsRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentsRequest
                 * @instance
                 */
                GetComponentsRequest.prototype.organizationId = "";

                /**
                 * GetComponentsRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentsRequest
                 * @instance
                 */
                GetComponentsRequest.prototype.projectId = "";

                /**
                 * GetComponentsRequest deleted.
                 * @member {boolean} deleted
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentsRequest
                 * @instance
                 */
                GetComponentsRequest.prototype.deleted = false;

                /**
                 * Verifies a GetComponentsRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetComponentsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.deleted != null && message.hasOwnProperty("deleted"))
                        if (typeof message.deleted !== "boolean")
                            return "deleted: boolean expected";
                    return null;
                };

                /**
                 * Creates a GetComponentsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetComponentsRequest} GetComponentsRequest
                 */
                GetComponentsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetComponentsRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetComponentsRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.deleted != null)
                        message.deleted = Boolean(object.deleted);
                    return message;
                };

                /**
                 * Creates a plain object from a GetComponentsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentsRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetComponentsRequest} message GetComponentsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetComponentsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                        object.deleted = false;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.deleted != null && message.hasOwnProperty("deleted"))
                        object.deleted = message.deleted;
                    return object;
                };

                /**
                 * Converts this GetComponentsRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetComponentsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetComponentsRequest;
            })();

            v1.StatusResult = (function() {

                /**
                 * Properties of a StatusResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IStatusResult
                 * @property {number|null} [code] StatusResult code
                 * @property {string|null} [status] StatusResult status
                 * @property {string|null} [state] StatusResult state
                 * @property {string|null} [stateMessage] StatusResult stateMessage
                 * @property {string|null} [location] StatusResult location
                 * @property {Array.<colbylwilliams.teamcloud.v1.IResultError>|null} [errors] StatusResult errors
                 * @property {string|null} [UnderscoretrackingId] StatusResult UnderscoretrackingId
                 */

                /**
                 * Constructs a new StatusResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a StatusResult.
                 * @implements IStatusResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IStatusResult=} [properties] Properties to set
                 */
                function StatusResult(properties) {
                    this.errors = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * StatusResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                StatusResult.prototype.code = 0;

                /**
                 * StatusResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                StatusResult.prototype.status = null;

                /**
                 * StatusResult state.
                 * @member {string|null|undefined} state
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                StatusResult.prototype.state = null;

                /**
                 * StatusResult stateMessage.
                 * @member {string|null|undefined} stateMessage
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                StatusResult.prototype.stateMessage = null;

                /**
                 * StatusResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                StatusResult.prototype.location = null;

                /**
                 * StatusResult errors.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IResultError>} errors
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                StatusResult.prototype.errors = $util.emptyArray;

                /**
                 * StatusResult UnderscoretrackingId.
                 * @member {string|null|undefined} UnderscoretrackingId
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                StatusResult.prototype.UnderscoretrackingId = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * StatusResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                Object.defineProperty(StatusResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * StatusResult _state.
                 * @member {"state"|undefined} _state
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                Object.defineProperty(StatusResult.prototype, "_state", {
                    get: $util.oneOfGetter($oneOfFields = ["state"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * StatusResult _stateMessage.
                 * @member {"stateMessage"|undefined} _stateMessage
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                Object.defineProperty(StatusResult.prototype, "_stateMessage", {
                    get: $util.oneOfGetter($oneOfFields = ["stateMessage"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * StatusResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                Object.defineProperty(StatusResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * StatusResult _UnderscoretrackingId.
                 * @member {"UnderscoretrackingId"|undefined} _UnderscoretrackingId
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 */
                Object.defineProperty(StatusResult.prototype, "_UnderscoretrackingId", {
                    get: $util.oneOfGetter($oneOfFields = ["UnderscoretrackingId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a StatusResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StatusResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.state != null && message.hasOwnProperty("state")) {
                        properties._state = 1;
                        if (!$util.isString(message.state))
                            return "state: string expected";
                    }
                    if (message.stateMessage != null && message.hasOwnProperty("stateMessage")) {
                        properties._stateMessage = 1;
                        if (!$util.isString(message.stateMessage))
                            return "stateMessage: string expected";
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    if (message.errors != null && message.hasOwnProperty("errors")) {
                        if (!Array.isArray(message.errors))
                            return "errors: array expected";
                        for (let i = 0; i < message.errors.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.ResultError.verify(message.errors[i]);
                            if (error)
                                return "errors." + error;
                        }
                    }
                    if (message.UnderscoretrackingId != null && message.hasOwnProperty("UnderscoretrackingId")) {
                        properties._UnderscoretrackingId = 1;
                        if (!$util.isString(message.UnderscoretrackingId))
                            return "UnderscoretrackingId: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a StatusResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.StatusResult} StatusResult
                 */
                StatusResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.StatusResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.StatusResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.state != null)
                        message.state = String(object.state);
                    if (object.stateMessage != null)
                        message.stateMessage = String(object.stateMessage);
                    if (object.location != null)
                        message.location = String(object.location);
                    if (object.errors) {
                        if (!Array.isArray(object.errors))
                            throw TypeError(".colbylwilliams.teamcloud.v1.StatusResult.errors: array expected");
                        message.errors = [];
                        for (let i = 0; i < object.errors.length; ++i) {
                            if (typeof object.errors[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.StatusResult.errors: object expected");
                            message.errors[i] = $root.colbylwilliams.teamcloud.v1.ResultError.fromObject(object.errors[i]);
                        }
                    }
                    if (object.UnderscoretrackingId != null)
                        message.UnderscoretrackingId = String(object.UnderscoretrackingId);
                    return message;
                };

                /**
                 * Creates a plain object from a StatusResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} message StatusResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StatusResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.errors = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.stateMessage != null && message.hasOwnProperty("stateMessage")) {
                        object.stateMessage = message.stateMessage;
                        if (options.oneofs)
                            object._stateMessage = "stateMessage";
                    }
                    if (message.state != null && message.hasOwnProperty("state")) {
                        object.state = message.state;
                        if (options.oneofs)
                            object._state = "state";
                    }
                    if (message.errors && message.errors.length) {
                        object.errors = [];
                        for (let j = 0; j < message.errors.length; ++j)
                            object.errors[j] = $root.colbylwilliams.teamcloud.v1.ResultError.toObject(message.errors[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    if (message.UnderscoretrackingId != null && message.hasOwnProperty("UnderscoretrackingId")) {
                        object.UnderscoretrackingId = message.UnderscoretrackingId;
                        if (options.oneofs)
                            object._UnderscoretrackingId = "UnderscoretrackingId";
                    }
                    return object;
                };

                /**
                 * Converts this StatusResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.StatusResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StatusResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return StatusResult;
            })();

            v1.ComponentTaskDataResult = (function() {

                /**
                 * Properties of a ComponentTaskDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentTaskDataResult
                 * @property {number|null} [code] ComponentTaskDataResult code
                 * @property {string|null} [status] ComponentTaskDataResult status
                 * @property {colbylwilliams.teamcloud.v1.IComponentTask|null} [data] ComponentTaskDataResult data
                 * @property {string|null} [location] ComponentTaskDataResult location
                 */

                /**
                 * Constructs a new ComponentTaskDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTaskDataResult.
                 * @implements IComponentTaskDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentTaskDataResult=} [properties] Properties to set
                 */
                function ComponentTaskDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentTaskDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDataResult
                 * @instance
                 */
                ComponentTaskDataResult.prototype.code = 0;

                /**
                 * ComponentTaskDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDataResult
                 * @instance
                 */
                ComponentTaskDataResult.prototype.status = null;

                /**
                 * ComponentTaskDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.IComponentTask|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDataResult
                 * @instance
                 */
                ComponentTaskDataResult.prototype.data = null;

                /**
                 * ComponentTaskDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDataResult
                 * @instance
                 */
                ComponentTaskDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentTaskDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentTaskDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTaskDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentTaskDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentTaskDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentTaskDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ComponentTask.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentTaskDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentTaskDataResult} ComponentTaskDataResult
                 */
                ComponentTaskDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentTaskDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentTaskDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTaskDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.ComponentTask.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentTaskDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentTaskDataResult} message ComponentTaskDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentTaskDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.ComponentTask.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ComponentTaskDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentTaskDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ComponentTaskDataResult;
            })();

            v1.ComponentTask = (function() {

                /**
                 * Properties of a ComponentTask.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentTask
                 * @property {string|null} [organization] ComponentTask organization
                 * @property {string|null} [organizationName] ComponentTask organizationName
                 * @property {string|null} [componentId] ComponentTask componentId
                 * @property {string|null} [componentName] ComponentTask componentName
                 * @property {string|null} [projectId] ComponentTask projectId
                 * @property {string|null} [projectName] ComponentTask projectName
                 * @property {string|null} [requestedBy] ComponentTask requestedBy
                 * @property {string|null} [scheduleId] ComponentTask scheduleId
                 * @property {colbylwilliams.teamcloud.v1.ComponentTask.TypeEnum|null} [type] ComponentTask type
                 * @property {string|null} [typeName] ComponentTask typeName
                 * @property {string|null} [created] ComponentTask created
                 * @property {string|null} [started] ComponentTask started
                 * @property {string|null} [finished] ComponentTask finished
                 * @property {string|null} [inputJson] ComponentTask inputJson
                 * @property {string|null} [output] ComponentTask output
                 * @property {string|null} [resourceId] ComponentTask resourceId
                 * @property {colbylwilliams.teamcloud.v1.ComponentTask.TaskStateEnum|null} [taskState] ComponentTask taskState
                 * @property {number|null} [exitCode] ComponentTask exitCode
                 * @property {string|null} [id] ComponentTask id
                 */

                /**
                 * Constructs a new ComponentTask.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTask.
                 * @implements IComponentTask
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentTask=} [properties] Properties to set
                 */
                function ComponentTask(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentTask organization.
                 * @member {string} organization
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.organization = "";

                /**
                 * ComponentTask organizationName.
                 * @member {string} organizationName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.organizationName = "";

                /**
                 * ComponentTask componentId.
                 * @member {string} componentId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.componentId = "";

                /**
                 * ComponentTask componentName.
                 * @member {string} componentName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.componentName = "";

                /**
                 * ComponentTask projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.projectId = "";

                /**
                 * ComponentTask projectName.
                 * @member {string} projectName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.projectName = "";

                /**
                 * ComponentTask requestedBy.
                 * @member {string|null|undefined} requestedBy
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.requestedBy = null;

                /**
                 * ComponentTask scheduleId.
                 * @member {string|null|undefined} scheduleId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.scheduleId = null;

                /**
                 * ComponentTask type.
                 * @member {colbylwilliams.teamcloud.v1.ComponentTask.TypeEnum} type
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.type = 0;

                /**
                 * ComponentTask typeName.
                 * @member {string|null|undefined} typeName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.typeName = null;

                /**
                 * ComponentTask created.
                 * @member {string} created
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.created = "";

                /**
                 * ComponentTask started.
                 * @member {string|null|undefined} started
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.started = null;

                /**
                 * ComponentTask finished.
                 * @member {string|null|undefined} finished
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.finished = null;

                /**
                 * ComponentTask inputJson.
                 * @member {string|null|undefined} inputJson
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.inputJson = null;

                /**
                 * ComponentTask output.
                 * @member {string|null|undefined} output
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.output = null;

                /**
                 * ComponentTask resourceId.
                 * @member {string|null|undefined} resourceId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.resourceId = null;

                /**
                 * ComponentTask taskState.
                 * @member {colbylwilliams.teamcloud.v1.ComponentTask.TaskStateEnum} taskState
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.taskState = 0;

                /**
                 * ComponentTask exitCode.
                 * @member {number|null|undefined} exitCode
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.exitCode = null;

                /**
                 * ComponentTask id.
                 * @member {string} id
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                ComponentTask.prototype.id = "";

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentTask _requestedBy.
                 * @member {"requestedBy"|undefined} _requestedBy
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                Object.defineProperty(ComponentTask.prototype, "_requestedBy", {
                    get: $util.oneOfGetter($oneOfFields = ["requestedBy"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTask _scheduleId.
                 * @member {"scheduleId"|undefined} _scheduleId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                Object.defineProperty(ComponentTask.prototype, "_scheduleId", {
                    get: $util.oneOfGetter($oneOfFields = ["scheduleId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTask _typeName.
                 * @member {"typeName"|undefined} _typeName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                Object.defineProperty(ComponentTask.prototype, "_typeName", {
                    get: $util.oneOfGetter($oneOfFields = ["typeName"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTask _started.
                 * @member {"started"|undefined} _started
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                Object.defineProperty(ComponentTask.prototype, "_started", {
                    get: $util.oneOfGetter($oneOfFields = ["started"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTask _finished.
                 * @member {"finished"|undefined} _finished
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                Object.defineProperty(ComponentTask.prototype, "_finished", {
                    get: $util.oneOfGetter($oneOfFields = ["finished"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTask _inputJson.
                 * @member {"inputJson"|undefined} _inputJson
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                Object.defineProperty(ComponentTask.prototype, "_inputJson", {
                    get: $util.oneOfGetter($oneOfFields = ["inputJson"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTask _output.
                 * @member {"output"|undefined} _output
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                Object.defineProperty(ComponentTask.prototype, "_output", {
                    get: $util.oneOfGetter($oneOfFields = ["output"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTask _resourceId.
                 * @member {"resourceId"|undefined} _resourceId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                Object.defineProperty(ComponentTask.prototype, "_resourceId", {
                    get: $util.oneOfGetter($oneOfFields = ["resourceId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTask _exitCode.
                 * @member {"exitCode"|undefined} _exitCode
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 */
                Object.defineProperty(ComponentTask.prototype, "_exitCode", {
                    get: $util.oneOfGetter($oneOfFields = ["exitCode"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentTask message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentTask.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        if (!$util.isString(message.organization))
                            return "organization: string expected";
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        if (!$util.isString(message.organizationName))
                            return "organizationName: string expected";
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        if (!$util.isString(message.componentId))
                            return "componentId: string expected";
                    if (message.componentName != null && message.hasOwnProperty("componentName"))
                        if (!$util.isString(message.componentName))
                            return "componentName: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.projectName != null && message.hasOwnProperty("projectName"))
                        if (!$util.isString(message.projectName))
                            return "projectName: string expected";
                    if (message.requestedBy != null && message.hasOwnProperty("requestedBy")) {
                        properties._requestedBy = 1;
                        if (!$util.isString(message.requestedBy))
                            return "requestedBy: string expected";
                    }
                    if (message.scheduleId != null && message.hasOwnProperty("scheduleId")) {
                        properties._scheduleId = 1;
                        if (!$util.isString(message.scheduleId))
                            return "scheduleId: string expected";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName")) {
                        properties._typeName = 1;
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    }
                    if (message.created != null && message.hasOwnProperty("created"))
                        if (!$util.isString(message.created))
                            return "created: string expected";
                    if (message.started != null && message.hasOwnProperty("started")) {
                        properties._started = 1;
                        if (!$util.isString(message.started))
                            return "started: string expected";
                    }
                    if (message.finished != null && message.hasOwnProperty("finished")) {
                        properties._finished = 1;
                        if (!$util.isString(message.finished))
                            return "finished: string expected";
                    }
                    if (message.inputJson != null && message.hasOwnProperty("inputJson")) {
                        properties._inputJson = 1;
                        if (!$util.isString(message.inputJson))
                            return "inputJson: string expected";
                    }
                    if (message.output != null && message.hasOwnProperty("output")) {
                        properties._output = 1;
                        if (!$util.isString(message.output))
                            return "output: string expected";
                    }
                    if (message.resourceId != null && message.hasOwnProperty("resourceId")) {
                        properties._resourceId = 1;
                        if (!$util.isString(message.resourceId))
                            return "resourceId: string expected";
                    }
                    if (message.taskState != null && message.hasOwnProperty("taskState"))
                        switch (message.taskState) {
                        default:
                            return "taskState: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.exitCode != null && message.hasOwnProperty("exitCode")) {
                        properties._exitCode = 1;
                        if (!$util.isInteger(message.exitCode))
                            return "exitCode: integer expected";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    return null;
                };

                /**
                 * Creates a ComponentTask message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentTask} ComponentTask
                 */
                ComponentTask.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentTask)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentTask();
                    if (object.organization != null)
                        message.organization = String(object.organization);
                    if (object.organizationName != null)
                        message.organizationName = String(object.organizationName);
                    if (object.componentId != null)
                        message.componentId = String(object.componentId);
                    if (object.componentName != null)
                        message.componentName = String(object.componentName);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.projectName != null)
                        message.projectName = String(object.projectName);
                    if (object.requestedBy != null)
                        message.requestedBy = String(object.requestedBy);
                    if (object.scheduleId != null)
                        message.scheduleId = String(object.scheduleId);
                    switch (object.type) {
                    case "CUSTOM":
                    case 0:
                        message.type = 0;
                        break;
                    case "CREATE":
                    case 1:
                        message.type = 1;
                        break;
                    case "DELETE":
                    case 2:
                        message.type = 2;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.created != null)
                        message.created = String(object.created);
                    if (object.started != null)
                        message.started = String(object.started);
                    if (object.finished != null)
                        message.finished = String(object.finished);
                    if (object.inputJson != null)
                        message.inputJson = String(object.inputJson);
                    if (object.output != null)
                        message.output = String(object.output);
                    if (object.resourceId != null)
                        message.resourceId = String(object.resourceId);
                    switch (object.taskState) {
                    case "PENDING":
                    case 0:
                        message.taskState = 0;
                        break;
                    case "INITIALIZING":
                    case 1:
                        message.taskState = 1;
                        break;
                    case "PROCESSING":
                    case 2:
                        message.taskState = 2;
                        break;
                    case "SUCCEEDED":
                    case 3:
                        message.taskState = 3;
                        break;
                    case "CANCELED":
                    case 4:
                        message.taskState = 4;
                        break;
                    case "FAILED":
                    case 5:
                        message.taskState = 5;
                        break;
                    }
                    if (object.exitCode != null)
                        message.exitCode = object.exitCode | 0;
                    if (object.id != null)
                        message.id = String(object.id);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentTask message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentTask} message ComponentTask
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentTask.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.type = options.enums === String ? "CUSTOM" : 0;
                        object.componentName = "";
                        object.organization = "";
                        object.taskState = options.enums === String ? "PENDING" : 0;
                        object.organizationName = "";
                        object.projectId = "";
                        object.projectName = "";
                        object.componentId = "";
                        object.created = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.colbylwilliams.teamcloud.v1.ComponentTask.TypeEnum[message.type] : message.type;
                    if (message.requestedBy != null && message.hasOwnProperty("requestedBy")) {
                        object.requestedBy = message.requestedBy;
                        if (options.oneofs)
                            object._requestedBy = "requestedBy";
                    }
                    if (message.componentName != null && message.hasOwnProperty("componentName"))
                        object.componentName = message.componentName;
                    if (message.inputJson != null && message.hasOwnProperty("inputJson")) {
                        object.inputJson = message.inputJson;
                        if (options.oneofs)
                            object._inputJson = "inputJson";
                    }
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = message.organization;
                    if (message.finished != null && message.hasOwnProperty("finished")) {
                        object.finished = message.finished;
                        if (options.oneofs)
                            object._finished = "finished";
                    }
                    if (message.typeName != null && message.hasOwnProperty("typeName")) {
                        object.typeName = message.typeName;
                        if (options.oneofs)
                            object._typeName = "typeName";
                    }
                    if (message.scheduleId != null && message.hasOwnProperty("scheduleId")) {
                        object.scheduleId = message.scheduleId;
                        if (options.oneofs)
                            object._scheduleId = "scheduleId";
                    }
                    if (message.taskState != null && message.hasOwnProperty("taskState"))
                        object.taskState = options.enums === String ? $root.colbylwilliams.teamcloud.v1.ComponentTask.TaskStateEnum[message.taskState] : message.taskState;
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        object.organizationName = message.organizationName;
                    if (message.resourceId != null && message.hasOwnProperty("resourceId")) {
                        object.resourceId = message.resourceId;
                        if (options.oneofs)
                            object._resourceId = "resourceId";
                    }
                    if (message.started != null && message.hasOwnProperty("started")) {
                        object.started = message.started;
                        if (options.oneofs)
                            object._started = "started";
                    }
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.projectName != null && message.hasOwnProperty("projectName"))
                        object.projectName = message.projectName;
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        object.componentId = message.componentId;
                    if (message.output != null && message.hasOwnProperty("output")) {
                        object.output = message.output;
                        if (options.oneofs)
                            object._output = "output";
                    }
                    if (message.created != null && message.hasOwnProperty("created"))
                        object.created = message.created;
                    if (message.exitCode != null && message.hasOwnProperty("exitCode")) {
                        object.exitCode = message.exitCode;
                        if (options.oneofs)
                            object._exitCode = "exitCode";
                    }
                    return object;
                };

                /**
                 * Converts this ComponentTask to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTask
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentTask.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * TypeEnum enum.
                 * @name colbylwilliams.teamcloud.v1.ComponentTask.TypeEnum
                 * @enum {number}
                 * @property {number} CUSTOM=0 CUSTOM value
                 * @property {number} CREATE=1 CREATE value
                 * @property {number} DELETE=2 DELETE value
                 */
                ComponentTask.TypeEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "CUSTOM"] = 0;
                    values[valuesById[1] = "CREATE"] = 1;
                    values[valuesById[2] = "DELETE"] = 2;
                    return values;
                })();

                /**
                 * TaskStateEnum enum.
                 * @name colbylwilliams.teamcloud.v1.ComponentTask.TaskStateEnum
                 * @enum {number}
                 * @property {number} PENDING=0 PENDING value
                 * @property {number} INITIALIZING=1 INITIALIZING value
                 * @property {number} PROCESSING=2 PROCESSING value
                 * @property {number} SUCCEEDED=3 SUCCEEDED value
                 * @property {number} CANCELED=4 CANCELED value
                 * @property {number} FAILED=5 FAILED value
                 */
                ComponentTask.TaskStateEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "PENDING"] = 0;
                    values[valuesById[1] = "INITIALIZING"] = 1;
                    values[valuesById[2] = "PROCESSING"] = 2;
                    values[valuesById[3] = "SUCCEEDED"] = 3;
                    values[valuesById[4] = "CANCELED"] = 4;
                    values[valuesById[5] = "FAILED"] = 5;
                    return values;
                })();

                return ComponentTask;
            })();

            v1.ComponentTaskDefinition = (function() {

                /**
                 * Properties of a ComponentTaskDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentTaskDefinition
                 * @property {string|null} [taskId] ComponentTaskDefinition taskId
                 * @property {string|null} [inputJson] ComponentTaskDefinition inputJson
                 */

                /**
                 * Constructs a new ComponentTaskDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTaskDefinition.
                 * @implements IComponentTaskDefinition
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentTaskDefinition=} [properties] Properties to set
                 */
                function ComponentTaskDefinition(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentTaskDefinition taskId.
                 * @member {string} taskId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDefinition
                 * @instance
                 */
                ComponentTaskDefinition.prototype.taskId = "";

                /**
                 * ComponentTaskDefinition inputJson.
                 * @member {string|null|undefined} inputJson
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDefinition
                 * @instance
                 */
                ComponentTaskDefinition.prototype.inputJson = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentTaskDefinition _inputJson.
                 * @member {"inputJson"|undefined} _inputJson
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDefinition
                 * @instance
                 */
                Object.defineProperty(ComponentTaskDefinition.prototype, "_inputJson", {
                    get: $util.oneOfGetter($oneOfFields = ["inputJson"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentTaskDefinition message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDefinition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentTaskDefinition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.taskId != null && message.hasOwnProperty("taskId"))
                        if (!$util.isString(message.taskId))
                            return "taskId: string expected";
                    if (message.inputJson != null && message.hasOwnProperty("inputJson")) {
                        properties._inputJson = 1;
                        if (!$util.isString(message.inputJson))
                            return "inputJson: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentTaskDefinition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDefinition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentTaskDefinition} ComponentTaskDefinition
                 */
                ComponentTaskDefinition.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentTaskDefinition)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentTaskDefinition();
                    if (object.taskId != null)
                        message.taskId = String(object.taskId);
                    if (object.inputJson != null)
                        message.inputJson = String(object.inputJson);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentTaskDefinition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDefinition
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentTaskDefinition} message ComponentTaskDefinition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentTaskDefinition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.taskId = "";
                    if (message.inputJson != null && message.hasOwnProperty("inputJson")) {
                        object.inputJson = message.inputJson;
                        if (options.oneofs)
                            object._inputJson = "inputJson";
                    }
                    if (message.taskId != null && message.hasOwnProperty("taskId"))
                        object.taskId = message.taskId;
                    return object;
                };

                /**
                 * Converts this ComponentTaskDefinition to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskDefinition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentTaskDefinition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ComponentTaskDefinition;
            })();

            v1.ComponentTaskListDataResult = (function() {

                /**
                 * Properties of a ComponentTaskListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentTaskListDataResult
                 * @property {number|null} [code] ComponentTaskListDataResult code
                 * @property {string|null} [status] ComponentTaskListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.IComponentTask>|null} [data] ComponentTaskListDataResult data
                 * @property {string|null} [location] ComponentTaskListDataResult location
                 */

                /**
                 * Constructs a new ComponentTaskListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTaskListDataResult.
                 * @implements IComponentTaskListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentTaskListDataResult=} [properties] Properties to set
                 */
                function ComponentTaskListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentTaskListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskListDataResult
                 * @instance
                 */
                ComponentTaskListDataResult.prototype.code = 0;

                /**
                 * ComponentTaskListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskListDataResult
                 * @instance
                 */
                ComponentTaskListDataResult.prototype.status = null;

                /**
                 * ComponentTaskListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IComponentTask>} data
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskListDataResult
                 * @instance
                 */
                ComponentTaskListDataResult.prototype.data = $util.emptyArray;

                /**
                 * ComponentTaskListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskListDataResult
                 * @instance
                 */
                ComponentTaskListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentTaskListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskListDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentTaskListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTaskListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskListDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentTaskListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentTaskListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentTaskListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.ComponentTask.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentTaskListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentTaskListDataResult} ComponentTaskListDataResult
                 */
                ComponentTaskListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentTaskListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentTaskListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTaskListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTaskListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.ComponentTask.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentTaskListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentTaskListDataResult} message ComponentTaskListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentTaskListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.ComponentTask.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ComponentTaskListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentTaskListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ComponentTaskListDataResult;
            })();

            v1.ComponentTaskReference = (function() {

                /**
                 * Properties of a ComponentTaskReference.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentTaskReference
                 * @property {string|null} [componentId] ComponentTaskReference componentId
                 * @property {string|null} [componentName] ComponentTaskReference componentName
                 * @property {string|null} [componentTaskTemplateId] ComponentTaskReference componentTaskTemplateId
                 * @property {string|null} [inputJson] ComponentTaskReference inputJson
                 */

                /**
                 * Constructs a new ComponentTaskReference.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTaskReference.
                 * @implements IComponentTaskReference
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentTaskReference=} [properties] Properties to set
                 */
                function ComponentTaskReference(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentTaskReference componentId.
                 * @member {string|null|undefined} componentId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @instance
                 */
                ComponentTaskReference.prototype.componentId = null;

                /**
                 * ComponentTaskReference componentName.
                 * @member {string|null|undefined} componentName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @instance
                 */
                ComponentTaskReference.prototype.componentName = null;

                /**
                 * ComponentTaskReference componentTaskTemplateId.
                 * @member {string|null|undefined} componentTaskTemplateId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @instance
                 */
                ComponentTaskReference.prototype.componentTaskTemplateId = null;

                /**
                 * ComponentTaskReference inputJson.
                 * @member {string|null|undefined} inputJson
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @instance
                 */
                ComponentTaskReference.prototype.inputJson = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentTaskReference _componentId.
                 * @member {"componentId"|undefined} _componentId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @instance
                 */
                Object.defineProperty(ComponentTaskReference.prototype, "_componentId", {
                    get: $util.oneOfGetter($oneOfFields = ["componentId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTaskReference _componentName.
                 * @member {"componentName"|undefined} _componentName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @instance
                 */
                Object.defineProperty(ComponentTaskReference.prototype, "_componentName", {
                    get: $util.oneOfGetter($oneOfFields = ["componentName"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTaskReference _componentTaskTemplateId.
                 * @member {"componentTaskTemplateId"|undefined} _componentTaskTemplateId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @instance
                 */
                Object.defineProperty(ComponentTaskReference.prototype, "_componentTaskTemplateId", {
                    get: $util.oneOfGetter($oneOfFields = ["componentTaskTemplateId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTaskReference _inputJson.
                 * @member {"inputJson"|undefined} _inputJson
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @instance
                 */
                Object.defineProperty(ComponentTaskReference.prototype, "_inputJson", {
                    get: $util.oneOfGetter($oneOfFields = ["inputJson"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentTaskReference message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentTaskReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.componentId != null && message.hasOwnProperty("componentId")) {
                        properties._componentId = 1;
                        if (!$util.isString(message.componentId))
                            return "componentId: string expected";
                    }
                    if (message.componentName != null && message.hasOwnProperty("componentName")) {
                        properties._componentName = 1;
                        if (!$util.isString(message.componentName))
                            return "componentName: string expected";
                    }
                    if (message.componentTaskTemplateId != null && message.hasOwnProperty("componentTaskTemplateId")) {
                        properties._componentTaskTemplateId = 1;
                        if (!$util.isString(message.componentTaskTemplateId))
                            return "componentTaskTemplateId: string expected";
                    }
                    if (message.inputJson != null && message.hasOwnProperty("inputJson")) {
                        properties._inputJson = 1;
                        if (!$util.isString(message.inputJson))
                            return "inputJson: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentTaskReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentTaskReference} ComponentTaskReference
                 */
                ComponentTaskReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentTaskReference)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentTaskReference();
                    if (object.componentId != null)
                        message.componentId = String(object.componentId);
                    if (object.componentName != null)
                        message.componentName = String(object.componentName);
                    if (object.componentTaskTemplateId != null)
                        message.componentTaskTemplateId = String(object.componentTaskTemplateId);
                    if (object.inputJson != null)
                        message.inputJson = String(object.inputJson);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentTaskReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentTaskReference} message ComponentTaskReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentTaskReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (message.componentName != null && message.hasOwnProperty("componentName")) {
                        object.componentName = message.componentName;
                        if (options.oneofs)
                            object._componentName = "componentName";
                    }
                    if (message.inputJson != null && message.hasOwnProperty("inputJson")) {
                        object.inputJson = message.inputJson;
                        if (options.oneofs)
                            object._inputJson = "inputJson";
                    }
                    if (message.componentId != null && message.hasOwnProperty("componentId")) {
                        object.componentId = message.componentId;
                        if (options.oneofs)
                            object._componentId = "componentId";
                    }
                    if (message.componentTaskTemplateId != null && message.hasOwnProperty("componentTaskTemplateId")) {
                        object.componentTaskTemplateId = message.componentTaskTemplateId;
                        if (options.oneofs)
                            object._componentTaskTemplateId = "componentTaskTemplateId";
                    }
                    return object;
                };

                /**
                 * Converts this ComponentTaskReference to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentTaskReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ComponentTaskReference;
            })();

            v1.ComponentTaskRunner = (function() {

                /**
                 * Properties of a ComponentTaskRunner.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentTaskRunner
                 * @property {string|null} [id] ComponentTaskRunner id
                 * @property {boolean|null} [webServer] ComponentTaskRunner webServer
                 * @property {Object.<string,string>|null} ["with"] ComponentTaskRunner with
                 */

                /**
                 * Constructs a new ComponentTaskRunner.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTaskRunner.
                 * @implements IComponentTaskRunner
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentTaskRunner=} [properties] Properties to set
                 */
                function ComponentTaskRunner(properties) {
                    this["with"] = {};
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentTaskRunner id.
                 * @member {string|null|undefined} id
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskRunner
                 * @instance
                 */
                ComponentTaskRunner.prototype.id = null;

                /**
                 * ComponentTaskRunner webServer.
                 * @member {boolean} webServer
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskRunner
                 * @instance
                 */
                ComponentTaskRunner.prototype.webServer = false;

                /**
                 * ComponentTaskRunner with.
                 * @member {Object.<string,string>} with
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskRunner
                 * @instance
                 */
                ComponentTaskRunner.prototype["with"] = $util.emptyObject;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentTaskRunner _id.
                 * @member {"id"|undefined} _id
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskRunner
                 * @instance
                 */
                Object.defineProperty(ComponentTaskRunner.prototype, "_id", {
                    get: $util.oneOfGetter($oneOfFields = ["id"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentTaskRunner message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskRunner
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentTaskRunner.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.id != null && message.hasOwnProperty("id")) {
                        properties._id = 1;
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    }
                    if (message.webServer != null && message.hasOwnProperty("webServer"))
                        if (typeof message.webServer !== "boolean")
                            return "webServer: boolean expected";
                    if (message["with"] != null && message.hasOwnProperty("with")) {
                        if (!$util.isObject(message["with"]))
                            return "with: object expected";
                        let key = Object.keys(message["with"]);
                        for (let i = 0; i < key.length; ++i)
                            if (!$util.isString(message["with"][key[i]]))
                                return "with: string{k:string} expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentTaskRunner message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskRunner
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentTaskRunner} ComponentTaskRunner
                 */
                ComponentTaskRunner.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentTaskRunner)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentTaskRunner();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.webServer != null)
                        message.webServer = Boolean(object.webServer);
                    if (object["with"]) {
                        if (typeof object["with"] !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTaskRunner.with: object expected");
                        message["with"] = {};
                        for (let keys = Object.keys(object["with"]), i = 0; i < keys.length; ++i)
                            message["with"][keys[i]] = String(object["with"][keys[i]]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentTaskRunner message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskRunner
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentTaskRunner} message ComponentTaskRunner
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentTaskRunner.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.objects || options.defaults)
                        object["with"] = {};
                    if (options.defaults)
                        object.webServer = false;
                    if (message.id != null && message.hasOwnProperty("id")) {
                        object.id = message.id;
                        if (options.oneofs)
                            object._id = "id";
                    }
                    let keys2;
                    if (message["with"] && (keys2 = Object.keys(message["with"])).length) {
                        object["with"] = {};
                        for (let j = 0; j < keys2.length; ++j)
                            object["with"][keys2[j]] = message["with"][keys2[j]];
                    }
                    if (message.webServer != null && message.hasOwnProperty("webServer"))
                        object.webServer = message.webServer;
                    return object;
                };

                /**
                 * Converts this ComponentTaskRunner to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskRunner
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentTaskRunner.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ComponentTaskRunner;
            })();

            v1.ComponentTasksAPI = (function() {

                /**
                 * Constructs a new ComponentTasksAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTasksAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ComponentTasksAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (ComponentTasksAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ComponentTasksAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ComponentTasksAPI#cancelComponentTask}.
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @typedef CancelComponentTaskCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ComponentTaskDataResult} [response] ComponentTaskDataResult
                 */

                /**
                 * Calls CancelComponentTask.
                 * @function cancelComponentTask
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICancelComponentTaskRequest} request CancelComponentTaskRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ComponentTasksAPI.CancelComponentTaskCallback} callback Node-style callback called with the error, if any, and ComponentTaskDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ComponentTasksAPI.prototype.cancelComponentTask = function cancelComponentTask(request, callback) {
                    return this.rpcCall(cancelComponentTask, $root.colbylwilliams.teamcloud.v1.CancelComponentTaskRequest, $root.colbylwilliams.teamcloud.v1.ComponentTaskDataResult, request, callback);
                }, "name", { value: "CancelComponentTask" });

                /**
                 * Calls CancelComponentTask.
                 * @function cancelComponentTask
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICancelComponentTaskRequest} request CancelComponentTaskRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ComponentTaskDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ComponentTasksAPI#createComponentTask}.
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @typedef CreateComponentTaskCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ComponentTaskDataResult} [response] ComponentTaskDataResult
                 */

                /**
                 * Calls CreateComponentTask.
                 * @function createComponentTask
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateComponentTaskRequest} request CreateComponentTaskRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ComponentTasksAPI.CreateComponentTaskCallback} callback Node-style callback called with the error, if any, and ComponentTaskDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ComponentTasksAPI.prototype.createComponentTask = function createComponentTask(request, callback) {
                    return this.rpcCall(createComponentTask, $root.colbylwilliams.teamcloud.v1.CreateComponentTaskRequest, $root.colbylwilliams.teamcloud.v1.ComponentTaskDataResult, request, callback);
                }, "name", { value: "CreateComponentTask" });

                /**
                 * Calls CreateComponentTask.
                 * @function createComponentTask
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateComponentTaskRequest} request CreateComponentTaskRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ComponentTaskDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ComponentTasksAPI#getComponentTask}.
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @typedef GetComponentTaskCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ComponentTaskDataResult} [response] ComponentTaskDataResult
                 */

                /**
                 * Calls GetComponentTask.
                 * @function getComponentTask
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTaskRequest} request GetComponentTaskRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ComponentTasksAPI.GetComponentTaskCallback} callback Node-style callback called with the error, if any, and ComponentTaskDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ComponentTasksAPI.prototype.getComponentTask = function getComponentTask(request, callback) {
                    return this.rpcCall(getComponentTask, $root.colbylwilliams.teamcloud.v1.GetComponentTaskRequest, $root.colbylwilliams.teamcloud.v1.ComponentTaskDataResult, request, callback);
                }, "name", { value: "GetComponentTask" });

                /**
                 * Calls GetComponentTask.
                 * @function getComponentTask
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTaskRequest} request GetComponentTaskRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ComponentTaskDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ComponentTasksAPI#getComponentTasks}.
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @typedef GetComponentTasksCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ComponentTaskListDataResult} [response] ComponentTaskListDataResult
                 */

                /**
                 * Calls GetComponentTasks.
                 * @function getComponentTasks
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTasksRequest} request GetComponentTasksRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ComponentTasksAPI.GetComponentTasksCallback} callback Node-style callback called with the error, if any, and ComponentTaskListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ComponentTasksAPI.prototype.getComponentTasks = function getComponentTasks(request, callback) {
                    return this.rpcCall(getComponentTasks, $root.colbylwilliams.teamcloud.v1.GetComponentTasksRequest, $root.colbylwilliams.teamcloud.v1.ComponentTaskListDataResult, request, callback);
                }, "name", { value: "GetComponentTasks" });

                /**
                 * Calls GetComponentTasks.
                 * @function getComponentTasks
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTasksRequest} request GetComponentTasksRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ComponentTaskListDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ComponentTasksAPI#reRunComponentTask}.
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @typedef ReRunComponentTaskCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ComponentTaskDataResult} [response] ComponentTaskDataResult
                 */

                /**
                 * Calls ReRunComponentTask.
                 * @function reRunComponentTask
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IReRunComponentTaskRequest} request ReRunComponentTaskRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ComponentTasksAPI.ReRunComponentTaskCallback} callback Node-style callback called with the error, if any, and ComponentTaskDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ComponentTasksAPI.prototype.reRunComponentTask = function reRunComponentTask(request, callback) {
                    return this.rpcCall(reRunComponentTask, $root.colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest, $root.colbylwilliams.teamcloud.v1.ComponentTaskDataResult, request, callback);
                }, "name", { value: "ReRunComponentTask" });

                /**
                 * Calls ReRunComponentTask.
                 * @function reRunComponentTask
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTasksAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IReRunComponentTaskRequest} request ReRunComponentTaskRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ComponentTaskDataResult>} Promise
                 * @variation 2
                 */

                return ComponentTasksAPI;
            })();

            v1.CancelComponentTaskRequest = (function() {

                /**
                 * Properties of a CancelComponentTaskRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICancelComponentTaskRequest
                 * @property {string|null} [organizationId] CancelComponentTaskRequest organizationId
                 * @property {string|null} [projectId] CancelComponentTaskRequest projectId
                 * @property {string|null} [componentId] CancelComponentTaskRequest componentId
                 * @property {string|null} [taskId] CancelComponentTaskRequest taskId
                 */

                /**
                 * Constructs a new CancelComponentTaskRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CancelComponentTaskRequest.
                 * @implements ICancelComponentTaskRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICancelComponentTaskRequest=} [properties] Properties to set
                 */
                function CancelComponentTaskRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CancelComponentTaskRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CancelComponentTaskRequest
                 * @instance
                 */
                CancelComponentTaskRequest.prototype.organizationId = "";

                /**
                 * CancelComponentTaskRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.CancelComponentTaskRequest
                 * @instance
                 */
                CancelComponentTaskRequest.prototype.projectId = "";

                /**
                 * CancelComponentTaskRequest componentId.
                 * @member {string} componentId
                 * @memberof colbylwilliams.teamcloud.v1.CancelComponentTaskRequest
                 * @instance
                 */
                CancelComponentTaskRequest.prototype.componentId = "";

                /**
                 * CancelComponentTaskRequest taskId.
                 * @member {string} taskId
                 * @memberof colbylwilliams.teamcloud.v1.CancelComponentTaskRequest
                 * @instance
                 */
                CancelComponentTaskRequest.prototype.taskId = "";

                /**
                 * Verifies a CancelComponentTaskRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CancelComponentTaskRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CancelComponentTaskRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        if (!$util.isString(message.componentId))
                            return "componentId: string expected";
                    if (message.taskId != null && message.hasOwnProperty("taskId"))
                        if (!$util.isString(message.taskId))
                            return "taskId: string expected";
                    return null;
                };

                /**
                 * Creates a CancelComponentTaskRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CancelComponentTaskRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CancelComponentTaskRequest} CancelComponentTaskRequest
                 */
                CancelComponentTaskRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CancelComponentTaskRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CancelComponentTaskRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.componentId != null)
                        message.componentId = String(object.componentId);
                    if (object.taskId != null)
                        message.taskId = String(object.taskId);
                    return message;
                };

                /**
                 * Creates a plain object from a CancelComponentTaskRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CancelComponentTaskRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CancelComponentTaskRequest} message CancelComponentTaskRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CancelComponentTaskRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                        object.componentId = "";
                        object.taskId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        object.componentId = message.componentId;
                    if (message.taskId != null && message.hasOwnProperty("taskId"))
                        object.taskId = message.taskId;
                    return object;
                };

                /**
                 * Converts this CancelComponentTaskRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CancelComponentTaskRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CancelComponentTaskRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CancelComponentTaskRequest;
            })();

            v1.CreateComponentTaskRequest = (function() {

                /**
                 * Properties of a CreateComponentTaskRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICreateComponentTaskRequest
                 * @property {string|null} [organizationId] CreateComponentTaskRequest organizationId
                 * @property {string|null} [projectId] CreateComponentTaskRequest projectId
                 * @property {string|null} [componentId] CreateComponentTaskRequest componentId
                 * @property {colbylwilliams.teamcloud.v1.IComponentTaskDefinition|null} [componentTaskDefinition] CreateComponentTaskRequest componentTaskDefinition
                 */

                /**
                 * Constructs a new CreateComponentTaskRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CreateComponentTaskRequest.
                 * @implements ICreateComponentTaskRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICreateComponentTaskRequest=} [properties] Properties to set
                 */
                function CreateComponentTaskRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateComponentTaskRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentTaskRequest
                 * @instance
                 */
                CreateComponentTaskRequest.prototype.organizationId = "";

                /**
                 * CreateComponentTaskRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentTaskRequest
                 * @instance
                 */
                CreateComponentTaskRequest.prototype.projectId = "";

                /**
                 * CreateComponentTaskRequest componentId.
                 * @member {string} componentId
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentTaskRequest
                 * @instance
                 */
                CreateComponentTaskRequest.prototype.componentId = "";

                /**
                 * CreateComponentTaskRequest componentTaskDefinition.
                 * @member {colbylwilliams.teamcloud.v1.IComponentTaskDefinition|null|undefined} componentTaskDefinition
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentTaskRequest
                 * @instance
                 */
                CreateComponentTaskRequest.prototype.componentTaskDefinition = null;

                /**
                 * Verifies a CreateComponentTaskRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentTaskRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateComponentTaskRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        if (!$util.isString(message.componentId))
                            return "componentId: string expected";
                    if (message.componentTaskDefinition != null && message.hasOwnProperty("componentTaskDefinition")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ComponentTaskDefinition.verify(message.componentTaskDefinition);
                        if (error)
                            return "componentTaskDefinition." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CreateComponentTaskRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentTaskRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CreateComponentTaskRequest} CreateComponentTaskRequest
                 */
                CreateComponentTaskRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CreateComponentTaskRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CreateComponentTaskRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.componentId != null)
                        message.componentId = String(object.componentId);
                    if (object.componentTaskDefinition != null) {
                        if (typeof object.componentTaskDefinition !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.CreateComponentTaskRequest.componentTaskDefinition: object expected");
                        message.componentTaskDefinition = $root.colbylwilliams.teamcloud.v1.ComponentTaskDefinition.fromObject(object.componentTaskDefinition);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CreateComponentTaskRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentTaskRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CreateComponentTaskRequest} message CreateComponentTaskRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateComponentTaskRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                        object.componentId = "";
                        object.componentTaskDefinition = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        object.componentId = message.componentId;
                    if (message.componentTaskDefinition != null && message.hasOwnProperty("componentTaskDefinition"))
                        object.componentTaskDefinition = $root.colbylwilliams.teamcloud.v1.ComponentTaskDefinition.toObject(message.componentTaskDefinition, options);
                    return object;
                };

                /**
                 * Converts this CreateComponentTaskRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CreateComponentTaskRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateComponentTaskRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CreateComponentTaskRequest;
            })();

            v1.GetComponentTaskRequest = (function() {

                /**
                 * Properties of a GetComponentTaskRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetComponentTaskRequest
                 * @property {string|null} [taskId] GetComponentTaskRequest taskId
                 * @property {string|null} [organizationId] GetComponentTaskRequest organizationId
                 * @property {string|null} [projectId] GetComponentTaskRequest projectId
                 * @property {string|null} [componentId] GetComponentTaskRequest componentId
                 */

                /**
                 * Constructs a new GetComponentTaskRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetComponentTaskRequest.
                 * @implements IGetComponentTaskRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTaskRequest=} [properties] Properties to set
                 */
                function GetComponentTaskRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetComponentTaskRequest taskId.
                 * @member {string} taskId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTaskRequest
                 * @instance
                 */
                GetComponentTaskRequest.prototype.taskId = "";

                /**
                 * GetComponentTaskRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTaskRequest
                 * @instance
                 */
                GetComponentTaskRequest.prototype.organizationId = "";

                /**
                 * GetComponentTaskRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTaskRequest
                 * @instance
                 */
                GetComponentTaskRequest.prototype.projectId = "";

                /**
                 * GetComponentTaskRequest componentId.
                 * @member {string} componentId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTaskRequest
                 * @instance
                 */
                GetComponentTaskRequest.prototype.componentId = "";

                /**
                 * Verifies a GetComponentTaskRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTaskRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetComponentTaskRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.taskId != null && message.hasOwnProperty("taskId"))
                        if (!$util.isString(message.taskId))
                            return "taskId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        if (!$util.isString(message.componentId))
                            return "componentId: string expected";
                    return null;
                };

                /**
                 * Creates a GetComponentTaskRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTaskRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetComponentTaskRequest} GetComponentTaskRequest
                 */
                GetComponentTaskRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetComponentTaskRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetComponentTaskRequest();
                    if (object.taskId != null)
                        message.taskId = String(object.taskId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.componentId != null)
                        message.componentId = String(object.componentId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetComponentTaskRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTaskRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetComponentTaskRequest} message GetComponentTaskRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetComponentTaskRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.taskId = "";
                        object.organizationId = "";
                        object.projectId = "";
                        object.componentId = "";
                    }
                    if (message.taskId != null && message.hasOwnProperty("taskId"))
                        object.taskId = message.taskId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        object.componentId = message.componentId;
                    return object;
                };

                /**
                 * Converts this GetComponentTaskRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTaskRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetComponentTaskRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetComponentTaskRequest;
            })();

            v1.GetComponentTasksRequest = (function() {

                /**
                 * Properties of a GetComponentTasksRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetComponentTasksRequest
                 * @property {string|null} [organizationId] GetComponentTasksRequest organizationId
                 * @property {string|null} [projectId] GetComponentTasksRequest projectId
                 * @property {string|null} [componentId] GetComponentTasksRequest componentId
                 */

                /**
                 * Constructs a new GetComponentTasksRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetComponentTasksRequest.
                 * @implements IGetComponentTasksRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTasksRequest=} [properties] Properties to set
                 */
                function GetComponentTasksRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetComponentTasksRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTasksRequest
                 * @instance
                 */
                GetComponentTasksRequest.prototype.organizationId = "";

                /**
                 * GetComponentTasksRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTasksRequest
                 * @instance
                 */
                GetComponentTasksRequest.prototype.projectId = "";

                /**
                 * GetComponentTasksRequest componentId.
                 * @member {string} componentId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTasksRequest
                 * @instance
                 */
                GetComponentTasksRequest.prototype.componentId = "";

                /**
                 * Verifies a GetComponentTasksRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTasksRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetComponentTasksRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        if (!$util.isString(message.componentId))
                            return "componentId: string expected";
                    return null;
                };

                /**
                 * Creates a GetComponentTasksRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTasksRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetComponentTasksRequest} GetComponentTasksRequest
                 */
                GetComponentTasksRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetComponentTasksRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetComponentTasksRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.componentId != null)
                        message.componentId = String(object.componentId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetComponentTasksRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTasksRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetComponentTasksRequest} message GetComponentTasksRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetComponentTasksRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                        object.componentId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        object.componentId = message.componentId;
                    return object;
                };

                /**
                 * Converts this GetComponentTasksRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTasksRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetComponentTasksRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetComponentTasksRequest;
            })();

            v1.ReRunComponentTaskRequest = (function() {

                /**
                 * Properties of a ReRunComponentTaskRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IReRunComponentTaskRequest
                 * @property {string|null} [organizationId] ReRunComponentTaskRequest organizationId
                 * @property {string|null} [projectId] ReRunComponentTaskRequest projectId
                 * @property {string|null} [componentId] ReRunComponentTaskRequest componentId
                 * @property {string|null} [taskId] ReRunComponentTaskRequest taskId
                 */

                /**
                 * Constructs a new ReRunComponentTaskRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ReRunComponentTaskRequest.
                 * @implements IReRunComponentTaskRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IReRunComponentTaskRequest=} [properties] Properties to set
                 */
                function ReRunComponentTaskRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReRunComponentTaskRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest
                 * @instance
                 */
                ReRunComponentTaskRequest.prototype.organizationId = "";

                /**
                 * ReRunComponentTaskRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest
                 * @instance
                 */
                ReRunComponentTaskRequest.prototype.projectId = "";

                /**
                 * ReRunComponentTaskRequest componentId.
                 * @member {string} componentId
                 * @memberof colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest
                 * @instance
                 */
                ReRunComponentTaskRequest.prototype.componentId = "";

                /**
                 * ReRunComponentTaskRequest taskId.
                 * @member {string} taskId
                 * @memberof colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest
                 * @instance
                 */
                ReRunComponentTaskRequest.prototype.taskId = "";

                /**
                 * Verifies a ReRunComponentTaskRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReRunComponentTaskRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        if (!$util.isString(message.componentId))
                            return "componentId: string expected";
                    if (message.taskId != null && message.hasOwnProperty("taskId"))
                        if (!$util.isString(message.taskId))
                            return "taskId: string expected";
                    return null;
                };

                /**
                 * Creates a ReRunComponentTaskRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest} ReRunComponentTaskRequest
                 */
                ReRunComponentTaskRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.componentId != null)
                        message.componentId = String(object.componentId);
                    if (object.taskId != null)
                        message.taskId = String(object.taskId);
                    return message;
                };

                /**
                 * Creates a plain object from a ReRunComponentTaskRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest} message ReRunComponentTaskRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReRunComponentTaskRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                        object.componentId = "";
                        object.taskId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.componentId != null && message.hasOwnProperty("componentId"))
                        object.componentId = message.componentId;
                    if (message.taskId != null && message.hasOwnProperty("taskId"))
                        object.taskId = message.taskId;
                    return object;
                };

                /**
                 * Converts this ReRunComponentTaskRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ReRunComponentTaskRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReRunComponentTaskRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReRunComponentTaskRequest;
            })();

            v1.ComponentTaskTemplate = (function() {

                /**
                 * Properties of a ComponentTaskTemplate.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentTaskTemplate
                 * @property {string|null} [id] ComponentTaskTemplate id
                 * @property {string|null} [displayName] ComponentTaskTemplate displayName
                 * @property {string|null} [description] ComponentTaskTemplate description
                 * @property {string|null} [inputJsonSchema] ComponentTaskTemplate inputJsonSchema
                 * @property {colbylwilliams.teamcloud.v1.ComponentTaskTemplate.TypeEnum|null} [type] ComponentTaskTemplate type
                 * @property {string|null} [typeName] ComponentTaskTemplate typeName
                 */

                /**
                 * Constructs a new ComponentTaskTemplate.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTaskTemplate.
                 * @implements IComponentTaskTemplate
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentTaskTemplate=} [properties] Properties to set
                 */
                function ComponentTaskTemplate(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentTaskTemplate id.
                 * @member {string|null|undefined} id
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 */
                ComponentTaskTemplate.prototype.id = null;

                /**
                 * ComponentTaskTemplate displayName.
                 * @member {string|null|undefined} displayName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 */
                ComponentTaskTemplate.prototype.displayName = null;

                /**
                 * ComponentTaskTemplate description.
                 * @member {string|null|undefined} description
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 */
                ComponentTaskTemplate.prototype.description = null;

                /**
                 * ComponentTaskTemplate inputJsonSchema.
                 * @member {string|null|undefined} inputJsonSchema
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 */
                ComponentTaskTemplate.prototype.inputJsonSchema = null;

                /**
                 * ComponentTaskTemplate type.
                 * @member {colbylwilliams.teamcloud.v1.ComponentTaskTemplate.TypeEnum} type
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 */
                ComponentTaskTemplate.prototype.type = 0;

                /**
                 * ComponentTaskTemplate typeName.
                 * @member {string|null|undefined} typeName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 */
                ComponentTaskTemplate.prototype.typeName = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentTaskTemplate _id.
                 * @member {"id"|undefined} _id
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 */
                Object.defineProperty(ComponentTaskTemplate.prototype, "_id", {
                    get: $util.oneOfGetter($oneOfFields = ["id"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTaskTemplate _displayName.
                 * @member {"displayName"|undefined} _displayName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 */
                Object.defineProperty(ComponentTaskTemplate.prototype, "_displayName", {
                    get: $util.oneOfGetter($oneOfFields = ["displayName"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTaskTemplate _description.
                 * @member {"description"|undefined} _description
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 */
                Object.defineProperty(ComponentTaskTemplate.prototype, "_description", {
                    get: $util.oneOfGetter($oneOfFields = ["description"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTaskTemplate _inputJsonSchema.
                 * @member {"inputJsonSchema"|undefined} _inputJsonSchema
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 */
                Object.defineProperty(ComponentTaskTemplate.prototype, "_inputJsonSchema", {
                    get: $util.oneOfGetter($oneOfFields = ["inputJsonSchema"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTaskTemplate _typeName.
                 * @member {"typeName"|undefined} _typeName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 */
                Object.defineProperty(ComponentTaskTemplate.prototype, "_typeName", {
                    get: $util.oneOfGetter($oneOfFields = ["typeName"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentTaskTemplate message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentTaskTemplate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.id != null && message.hasOwnProperty("id")) {
                        properties._id = 1;
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName")) {
                        properties._displayName = 1;
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    }
                    if (message.description != null && message.hasOwnProperty("description")) {
                        properties._description = 1;
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    }
                    if (message.inputJsonSchema != null && message.hasOwnProperty("inputJsonSchema")) {
                        properties._inputJsonSchema = 1;
                        if (!$util.isString(message.inputJsonSchema))
                            return "inputJsonSchema: string expected";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName")) {
                        properties._typeName = 1;
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentTaskTemplate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentTaskTemplate} ComponentTaskTemplate
                 */
                ComponentTaskTemplate.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentTaskTemplate)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentTaskTemplate();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.inputJsonSchema != null)
                        message.inputJsonSchema = String(object.inputJsonSchema);
                    switch (object.type) {
                    case "CUSTOM":
                    case 0:
                        message.type = 0;
                        break;
                    case "CREATE":
                    case 1:
                        message.type = 1;
                        break;
                    case "DELETE":
                    case 2:
                        message.type = 2;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentTaskTemplate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentTaskTemplate} message ComponentTaskTemplate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentTaskTemplate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.type = options.enums === String ? "CUSTOM" : 0;
                    if (message.id != null && message.hasOwnProperty("id")) {
                        object.id = message.id;
                        if (options.oneofs)
                            object._id = "id";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.colbylwilliams.teamcloud.v1.ComponentTaskTemplate.TypeEnum[message.type] : message.type;
                    if (message.displayName != null && message.hasOwnProperty("displayName")) {
                        object.displayName = message.displayName;
                        if (options.oneofs)
                            object._displayName = "displayName";
                    }
                    if (message.description != null && message.hasOwnProperty("description")) {
                        object.description = message.description;
                        if (options.oneofs)
                            object._description = "description";
                    }
                    if (message.typeName != null && message.hasOwnProperty("typeName")) {
                        object.typeName = message.typeName;
                        if (options.oneofs)
                            object._typeName = "typeName";
                    }
                    if (message.inputJsonSchema != null && message.hasOwnProperty("inputJsonSchema")) {
                        object.inputJsonSchema = message.inputJsonSchema;
                        if (options.oneofs)
                            object._inputJsonSchema = "inputJsonSchema";
                    }
                    return object;
                };

                /**
                 * Converts this ComponentTaskTemplate to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTaskTemplate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentTaskTemplate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * TypeEnum enum.
                 * @name colbylwilliams.teamcloud.v1.ComponentTaskTemplate.TypeEnum
                 * @enum {number}
                 * @property {number} CUSTOM=0 CUSTOM value
                 * @property {number} CREATE=1 CREATE value
                 * @property {number} DELETE=2 DELETE value
                 */
                ComponentTaskTemplate.TypeEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "CUSTOM"] = 0;
                    values[valuesById[1] = "CREATE"] = 1;
                    values[valuesById[2] = "DELETE"] = 2;
                    return values;
                })();

                return ComponentTaskTemplate;
            })();

            v1.ComponentTemplateDataResult = (function() {

                /**
                 * Properties of a ComponentTemplateDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentTemplateDataResult
                 * @property {number|null} [code] ComponentTemplateDataResult code
                 * @property {string|null} [status] ComponentTemplateDataResult status
                 * @property {colbylwilliams.teamcloud.v1.IComponentTemplate|null} [data] ComponentTemplateDataResult data
                 * @property {string|null} [location] ComponentTemplateDataResult location
                 */

                /**
                 * Constructs a new ComponentTemplateDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTemplateDataResult.
                 * @implements IComponentTemplateDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentTemplateDataResult=} [properties] Properties to set
                 */
                function ComponentTemplateDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentTemplateDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateDataResult
                 * @instance
                 */
                ComponentTemplateDataResult.prototype.code = 0;

                /**
                 * ComponentTemplateDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateDataResult
                 * @instance
                 */
                ComponentTemplateDataResult.prototype.status = null;

                /**
                 * ComponentTemplateDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.IComponentTemplate|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateDataResult
                 * @instance
                 */
                ComponentTemplateDataResult.prototype.data = null;

                /**
                 * ComponentTemplateDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateDataResult
                 * @instance
                 */
                ComponentTemplateDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentTemplateDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentTemplateDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTemplateDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentTemplateDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentTemplateDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentTemplateDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ComponentTemplate.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentTemplateDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentTemplateDataResult} ComponentTemplateDataResult
                 */
                ComponentTemplateDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentTemplateDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentTemplateDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplateDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.ComponentTemplate.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentTemplateDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentTemplateDataResult} message ComponentTemplateDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentTemplateDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.ComponentTemplate.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ComponentTemplateDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentTemplateDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ComponentTemplateDataResult;
            })();

            v1.ComponentTemplate = (function() {

                /**
                 * Properties of a ComponentTemplate.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentTemplate
                 * @property {string|null} [organization] ComponentTemplate organization
                 * @property {string|null} [organizationName] ComponentTemplate organizationName
                 * @property {string|null} [parentId] ComponentTemplate parentId
                 * @property {string|null} [displayName] ComponentTemplate displayName
                 * @property {string|null} [description] ComponentTemplate description
                 * @property {colbylwilliams.teamcloud.v1.IRepositoryReference|null} [repository] ComponentTemplate repository
                 * @property {colbylwilliams.teamcloud.v1.IComponentTemplatePermissions|null} [permissions] ComponentTemplate permissions
                 * @property {string|null} [inputJsonSchema] ComponentTemplate inputJsonSchema
                 * @property {Array.<colbylwilliams.teamcloud.v1.IComponentTaskTemplate>|null} [tasks] ComponentTemplate tasks
                 * @property {colbylwilliams.teamcloud.v1.IComponentTaskRunner|null} [taskRunner] ComponentTemplate taskRunner
                 * @property {colbylwilliams.teamcloud.v1.ComponentTemplate.TypeEnum|null} [type] ComponentTemplate type
                 * @property {string|null} [folder] ComponentTemplate folder
                 * @property {string|null} [configuration] ComponentTemplate configuration
                 * @property {string|null} [id] ComponentTemplate id
                 */

                /**
                 * Constructs a new ComponentTemplate.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTemplate.
                 * @implements IComponentTemplate
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentTemplate=} [properties] Properties to set
                 */
                function ComponentTemplate(properties) {
                    this.tasks = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentTemplate organization.
                 * @member {string} organization
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.organization = "";

                /**
                 * ComponentTemplate organizationName.
                 * @member {string} organizationName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.organizationName = "";

                /**
                 * ComponentTemplate parentId.
                 * @member {string} parentId
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.parentId = "";

                /**
                 * ComponentTemplate displayName.
                 * @member {string|null|undefined} displayName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.displayName = null;

                /**
                 * ComponentTemplate description.
                 * @member {string|null|undefined} description
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.description = null;

                /**
                 * ComponentTemplate repository.
                 * @member {colbylwilliams.teamcloud.v1.IRepositoryReference|null|undefined} repository
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.repository = null;

                /**
                 * ComponentTemplate permissions.
                 * @member {colbylwilliams.teamcloud.v1.IComponentTemplatePermissions|null|undefined} permissions
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.permissions = null;

                /**
                 * ComponentTemplate inputJsonSchema.
                 * @member {string|null|undefined} inputJsonSchema
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.inputJsonSchema = null;

                /**
                 * ComponentTemplate tasks.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IComponentTaskTemplate>} tasks
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.tasks = $util.emptyArray;

                /**
                 * ComponentTemplate taskRunner.
                 * @member {colbylwilliams.teamcloud.v1.IComponentTaskRunner|null|undefined} taskRunner
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.taskRunner = null;

                /**
                 * ComponentTemplate type.
                 * @member {colbylwilliams.teamcloud.v1.ComponentTemplate.TypeEnum} type
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.type = 0;

                /**
                 * ComponentTemplate folder.
                 * @member {string|null|undefined} folder
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.folder = null;

                /**
                 * ComponentTemplate configuration.
                 * @member {string|null|undefined} configuration
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.configuration = null;

                /**
                 * ComponentTemplate id.
                 * @member {string} id
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                ComponentTemplate.prototype.id = "";

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentTemplate _displayName.
                 * @member {"displayName"|undefined} _displayName
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                Object.defineProperty(ComponentTemplate.prototype, "_displayName", {
                    get: $util.oneOfGetter($oneOfFields = ["displayName"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTemplate _description.
                 * @member {"description"|undefined} _description
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                Object.defineProperty(ComponentTemplate.prototype, "_description", {
                    get: $util.oneOfGetter($oneOfFields = ["description"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTemplate _inputJsonSchema.
                 * @member {"inputJsonSchema"|undefined} _inputJsonSchema
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                Object.defineProperty(ComponentTemplate.prototype, "_inputJsonSchema", {
                    get: $util.oneOfGetter($oneOfFields = ["inputJsonSchema"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTemplate _folder.
                 * @member {"folder"|undefined} _folder
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                Object.defineProperty(ComponentTemplate.prototype, "_folder", {
                    get: $util.oneOfGetter($oneOfFields = ["folder"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTemplate _configuration.
                 * @member {"configuration"|undefined} _configuration
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 */
                Object.defineProperty(ComponentTemplate.prototype, "_configuration", {
                    get: $util.oneOfGetter($oneOfFields = ["configuration"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentTemplate message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentTemplate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        if (!$util.isString(message.organization))
                            return "organization: string expected";
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        if (!$util.isString(message.organizationName))
                            return "organizationName: string expected";
                    if (message.parentId != null && message.hasOwnProperty("parentId"))
                        if (!$util.isString(message.parentId))
                            return "parentId: string expected";
                    if (message.displayName != null && message.hasOwnProperty("displayName")) {
                        properties._displayName = 1;
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    }
                    if (message.description != null && message.hasOwnProperty("description")) {
                        properties._description = 1;
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    }
                    if (message.repository != null && message.hasOwnProperty("repository")) {
                        let error = $root.colbylwilliams.teamcloud.v1.RepositoryReference.verify(message.repository);
                        if (error)
                            return "repository." + error;
                    }
                    if (message.permissions != null && message.hasOwnProperty("permissions")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ComponentTemplatePermissions.verify(message.permissions);
                        if (error)
                            return "permissions." + error;
                    }
                    if (message.inputJsonSchema != null && message.hasOwnProperty("inputJsonSchema")) {
                        properties._inputJsonSchema = 1;
                        if (!$util.isString(message.inputJsonSchema))
                            return "inputJsonSchema: string expected";
                    }
                    if (message.tasks != null && message.hasOwnProperty("tasks")) {
                        if (!Array.isArray(message.tasks))
                            return "tasks: array expected";
                        for (let i = 0; i < message.tasks.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.ComponentTaskTemplate.verify(message.tasks[i]);
                            if (error)
                                return "tasks." + error;
                        }
                    }
                    if (message.taskRunner != null && message.hasOwnProperty("taskRunner")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ComponentTaskRunner.verify(message.taskRunner);
                        if (error)
                            return "taskRunner." + error;
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.folder != null && message.hasOwnProperty("folder")) {
                        properties._folder = 1;
                        if (!$util.isString(message.folder))
                            return "folder: string expected";
                    }
                    if (message.configuration != null && message.hasOwnProperty("configuration")) {
                        properties._configuration = 1;
                        if (!$util.isString(message.configuration))
                            return "configuration: string expected";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    return null;
                };

                /**
                 * Creates a ComponentTemplate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentTemplate} ComponentTemplate
                 */
                ComponentTemplate.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentTemplate)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentTemplate();
                    if (object.organization != null)
                        message.organization = String(object.organization);
                    if (object.organizationName != null)
                        message.organizationName = String(object.organizationName);
                    if (object.parentId != null)
                        message.parentId = String(object.parentId);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.repository != null) {
                        if (typeof object.repository !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplate.repository: object expected");
                        message.repository = $root.colbylwilliams.teamcloud.v1.RepositoryReference.fromObject(object.repository);
                    }
                    if (object.permissions != null) {
                        if (typeof object.permissions !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplate.permissions: object expected");
                        message.permissions = $root.colbylwilliams.teamcloud.v1.ComponentTemplatePermissions.fromObject(object.permissions);
                    }
                    if (object.inputJsonSchema != null)
                        message.inputJsonSchema = String(object.inputJsonSchema);
                    if (object.tasks) {
                        if (!Array.isArray(object.tasks))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplate.tasks: array expected");
                        message.tasks = [];
                        for (let i = 0; i < object.tasks.length; ++i) {
                            if (typeof object.tasks[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplate.tasks: object expected");
                            message.tasks[i] = $root.colbylwilliams.teamcloud.v1.ComponentTaskTemplate.fromObject(object.tasks[i]);
                        }
                    }
                    if (object.taskRunner != null) {
                        if (typeof object.taskRunner !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplate.taskRunner: object expected");
                        message.taskRunner = $root.colbylwilliams.teamcloud.v1.ComponentTaskRunner.fromObject(object.taskRunner);
                    }
                    switch (object.type) {
                    case "ENVIRONMENT":
                    case 0:
                        message.type = 0;
                        break;
                    case "REPOSITORY":
                    case 1:
                        message.type = 1;
                        break;
                    case "NAMESPACE":
                    case 2:
                        message.type = 2;
                        break;
                    }
                    if (object.folder != null)
                        message.folder = String(object.folder);
                    if (object.configuration != null)
                        message.configuration = String(object.configuration);
                    if (object.id != null)
                        message.id = String(object.id);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentTemplate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentTemplate} message ComponentTemplate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentTemplate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.tasks = [];
                    if (options.defaults) {
                        object.id = "";
                        object.type = options.enums === String ? "ENVIRONMENT" : 0;
                        object.permissions = null;
                        object.parentId = "";
                        object.organization = "";
                        object.organizationName = "";
                        object.repository = null;
                        object.taskRunner = null;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.colbylwilliams.teamcloud.v1.ComponentTemplate.TypeEnum[message.type] : message.type;
                    if (message.permissions != null && message.hasOwnProperty("permissions"))
                        object.permissions = $root.colbylwilliams.teamcloud.v1.ComponentTemplatePermissions.toObject(message.permissions, options);
                    if (message.parentId != null && message.hasOwnProperty("parentId"))
                        object.parentId = message.parentId;
                    if (message.displayName != null && message.hasOwnProperty("displayName")) {
                        object.displayName = message.displayName;
                        if (options.oneofs)
                            object._displayName = "displayName";
                    }
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = message.organization;
                    if (message.tasks && message.tasks.length) {
                        object.tasks = [];
                        for (let j = 0; j < message.tasks.length; ++j)
                            object.tasks[j] = $root.colbylwilliams.teamcloud.v1.ComponentTaskTemplate.toObject(message.tasks[j], options);
                    }
                    if (message.description != null && message.hasOwnProperty("description")) {
                        object.description = message.description;
                        if (options.oneofs)
                            object._description = "description";
                    }
                    if (message.folder != null && message.hasOwnProperty("folder")) {
                        object.folder = message.folder;
                        if (options.oneofs)
                            object._folder = "folder";
                    }
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        object.organizationName = message.organizationName;
                    if (message.inputJsonSchema != null && message.hasOwnProperty("inputJsonSchema")) {
                        object.inputJsonSchema = message.inputJsonSchema;
                        if (options.oneofs)
                            object._inputJsonSchema = "inputJsonSchema";
                    }
                    if (message.configuration != null && message.hasOwnProperty("configuration")) {
                        object.configuration = message.configuration;
                        if (options.oneofs)
                            object._configuration = "configuration";
                    }
                    if (message.repository != null && message.hasOwnProperty("repository"))
                        object.repository = $root.colbylwilliams.teamcloud.v1.RepositoryReference.toObject(message.repository, options);
                    if (message.taskRunner != null && message.hasOwnProperty("taskRunner"))
                        object.taskRunner = $root.colbylwilliams.teamcloud.v1.ComponentTaskRunner.toObject(message.taskRunner, options);
                    return object;
                };

                /**
                 * Converts this ComponentTemplate to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentTemplate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * TypeEnum enum.
                 * @name colbylwilliams.teamcloud.v1.ComponentTemplate.TypeEnum
                 * @enum {number}
                 * @property {number} ENVIRONMENT=0 ENVIRONMENT value
                 * @property {number} REPOSITORY=1 REPOSITORY value
                 * @property {number} NAMESPACE=2 NAMESPACE value
                 */
                ComponentTemplate.TypeEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ENVIRONMENT"] = 0;
                    values[valuesById[1] = "REPOSITORY"] = 1;
                    values[valuesById[2] = "NAMESPACE"] = 2;
                    return values;
                })();

                return ComponentTemplate;
            })();

            v1.ComponentTemplatePermissions = (function() {

                /**
                 * Properties of a ComponentTemplatePermissions.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentTemplatePermissions
                 * @property {Array.<string>|null} [None] ComponentTemplatePermissions None
                 * @property {Array.<string>|null} [Member] ComponentTemplatePermissions Member
                 * @property {Array.<string>|null} [Admin] ComponentTemplatePermissions Admin
                 * @property {Array.<string>|null} [Owner] ComponentTemplatePermissions Owner
                 * @property {Array.<string>|null} [Adapter] ComponentTemplatePermissions Adapter
                 */

                /**
                 * Constructs a new ComponentTemplatePermissions.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTemplatePermissions.
                 * @implements IComponentTemplatePermissions
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentTemplatePermissions=} [properties] Properties to set
                 */
                function ComponentTemplatePermissions(properties) {
                    this.None = [];
                    this.Member = [];
                    this.Admin = [];
                    this.Owner = [];
                    this.Adapter = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentTemplatePermissions None.
                 * @member {Array.<string>} None
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatePermissions
                 * @instance
                 */
                ComponentTemplatePermissions.prototype.None = $util.emptyArray;

                /**
                 * ComponentTemplatePermissions Member.
                 * @member {Array.<string>} Member
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatePermissions
                 * @instance
                 */
                ComponentTemplatePermissions.prototype.Member = $util.emptyArray;

                /**
                 * ComponentTemplatePermissions Admin.
                 * @member {Array.<string>} Admin
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatePermissions
                 * @instance
                 */
                ComponentTemplatePermissions.prototype.Admin = $util.emptyArray;

                /**
                 * ComponentTemplatePermissions Owner.
                 * @member {Array.<string>} Owner
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatePermissions
                 * @instance
                 */
                ComponentTemplatePermissions.prototype.Owner = $util.emptyArray;

                /**
                 * ComponentTemplatePermissions Adapter.
                 * @member {Array.<string>} Adapter
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatePermissions
                 * @instance
                 */
                ComponentTemplatePermissions.prototype.Adapter = $util.emptyArray;

                /**
                 * Verifies a ComponentTemplatePermissions message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatePermissions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentTemplatePermissions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.None != null && message.hasOwnProperty("None")) {
                        if (!Array.isArray(message.None))
                            return "None: array expected";
                        for (let i = 0; i < message.None.length; ++i)
                            if (!$util.isString(message.None[i]))
                                return "None: string[] expected";
                    }
                    if (message.Member != null && message.hasOwnProperty("Member")) {
                        if (!Array.isArray(message.Member))
                            return "Member: array expected";
                        for (let i = 0; i < message.Member.length; ++i)
                            if (!$util.isString(message.Member[i]))
                                return "Member: string[] expected";
                    }
                    if (message.Admin != null && message.hasOwnProperty("Admin")) {
                        if (!Array.isArray(message.Admin))
                            return "Admin: array expected";
                        for (let i = 0; i < message.Admin.length; ++i)
                            if (!$util.isString(message.Admin[i]))
                                return "Admin: string[] expected";
                    }
                    if (message.Owner != null && message.hasOwnProperty("Owner")) {
                        if (!Array.isArray(message.Owner))
                            return "Owner: array expected";
                        for (let i = 0; i < message.Owner.length; ++i)
                            if (!$util.isString(message.Owner[i]))
                                return "Owner: string[] expected";
                    }
                    if (message.Adapter != null && message.hasOwnProperty("Adapter")) {
                        if (!Array.isArray(message.Adapter))
                            return "Adapter: array expected";
                        for (let i = 0; i < message.Adapter.length; ++i)
                            if (!$util.isString(message.Adapter[i]))
                                return "Adapter: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentTemplatePermissions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatePermissions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentTemplatePermissions} ComponentTemplatePermissions
                 */
                ComponentTemplatePermissions.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentTemplatePermissions)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentTemplatePermissions();
                    if (object.None) {
                        if (!Array.isArray(object.None))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplatePermissions.None: array expected");
                        message.None = [];
                        for (let i = 0; i < object.None.length; ++i)
                            message.None[i] = String(object.None[i]);
                    }
                    if (object.Member) {
                        if (!Array.isArray(object.Member))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplatePermissions.Member: array expected");
                        message.Member = [];
                        for (let i = 0; i < object.Member.length; ++i)
                            message.Member[i] = String(object.Member[i]);
                    }
                    if (object.Admin) {
                        if (!Array.isArray(object.Admin))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplatePermissions.Admin: array expected");
                        message.Admin = [];
                        for (let i = 0; i < object.Admin.length; ++i)
                            message.Admin[i] = String(object.Admin[i]);
                    }
                    if (object.Owner) {
                        if (!Array.isArray(object.Owner))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplatePermissions.Owner: array expected");
                        message.Owner = [];
                        for (let i = 0; i < object.Owner.length; ++i)
                            message.Owner[i] = String(object.Owner[i]);
                    }
                    if (object.Adapter) {
                        if (!Array.isArray(object.Adapter))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplatePermissions.Adapter: array expected");
                        message.Adapter = [];
                        for (let i = 0; i < object.Adapter.length; ++i)
                            message.Adapter[i] = String(object.Adapter[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentTemplatePermissions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatePermissions
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentTemplatePermissions} message ComponentTemplatePermissions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentTemplatePermissions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.None = [];
                        object.Admin = [];
                        object.Owner = [];
                        object.Member = [];
                        object.Adapter = [];
                    }
                    if (message.None && message.None.length) {
                        object.None = [];
                        for (let j = 0; j < message.None.length; ++j)
                            object.None[j] = message.None[j];
                    }
                    if (message.Admin && message.Admin.length) {
                        object.Admin = [];
                        for (let j = 0; j < message.Admin.length; ++j)
                            object.Admin[j] = message.Admin[j];
                    }
                    if (message.Owner && message.Owner.length) {
                        object.Owner = [];
                        for (let j = 0; j < message.Owner.length; ++j)
                            object.Owner[j] = message.Owner[j];
                    }
                    if (message.Member && message.Member.length) {
                        object.Member = [];
                        for (let j = 0; j < message.Member.length; ++j)
                            object.Member[j] = message.Member[j];
                    }
                    if (message.Adapter && message.Adapter.length) {
                        object.Adapter = [];
                        for (let j = 0; j < message.Adapter.length; ++j)
                            object.Adapter[j] = message.Adapter[j];
                    }
                    return object;
                };

                /**
                 * Converts this ComponentTemplatePermissions to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatePermissions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentTemplatePermissions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ComponentTemplatePermissions;
            })();

            v1.RepositoryReference = (function() {

                /**
                 * Properties of a RepositoryReference.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IRepositoryReference
                 * @property {string|null} [url] RepositoryReference url
                 * @property {string|null} [token] RepositoryReference token
                 * @property {string|null} [version] RepositoryReference version
                 * @property {string|null} [baselUrl] RepositoryReference baselUrl
                 * @property {string|null} [mountUrl] RepositoryReference mountUrl
                 * @property {string|null} [ref] RepositoryReference ref
                 * @property {colbylwilliams.teamcloud.v1.RepositoryReference.ProviderEnum|null} [provider] RepositoryReference provider
                 * @property {colbylwilliams.teamcloud.v1.RepositoryReference.TypeEnum|null} [type] RepositoryReference type
                 * @property {string|null} [organization] RepositoryReference organization
                 * @property {string|null} [repository] RepositoryReference repository
                 * @property {string|null} [project] RepositoryReference project
                 */

                /**
                 * Constructs a new RepositoryReference.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a RepositoryReference.
                 * @implements IRepositoryReference
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IRepositoryReference=} [properties] Properties to set
                 */
                function RepositoryReference(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RepositoryReference url.
                 * @member {string} url
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                RepositoryReference.prototype.url = "";

                /**
                 * RepositoryReference token.
                 * @member {string|null|undefined} token
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                RepositoryReference.prototype.token = null;

                /**
                 * RepositoryReference version.
                 * @member {string|null|undefined} version
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                RepositoryReference.prototype.version = null;

                /**
                 * RepositoryReference baselUrl.
                 * @member {string|null|undefined} baselUrl
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                RepositoryReference.prototype.baselUrl = null;

                /**
                 * RepositoryReference mountUrl.
                 * @member {string|null|undefined} mountUrl
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                RepositoryReference.prototype.mountUrl = null;

                /**
                 * RepositoryReference ref.
                 * @member {string|null|undefined} ref
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                RepositoryReference.prototype.ref = null;

                /**
                 * RepositoryReference provider.
                 * @member {colbylwilliams.teamcloud.v1.RepositoryReference.ProviderEnum} provider
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                RepositoryReference.prototype.provider = 0;

                /**
                 * RepositoryReference type.
                 * @member {colbylwilliams.teamcloud.v1.RepositoryReference.TypeEnum} type
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                RepositoryReference.prototype.type = 0;

                /**
                 * RepositoryReference organization.
                 * @member {string|null|undefined} organization
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                RepositoryReference.prototype.organization = null;

                /**
                 * RepositoryReference repository.
                 * @member {string|null|undefined} repository
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                RepositoryReference.prototype.repository = null;

                /**
                 * RepositoryReference project.
                 * @member {string|null|undefined} project
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                RepositoryReference.prototype.project = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * RepositoryReference _token.
                 * @member {"token"|undefined} _token
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                Object.defineProperty(RepositoryReference.prototype, "_token", {
                    get: $util.oneOfGetter($oneOfFields = ["token"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * RepositoryReference _version.
                 * @member {"version"|undefined} _version
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                Object.defineProperty(RepositoryReference.prototype, "_version", {
                    get: $util.oneOfGetter($oneOfFields = ["version"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * RepositoryReference _baselUrl.
                 * @member {"baselUrl"|undefined} _baselUrl
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                Object.defineProperty(RepositoryReference.prototype, "_baselUrl", {
                    get: $util.oneOfGetter($oneOfFields = ["baselUrl"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * RepositoryReference _mountUrl.
                 * @member {"mountUrl"|undefined} _mountUrl
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                Object.defineProperty(RepositoryReference.prototype, "_mountUrl", {
                    get: $util.oneOfGetter($oneOfFields = ["mountUrl"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * RepositoryReference _ref.
                 * @member {"ref"|undefined} _ref
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                Object.defineProperty(RepositoryReference.prototype, "_ref", {
                    get: $util.oneOfGetter($oneOfFields = ["ref"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * RepositoryReference _organization.
                 * @member {"organization"|undefined} _organization
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                Object.defineProperty(RepositoryReference.prototype, "_organization", {
                    get: $util.oneOfGetter($oneOfFields = ["organization"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * RepositoryReference _repository.
                 * @member {"repository"|undefined} _repository
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                Object.defineProperty(RepositoryReference.prototype, "_repository", {
                    get: $util.oneOfGetter($oneOfFields = ["repository"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * RepositoryReference _project.
                 * @member {"project"|undefined} _project
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 */
                Object.defineProperty(RepositoryReference.prototype, "_project", {
                    get: $util.oneOfGetter($oneOfFields = ["project"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a RepositoryReference message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RepositoryReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.url != null && message.hasOwnProperty("url"))
                        if (!$util.isString(message.url))
                            return "url: string expected";
                    if (message.token != null && message.hasOwnProperty("token")) {
                        properties._token = 1;
                        if (!$util.isString(message.token))
                            return "token: string expected";
                    }
                    if (message.version != null && message.hasOwnProperty("version")) {
                        properties._version = 1;
                        if (!$util.isString(message.version))
                            return "version: string expected";
                    }
                    if (message.baselUrl != null && message.hasOwnProperty("baselUrl")) {
                        properties._baselUrl = 1;
                        if (!$util.isString(message.baselUrl))
                            return "baselUrl: string expected";
                    }
                    if (message.mountUrl != null && message.hasOwnProperty("mountUrl")) {
                        properties._mountUrl = 1;
                        if (!$util.isString(message.mountUrl))
                            return "mountUrl: string expected";
                    }
                    if (message.ref != null && message.hasOwnProperty("ref")) {
                        properties._ref = 1;
                        if (!$util.isString(message.ref))
                            return "ref: string expected";
                    }
                    if (message.provider != null && message.hasOwnProperty("provider"))
                        switch (message.provider) {
                        default:
                            return "provider: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.organization != null && message.hasOwnProperty("organization")) {
                        properties._organization = 1;
                        if (!$util.isString(message.organization))
                            return "organization: string expected";
                    }
                    if (message.repository != null && message.hasOwnProperty("repository")) {
                        properties._repository = 1;
                        if (!$util.isString(message.repository))
                            return "repository: string expected";
                    }
                    if (message.project != null && message.hasOwnProperty("project")) {
                        properties._project = 1;
                        if (!$util.isString(message.project))
                            return "project: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a RepositoryReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.RepositoryReference} RepositoryReference
                 */
                RepositoryReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.RepositoryReference)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.RepositoryReference();
                    if (object.url != null)
                        message.url = String(object.url);
                    if (object.token != null)
                        message.token = String(object.token);
                    if (object.version != null)
                        message.version = String(object.version);
                    if (object.baselUrl != null)
                        message.baselUrl = String(object.baselUrl);
                    if (object.mountUrl != null)
                        message.mountUrl = String(object.mountUrl);
                    if (object.ref != null)
                        message.ref = String(object.ref);
                    switch (object.provider) {
                    case "UNKNOWN":
                    case 0:
                        message.provider = 0;
                        break;
                    case "GITHUB":
                    case 1:
                        message.provider = 1;
                        break;
                    case "DEVOPS":
                    case 2:
                        message.provider = 2;
                        break;
                    }
                    switch (object.type) {
                    case "UNDEFINED":
                    case 0:
                        message.type = 0;
                        break;
                    case "TAG":
                    case 1:
                        message.type = 1;
                        break;
                    case "BRANCH":
                    case 2:
                        message.type = 2;
                        break;
                    case "HASH":
                    case 3:
                        message.type = 3;
                        break;
                    }
                    if (object.organization != null)
                        message.organization = String(object.organization);
                    if (object.repository != null)
                        message.repository = String(object.repository);
                    if (object.project != null)
                        message.project = String(object.project);
                    return message;
                };

                /**
                 * Creates a plain object from a RepositoryReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.RepositoryReference} message RepositoryReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RepositoryReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.url = "";
                        object.type = options.enums === String ? "UNDEFINED" : 0;
                        object.provider = options.enums === String ? "UNKNOWN" : 0;
                    }
                    if (message.ref != null && message.hasOwnProperty("ref")) {
                        object.ref = message.ref;
                        if (options.oneofs)
                            object._ref = "ref";
                    }
                    if (message.url != null && message.hasOwnProperty("url"))
                        object.url = message.url;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.colbylwilliams.teamcloud.v1.RepositoryReference.TypeEnum[message.type] : message.type;
                    if (message.organization != null && message.hasOwnProperty("organization")) {
                        object.organization = message.organization;
                        if (options.oneofs)
                            object._organization = "organization";
                    }
                    if (message.baselUrl != null && message.hasOwnProperty("baselUrl")) {
                        object.baselUrl = message.baselUrl;
                        if (options.oneofs)
                            object._baselUrl = "baselUrl";
                    }
                    if (message.token != null && message.hasOwnProperty("token")) {
                        object.token = message.token;
                        if (options.oneofs)
                            object._token = "token";
                    }
                    if (message.mountUrl != null && message.hasOwnProperty("mountUrl")) {
                        object.mountUrl = message.mountUrl;
                        if (options.oneofs)
                            object._mountUrl = "mountUrl";
                    }
                    if (message.project != null && message.hasOwnProperty("project")) {
                        object.project = message.project;
                        if (options.oneofs)
                            object._project = "project";
                    }
                    if (message.repository != null && message.hasOwnProperty("repository")) {
                        object.repository = message.repository;
                        if (options.oneofs)
                            object._repository = "repository";
                    }
                    if (message.version != null && message.hasOwnProperty("version")) {
                        object.version = message.version;
                        if (options.oneofs)
                            object._version = "version";
                    }
                    if (message.provider != null && message.hasOwnProperty("provider"))
                        object.provider = options.enums === String ? $root.colbylwilliams.teamcloud.v1.RepositoryReference.ProviderEnum[message.provider] : message.provider;
                    return object;
                };

                /**
                 * Converts this RepositoryReference to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RepositoryReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * ProviderEnum enum.
                 * @name colbylwilliams.teamcloud.v1.RepositoryReference.ProviderEnum
                 * @enum {number}
                 * @property {number} UNKNOWN=0 UNKNOWN value
                 * @property {number} GITHUB=1 GITHUB value
                 * @property {number} DEVOPS=2 DEVOPS value
                 */
                RepositoryReference.ProviderEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN"] = 0;
                    values[valuesById[1] = "GITHUB"] = 1;
                    values[valuesById[2] = "DEVOPS"] = 2;
                    return values;
                })();

                /**
                 * TypeEnum enum.
                 * @name colbylwilliams.teamcloud.v1.RepositoryReference.TypeEnum
                 * @enum {number}
                 * @property {number} UNDEFINED=0 UNDEFINED value
                 * @property {number} TAG=1 TAG value
                 * @property {number} BRANCH=2 BRANCH value
                 * @property {number} HASH=3 HASH value
                 */
                RepositoryReference.TypeEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNDEFINED"] = 0;
                    values[valuesById[1] = "TAG"] = 1;
                    values[valuesById[2] = "BRANCH"] = 2;
                    values[valuesById[3] = "HASH"] = 3;
                    return values;
                })();

                return RepositoryReference;
            })();

            v1.ComponentTemplateListDataResult = (function() {

                /**
                 * Properties of a ComponentTemplateListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IComponentTemplateListDataResult
                 * @property {number|null} [code] ComponentTemplateListDataResult code
                 * @property {string|null} [status] ComponentTemplateListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.IComponentTemplate>|null} [data] ComponentTemplateListDataResult data
                 * @property {string|null} [location] ComponentTemplateListDataResult location
                 */

                /**
                 * Constructs a new ComponentTemplateListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTemplateListDataResult.
                 * @implements IComponentTemplateListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IComponentTemplateListDataResult=} [properties] Properties to set
                 */
                function ComponentTemplateListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ComponentTemplateListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult
                 * @instance
                 */
                ComponentTemplateListDataResult.prototype.code = 0;

                /**
                 * ComponentTemplateListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult
                 * @instance
                 */
                ComponentTemplateListDataResult.prototype.status = null;

                /**
                 * ComponentTemplateListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IComponentTemplate>} data
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult
                 * @instance
                 */
                ComponentTemplateListDataResult.prototype.data = $util.emptyArray;

                /**
                 * ComponentTemplateListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult
                 * @instance
                 */
                ComponentTemplateListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ComponentTemplateListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentTemplateListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ComponentTemplateListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult
                 * @instance
                 */
                Object.defineProperty(ComponentTemplateListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ComponentTemplateListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComponentTemplateListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.ComponentTemplate.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ComponentTemplateListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult} ComponentTemplateListDataResult
                 */
                ComponentTemplateListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.ComponentTemplate.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ComponentTemplateListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult} message ComponentTemplateListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComponentTemplateListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.ComponentTemplate.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ComponentTemplateListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComponentTemplateListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ComponentTemplateListDataResult;
            })();

            v1.ComponentTemplatesAPI = (function() {

                /**
                 * Constructs a new ComponentTemplatesAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ComponentTemplatesAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ComponentTemplatesAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (ComponentTemplatesAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ComponentTemplatesAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ComponentTemplatesAPI#getComponentTemplate}.
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatesAPI
                 * @typedef GetComponentTemplateCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ComponentTemplateDataResult} [response] ComponentTemplateDataResult
                 */

                /**
                 * Calls GetComponentTemplate.
                 * @function getComponentTemplate
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTemplateRequest} request GetComponentTemplateRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ComponentTemplatesAPI.GetComponentTemplateCallback} callback Node-style callback called with the error, if any, and ComponentTemplateDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ComponentTemplatesAPI.prototype.getComponentTemplate = function getComponentTemplate(request, callback) {
                    return this.rpcCall(getComponentTemplate, $root.colbylwilliams.teamcloud.v1.GetComponentTemplateRequest, $root.colbylwilliams.teamcloud.v1.ComponentTemplateDataResult, request, callback);
                }, "name", { value: "GetComponentTemplate" });

                /**
                 * Calls GetComponentTemplate.
                 * @function getComponentTemplate
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTemplateRequest} request GetComponentTemplateRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ComponentTemplateDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ComponentTemplatesAPI#getComponentTemplates}.
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatesAPI
                 * @typedef GetComponentTemplatesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult} [response] ComponentTemplateListDataResult
                 */

                /**
                 * Calls GetComponentTemplates.
                 * @function getComponentTemplates
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTemplatesRequest} request GetComponentTemplatesRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ComponentTemplatesAPI.GetComponentTemplatesCallback} callback Node-style callback called with the error, if any, and ComponentTemplateListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ComponentTemplatesAPI.prototype.getComponentTemplates = function getComponentTemplates(request, callback) {
                    return this.rpcCall(getComponentTemplates, $root.colbylwilliams.teamcloud.v1.GetComponentTemplatesRequest, $root.colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult, request, callback);
                }, "name", { value: "GetComponentTemplates" });

                /**
                 * Calls GetComponentTemplates.
                 * @function getComponentTemplates
                 * @memberof colbylwilliams.teamcloud.v1.ComponentTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTemplatesRequest} request GetComponentTemplatesRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ComponentTemplateListDataResult>} Promise
                 * @variation 2
                 */

                return ComponentTemplatesAPI;
            })();

            v1.GetComponentTemplateRequest = (function() {

                /**
                 * Properties of a GetComponentTemplateRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetComponentTemplateRequest
                 * @property {string|null} [id] GetComponentTemplateRequest id
                 * @property {string|null} [organizationId] GetComponentTemplateRequest organizationId
                 * @property {string|null} [projectId] GetComponentTemplateRequest projectId
                 */

                /**
                 * Constructs a new GetComponentTemplateRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetComponentTemplateRequest.
                 * @implements IGetComponentTemplateRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTemplateRequest=} [properties] Properties to set
                 */
                function GetComponentTemplateRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetComponentTemplateRequest id.
                 * @member {string} id
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplateRequest
                 * @instance
                 */
                GetComponentTemplateRequest.prototype.id = "";

                /**
                 * GetComponentTemplateRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplateRequest
                 * @instance
                 */
                GetComponentTemplateRequest.prototype.organizationId = "";

                /**
                 * GetComponentTemplateRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplateRequest
                 * @instance
                 */
                GetComponentTemplateRequest.prototype.projectId = "";

                /**
                 * Verifies a GetComponentTemplateRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplateRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetComponentTemplateRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetComponentTemplateRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplateRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetComponentTemplateRequest} GetComponentTemplateRequest
                 */
                GetComponentTemplateRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetComponentTemplateRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetComponentTemplateRequest();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetComponentTemplateRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplateRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetComponentTemplateRequest} message GetComponentTemplateRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetComponentTemplateRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetComponentTemplateRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplateRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetComponentTemplateRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetComponentTemplateRequest;
            })();

            v1.GetComponentTemplatesRequest = (function() {

                /**
                 * Properties of a GetComponentTemplatesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetComponentTemplatesRequest
                 * @property {string|null} [organizationId] GetComponentTemplatesRequest organizationId
                 * @property {string|null} [projectId] GetComponentTemplatesRequest projectId
                 */

                /**
                 * Constructs a new GetComponentTemplatesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetComponentTemplatesRequest.
                 * @implements IGetComponentTemplatesRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetComponentTemplatesRequest=} [properties] Properties to set
                 */
                function GetComponentTemplatesRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetComponentTemplatesRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplatesRequest
                 * @instance
                 */
                GetComponentTemplatesRequest.prototype.organizationId = "";

                /**
                 * GetComponentTemplatesRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplatesRequest
                 * @instance
                 */
                GetComponentTemplatesRequest.prototype.projectId = "";

                /**
                 * Verifies a GetComponentTemplatesRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplatesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetComponentTemplatesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetComponentTemplatesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplatesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetComponentTemplatesRequest} GetComponentTemplatesRequest
                 */
                GetComponentTemplatesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetComponentTemplatesRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetComponentTemplatesRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetComponentTemplatesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplatesRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetComponentTemplatesRequest} message GetComponentTemplatesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetComponentTemplatesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetComponentTemplatesRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetComponentTemplatesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetComponentTemplatesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetComponentTemplatesRequest;
            })();

            v1.DeploymentScopeDataResult = (function() {

                /**
                 * Properties of a DeploymentScopeDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeploymentScopeDataResult
                 * @property {number|null} [code] DeploymentScopeDataResult code
                 * @property {string|null} [status] DeploymentScopeDataResult status
                 * @property {colbylwilliams.teamcloud.v1.IDeploymentScope|null} [data] DeploymentScopeDataResult data
                 * @property {string|null} [location] DeploymentScopeDataResult location
                 */

                /**
                 * Constructs a new DeploymentScopeDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeploymentScopeDataResult.
                 * @implements IDeploymentScopeDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeploymentScopeDataResult=} [properties] Properties to set
                 */
                function DeploymentScopeDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeploymentScopeDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDataResult
                 * @instance
                 */
                DeploymentScopeDataResult.prototype.code = 0;

                /**
                 * DeploymentScopeDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDataResult
                 * @instance
                 */
                DeploymentScopeDataResult.prototype.status = null;

                /**
                 * DeploymentScopeDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.IDeploymentScope|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDataResult
                 * @instance
                 */
                DeploymentScopeDataResult.prototype.data = null;

                /**
                 * DeploymentScopeDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDataResult
                 * @instance
                 */
                DeploymentScopeDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * DeploymentScopeDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDataResult
                 * @instance
                 */
                Object.defineProperty(DeploymentScopeDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * DeploymentScopeDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDataResult
                 * @instance
                 */
                Object.defineProperty(DeploymentScopeDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a DeploymentScopeDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeploymentScopeDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.DeploymentScope.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a DeploymentScopeDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeploymentScopeDataResult} DeploymentScopeDataResult
                 */
                DeploymentScopeDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeploymentScopeDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeploymentScopeDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.DeploymentScopeDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.DeploymentScope.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a DeploymentScopeDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopeDataResult} message DeploymentScopeDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeploymentScopeDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.DeploymentScope.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this DeploymentScopeDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeploymentScopeDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeploymentScopeDataResult;
            })();

            v1.DeploymentScope = (function() {

                /**
                 * Properties of a DeploymentScope.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeploymentScope
                 * @property {string|null} [organization] DeploymentScope organization
                 * @property {string|null} [organizationName] DeploymentScope organizationName
                 * @property {string|null} [displayName] DeploymentScope displayName
                 * @property {string|null} [slug] DeploymentScope slug
                 * @property {boolean|null} [isDefault] DeploymentScope isDefault
                 * @property {colbylwilliams.teamcloud.v1.DeploymentScope.TypeEnum|null} [type] DeploymentScope type
                 * @property {string|null} [inputDataSchema] DeploymentScope inputDataSchema
                 * @property {string|null} [inputData] DeploymentScope inputData
                 * @property {string|null} [managementGroupId] DeploymentScope managementGroupId
                 * @property {Array.<string>|null} [subscriptionIds] DeploymentScope subscriptionIds
                 * @property {boolean|null} [authorizable] DeploymentScope authorizable
                 * @property {boolean|null} [authorized] DeploymentScope authorized
                 * @property {string|null} [authorizeUrl] DeploymentScope authorizeUrl
                 * @property {colbylwilliams.teamcloud.v1.DeploymentScope.ComponentTypesEnum|null} [componentTypes] DeploymentScope componentTypes
                 * @property {string|null} [id] DeploymentScope id
                 */

                /**
                 * Constructs a new DeploymentScope.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeploymentScope.
                 * @implements IDeploymentScope
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeploymentScope=} [properties] Properties to set
                 */
                function DeploymentScope(properties) {
                    this.subscriptionIds = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeploymentScope organization.
                 * @member {string} organization
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.organization = "";

                /**
                 * DeploymentScope organizationName.
                 * @member {string} organizationName
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.organizationName = "";

                /**
                 * DeploymentScope displayName.
                 * @member {string} displayName
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.displayName = "";

                /**
                 * DeploymentScope slug.
                 * @member {string} slug
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.slug = "";

                /**
                 * DeploymentScope isDefault.
                 * @member {boolean} isDefault
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.isDefault = false;

                /**
                 * DeploymentScope type.
                 * @member {colbylwilliams.teamcloud.v1.DeploymentScope.TypeEnum} type
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.type = 0;

                /**
                 * DeploymentScope inputDataSchema.
                 * @member {string|null|undefined} inputDataSchema
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.inputDataSchema = null;

                /**
                 * DeploymentScope inputData.
                 * @member {string|null|undefined} inputData
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.inputData = null;

                /**
                 * DeploymentScope managementGroupId.
                 * @member {string|null|undefined} managementGroupId
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.managementGroupId = null;

                /**
                 * DeploymentScope subscriptionIds.
                 * @member {Array.<string>} subscriptionIds
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.subscriptionIds = $util.emptyArray;

                /**
                 * DeploymentScope authorizable.
                 * @member {boolean} authorizable
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.authorizable = false;

                /**
                 * DeploymentScope authorized.
                 * @member {boolean} authorized
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.authorized = false;

                /**
                 * DeploymentScope authorizeUrl.
                 * @member {string|null|undefined} authorizeUrl
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.authorizeUrl = null;

                /**
                 * DeploymentScope componentTypes.
                 * @member {colbylwilliams.teamcloud.v1.DeploymentScope.ComponentTypesEnum} componentTypes
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.componentTypes = 0;

                /**
                 * DeploymentScope id.
                 * @member {string} id
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                DeploymentScope.prototype.id = "";

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * DeploymentScope _inputDataSchema.
                 * @member {"inputDataSchema"|undefined} _inputDataSchema
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                Object.defineProperty(DeploymentScope.prototype, "_inputDataSchema", {
                    get: $util.oneOfGetter($oneOfFields = ["inputDataSchema"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * DeploymentScope _inputData.
                 * @member {"inputData"|undefined} _inputData
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                Object.defineProperty(DeploymentScope.prototype, "_inputData", {
                    get: $util.oneOfGetter($oneOfFields = ["inputData"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * DeploymentScope _managementGroupId.
                 * @member {"managementGroupId"|undefined} _managementGroupId
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                Object.defineProperty(DeploymentScope.prototype, "_managementGroupId", {
                    get: $util.oneOfGetter($oneOfFields = ["managementGroupId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * DeploymentScope _authorizeUrl.
                 * @member {"authorizeUrl"|undefined} _authorizeUrl
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 */
                Object.defineProperty(DeploymentScope.prototype, "_authorizeUrl", {
                    get: $util.oneOfGetter($oneOfFields = ["authorizeUrl"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a DeploymentScope message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeploymentScope.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        if (!$util.isString(message.organization))
                            return "organization: string expected";
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        if (!$util.isString(message.organizationName))
                            return "organizationName: string expected";
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    if (message.slug != null && message.hasOwnProperty("slug"))
                        if (!$util.isString(message.slug))
                            return "slug: string expected";
                    if (message.isDefault != null && message.hasOwnProperty("isDefault"))
                        if (typeof message.isDefault !== "boolean")
                            return "isDefault: boolean expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.inputDataSchema != null && message.hasOwnProperty("inputDataSchema")) {
                        properties._inputDataSchema = 1;
                        if (!$util.isString(message.inputDataSchema))
                            return "inputDataSchema: string expected";
                    }
                    if (message.inputData != null && message.hasOwnProperty("inputData")) {
                        properties._inputData = 1;
                        if (!$util.isString(message.inputData))
                            return "inputData: string expected";
                    }
                    if (message.managementGroupId != null && message.hasOwnProperty("managementGroupId")) {
                        properties._managementGroupId = 1;
                        if (!$util.isString(message.managementGroupId))
                            return "managementGroupId: string expected";
                    }
                    if (message.subscriptionIds != null && message.hasOwnProperty("subscriptionIds")) {
                        if (!Array.isArray(message.subscriptionIds))
                            return "subscriptionIds: array expected";
                        for (let i = 0; i < message.subscriptionIds.length; ++i)
                            if (!$util.isString(message.subscriptionIds[i]))
                                return "subscriptionIds: string[] expected";
                    }
                    if (message.authorizable != null && message.hasOwnProperty("authorizable"))
                        if (typeof message.authorizable !== "boolean")
                            return "authorizable: boolean expected";
                    if (message.authorized != null && message.hasOwnProperty("authorized"))
                        if (typeof message.authorized !== "boolean")
                            return "authorized: boolean expected";
                    if (message.authorizeUrl != null && message.hasOwnProperty("authorizeUrl")) {
                        properties._authorizeUrl = 1;
                        if (!$util.isString(message.authorizeUrl))
                            return "authorizeUrl: string expected";
                    }
                    if (message.componentTypes != null && message.hasOwnProperty("componentTypes"))
                        switch (message.componentTypes) {
                        default:
                            return "componentTypes: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    return null;
                };

                /**
                 * Creates a DeploymentScope message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeploymentScope} DeploymentScope
                 */
                DeploymentScope.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeploymentScope)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeploymentScope();
                    if (object.organization != null)
                        message.organization = String(object.organization);
                    if (object.organizationName != null)
                        message.organizationName = String(object.organizationName);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.slug != null)
                        message.slug = String(object.slug);
                    if (object.isDefault != null)
                        message.isDefault = Boolean(object.isDefault);
                    switch (object.type) {
                    case "AZURERESOURCEMANAGER":
                    case 0:
                        message.type = 0;
                        break;
                    case "AZUREDEVOPS":
                    case 1:
                        message.type = 1;
                        break;
                    case "GITHUB":
                    case 2:
                        message.type = 2;
                        break;
                    case "KUBERNETES":
                    case 3:
                        message.type = 3;
                        break;
                    }
                    if (object.inputDataSchema != null)
                        message.inputDataSchema = String(object.inputDataSchema);
                    if (object.inputData != null)
                        message.inputData = String(object.inputData);
                    if (object.managementGroupId != null)
                        message.managementGroupId = String(object.managementGroupId);
                    if (object.subscriptionIds) {
                        if (!Array.isArray(object.subscriptionIds))
                            throw TypeError(".colbylwilliams.teamcloud.v1.DeploymentScope.subscriptionIds: array expected");
                        message.subscriptionIds = [];
                        for (let i = 0; i < object.subscriptionIds.length; ++i)
                            message.subscriptionIds[i] = String(object.subscriptionIds[i]);
                    }
                    if (object.authorizable != null)
                        message.authorizable = Boolean(object.authorizable);
                    if (object.authorized != null)
                        message.authorized = Boolean(object.authorized);
                    if (object.authorizeUrl != null)
                        message.authorizeUrl = String(object.authorizeUrl);
                    switch (object.componentTypes) {
                    case "ENVIRONMENT":
                    case 0:
                        message.componentTypes = 0;
                        break;
                    case "REPOSITORY":
                    case 1:
                        message.componentTypes = 1;
                        break;
                    case "NAMESPACE":
                    case 2:
                        message.componentTypes = 2;
                        break;
                    }
                    if (object.id != null)
                        message.id = String(object.id);
                    return message;
                };

                /**
                 * Creates a plain object from a DeploymentScope message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScope} message DeploymentScope
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeploymentScope.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.subscriptionIds = [];
                    if (options.defaults) {
                        object.id = "";
                        object.slug = "";
                        object.type = options.enums === String ? "AZURERESOURCEMANAGER" : 0;
                        object.displayName = "";
                        object.organization = "";
                        object.organizationName = "";
                        object.componentTypes = options.enums === String ? "ENVIRONMENT" : 0;
                        object.authorizable = false;
                        object.authorized = false;
                        object.isDefault = false;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.slug != null && message.hasOwnProperty("slug"))
                        object.slug = message.slug;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.colbylwilliams.teamcloud.v1.DeploymentScope.TypeEnum[message.type] : message.type;
                    if (message.inputDataSchema != null && message.hasOwnProperty("inputDataSchema")) {
                        object.inputDataSchema = message.inputDataSchema;
                        if (options.oneofs)
                            object._inputDataSchema = "inputDataSchema";
                    }
                    if (message.managementGroupId != null && message.hasOwnProperty("managementGroupId")) {
                        object.managementGroupId = message.managementGroupId;
                        if (options.oneofs)
                            object._managementGroupId = "managementGroupId";
                    }
                    if (message.inputData != null && message.hasOwnProperty("inputData")) {
                        object.inputData = message.inputData;
                        if (options.oneofs)
                            object._inputData = "inputData";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        object.displayName = message.displayName;
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = message.organization;
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        object.organizationName = message.organizationName;
                    if (message.componentTypes != null && message.hasOwnProperty("componentTypes"))
                        object.componentTypes = options.enums === String ? $root.colbylwilliams.teamcloud.v1.DeploymentScope.ComponentTypesEnum[message.componentTypes] : message.componentTypes;
                    if (message.subscriptionIds && message.subscriptionIds.length) {
                        object.subscriptionIds = [];
                        for (let j = 0; j < message.subscriptionIds.length; ++j)
                            object.subscriptionIds[j] = message.subscriptionIds[j];
                    }
                    if (message.authorizable != null && message.hasOwnProperty("authorizable"))
                        object.authorizable = message.authorizable;
                    if (message.authorizeUrl != null && message.hasOwnProperty("authorizeUrl")) {
                        object.authorizeUrl = message.authorizeUrl;
                        if (options.oneofs)
                            object._authorizeUrl = "authorizeUrl";
                    }
                    if (message.authorized != null && message.hasOwnProperty("authorized"))
                        object.authorized = message.authorized;
                    if (message.isDefault != null && message.hasOwnProperty("isDefault"))
                        object.isDefault = message.isDefault;
                    return object;
                };

                /**
                 * Converts this DeploymentScope to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScope
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeploymentScope.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * TypeEnum enum.
                 * @name colbylwilliams.teamcloud.v1.DeploymentScope.TypeEnum
                 * @enum {number}
                 * @property {number} AZURERESOURCEMANAGER=0 AZURERESOURCEMANAGER value
                 * @property {number} AZUREDEVOPS=1 AZUREDEVOPS value
                 * @property {number} GITHUB=2 GITHUB value
                 * @property {number} KUBERNETES=3 KUBERNETES value
                 */
                DeploymentScope.TypeEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "AZURERESOURCEMANAGER"] = 0;
                    values[valuesById[1] = "AZUREDEVOPS"] = 1;
                    values[valuesById[2] = "GITHUB"] = 2;
                    values[valuesById[3] = "KUBERNETES"] = 3;
                    return values;
                })();

                /**
                 * ComponentTypesEnum enum.
                 * @name colbylwilliams.teamcloud.v1.DeploymentScope.ComponentTypesEnum
                 * @enum {number}
                 * @property {number} ENVIRONMENT=0 ENVIRONMENT value
                 * @property {number} REPOSITORY=1 REPOSITORY value
                 * @property {number} NAMESPACE=2 NAMESPACE value
                 */
                DeploymentScope.ComponentTypesEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ENVIRONMENT"] = 0;
                    values[valuesById[1] = "REPOSITORY"] = 1;
                    values[valuesById[2] = "NAMESPACE"] = 2;
                    return values;
                })();

                return DeploymentScope;
            })();

            v1.DeploymentScopeDefinition = (function() {

                /**
                 * Properties of a DeploymentScopeDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeploymentScopeDefinition
                 * @property {string|null} [displayName] DeploymentScopeDefinition displayName
                 * @property {colbylwilliams.teamcloud.v1.DeploymentScopeDefinition.TypeEnum|null} [type] DeploymentScopeDefinition type
                 * @property {string|null} [slug] DeploymentScopeDefinition slug
                 * @property {string|null} [inputData] DeploymentScopeDefinition inputData
                 * @property {boolean|null} [isDefault] DeploymentScopeDefinition isDefault
                 */

                /**
                 * Constructs a new DeploymentScopeDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeploymentScopeDefinition.
                 * @implements IDeploymentScopeDefinition
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeploymentScopeDefinition=} [properties] Properties to set
                 */
                function DeploymentScopeDefinition(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeploymentScopeDefinition displayName.
                 * @member {string} displayName
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDefinition
                 * @instance
                 */
                DeploymentScopeDefinition.prototype.displayName = "";

                /**
                 * DeploymentScopeDefinition type.
                 * @member {colbylwilliams.teamcloud.v1.DeploymentScopeDefinition.TypeEnum} type
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDefinition
                 * @instance
                 */
                DeploymentScopeDefinition.prototype.type = 0;

                /**
                 * DeploymentScopeDefinition slug.
                 * @member {string|null|undefined} slug
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDefinition
                 * @instance
                 */
                DeploymentScopeDefinition.prototype.slug = null;

                /**
                 * DeploymentScopeDefinition inputData.
                 * @member {string|null|undefined} inputData
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDefinition
                 * @instance
                 */
                DeploymentScopeDefinition.prototype.inputData = null;

                /**
                 * DeploymentScopeDefinition isDefault.
                 * @member {boolean} isDefault
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDefinition
                 * @instance
                 */
                DeploymentScopeDefinition.prototype.isDefault = false;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * DeploymentScopeDefinition _slug.
                 * @member {"slug"|undefined} _slug
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDefinition
                 * @instance
                 */
                Object.defineProperty(DeploymentScopeDefinition.prototype, "_slug", {
                    get: $util.oneOfGetter($oneOfFields = ["slug"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * DeploymentScopeDefinition _inputData.
                 * @member {"inputData"|undefined} _inputData
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDefinition
                 * @instance
                 */
                Object.defineProperty(DeploymentScopeDefinition.prototype, "_inputData", {
                    get: $util.oneOfGetter($oneOfFields = ["inputData"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a DeploymentScopeDefinition message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDefinition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeploymentScopeDefinition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.slug != null && message.hasOwnProperty("slug")) {
                        properties._slug = 1;
                        if (!$util.isString(message.slug))
                            return "slug: string expected";
                    }
                    if (message.inputData != null && message.hasOwnProperty("inputData")) {
                        properties._inputData = 1;
                        if (!$util.isString(message.inputData))
                            return "inputData: string expected";
                    }
                    if (message.isDefault != null && message.hasOwnProperty("isDefault"))
                        if (typeof message.isDefault !== "boolean")
                            return "isDefault: boolean expected";
                    return null;
                };

                /**
                 * Creates a DeploymentScopeDefinition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDefinition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeploymentScopeDefinition} DeploymentScopeDefinition
                 */
                DeploymentScopeDefinition.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeploymentScopeDefinition)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeploymentScopeDefinition();
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    switch (object.type) {
                    case "AZURERESOURCEMANAGER":
                    case 0:
                        message.type = 0;
                        break;
                    case "AZUREDEVOPS":
                    case 1:
                        message.type = 1;
                        break;
                    case "GITHUB":
                    case 2:
                        message.type = 2;
                        break;
                    case "KUBERNETES":
                    case 3:
                        message.type = 3;
                        break;
                    }
                    if (object.slug != null)
                        message.slug = String(object.slug);
                    if (object.inputData != null)
                        message.inputData = String(object.inputData);
                    if (object.isDefault != null)
                        message.isDefault = Boolean(object.isDefault);
                    return message;
                };

                /**
                 * Creates a plain object from a DeploymentScopeDefinition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDefinition
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopeDefinition} message DeploymentScopeDefinition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeploymentScopeDefinition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.type = options.enums === String ? "AZURERESOURCEMANAGER" : 0;
                        object.displayName = "";
                        object.isDefault = false;
                    }
                    if (message.slug != null && message.hasOwnProperty("slug")) {
                        object.slug = message.slug;
                        if (options.oneofs)
                            object._slug = "slug";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.colbylwilliams.teamcloud.v1.DeploymentScopeDefinition.TypeEnum[message.type] : message.type;
                    if (message.inputData != null && message.hasOwnProperty("inputData")) {
                        object.inputData = message.inputData;
                        if (options.oneofs)
                            object._inputData = "inputData";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        object.displayName = message.displayName;
                    if (message.isDefault != null && message.hasOwnProperty("isDefault"))
                        object.isDefault = message.isDefault;
                    return object;
                };

                /**
                 * Converts this DeploymentScopeDefinition to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeDefinition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeploymentScopeDefinition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * TypeEnum enum.
                 * @name colbylwilliams.teamcloud.v1.DeploymentScopeDefinition.TypeEnum
                 * @enum {number}
                 * @property {number} AZURERESOURCEMANAGER=0 AZURERESOURCEMANAGER value
                 * @property {number} AZUREDEVOPS=1 AZUREDEVOPS value
                 * @property {number} GITHUB=2 GITHUB value
                 * @property {number} KUBERNETES=3 KUBERNETES value
                 */
                DeploymentScopeDefinition.TypeEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "AZURERESOURCEMANAGER"] = 0;
                    values[valuesById[1] = "AZUREDEVOPS"] = 1;
                    values[valuesById[2] = "GITHUB"] = 2;
                    values[valuesById[3] = "KUBERNETES"] = 3;
                    return values;
                })();

                return DeploymentScopeDefinition;
            })();

            v1.DeploymentScopeListDataResult = (function() {

                /**
                 * Properties of a DeploymentScopeListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeploymentScopeListDataResult
                 * @property {number|null} [code] DeploymentScopeListDataResult code
                 * @property {string|null} [status] DeploymentScopeListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.IDeploymentScope>|null} [data] DeploymentScopeListDataResult data
                 * @property {string|null} [location] DeploymentScopeListDataResult location
                 */

                /**
                 * Constructs a new DeploymentScopeListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeploymentScopeListDataResult.
                 * @implements IDeploymentScopeListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeploymentScopeListDataResult=} [properties] Properties to set
                 */
                function DeploymentScopeListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeploymentScopeListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult
                 * @instance
                 */
                DeploymentScopeListDataResult.prototype.code = 0;

                /**
                 * DeploymentScopeListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult
                 * @instance
                 */
                DeploymentScopeListDataResult.prototype.status = null;

                /**
                 * DeploymentScopeListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IDeploymentScope>} data
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult
                 * @instance
                 */
                DeploymentScopeListDataResult.prototype.data = $util.emptyArray;

                /**
                 * DeploymentScopeListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult
                 * @instance
                 */
                DeploymentScopeListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * DeploymentScopeListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult
                 * @instance
                 */
                Object.defineProperty(DeploymentScopeListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * DeploymentScopeListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult
                 * @instance
                 */
                Object.defineProperty(DeploymentScopeListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a DeploymentScopeListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeploymentScopeListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.DeploymentScope.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a DeploymentScopeListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult} DeploymentScopeListDataResult
                 */
                DeploymentScopeListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.DeploymentScope.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a DeploymentScopeListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult} message DeploymentScopeListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeploymentScopeListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.DeploymentScope.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this DeploymentScopeListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeploymentScopeListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeploymentScopeListDataResult;
            })();

            v1.DeploymentScopesAuthorizationAPI = (function() {

                /**
                 * Constructs a new DeploymentScopesAuthorizationAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeploymentScopesAuthorizationAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function DeploymentScopesAuthorizationAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (DeploymentScopesAuthorizationAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = DeploymentScopesAuthorizationAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.DeploymentScopesAuthorizationAPI#initializeAuthorization}.
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAuthorizationAPI
                 * @typedef InitializeAuthorizationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopeDataResult} [response] DeploymentScopeDataResult
                 */

                /**
                 * Calls InitializeAuthorization.
                 * @function initializeAuthorization
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAuthorizationAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IInitializeAuthorizationRequest} request InitializeAuthorizationRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopesAuthorizationAPI.InitializeAuthorizationCallback} callback Node-style callback called with the error, if any, and DeploymentScopeDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeploymentScopesAuthorizationAPI.prototype.initializeAuthorization = function initializeAuthorization(request, callback) {
                    return this.rpcCall(initializeAuthorization, $root.colbylwilliams.teamcloud.v1.InitializeAuthorizationRequest, $root.colbylwilliams.teamcloud.v1.DeploymentScopeDataResult, request, callback);
                }, "name", { value: "InitializeAuthorization" });

                /**
                 * Calls InitializeAuthorization.
                 * @function initializeAuthorization
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAuthorizationAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IInitializeAuthorizationRequest} request InitializeAuthorizationRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.DeploymentScopeDataResult>} Promise
                 * @variation 2
                 */

                return DeploymentScopesAuthorizationAPI;
            })();

            v1.InitializeAuthorizationRequest = (function() {

                /**
                 * Properties of an InitializeAuthorizationRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IInitializeAuthorizationRequest
                 * @property {string|null} [organizationId] InitializeAuthorizationRequest organizationId
                 * @property {string|null} [deploymentScopeId] InitializeAuthorizationRequest deploymentScopeId
                 */

                /**
                 * Constructs a new InitializeAuthorizationRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an InitializeAuthorizationRequest.
                 * @implements IInitializeAuthorizationRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IInitializeAuthorizationRequest=} [properties] Properties to set
                 */
                function InitializeAuthorizationRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * InitializeAuthorizationRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.InitializeAuthorizationRequest
                 * @instance
                 */
                InitializeAuthorizationRequest.prototype.organizationId = "";

                /**
                 * InitializeAuthorizationRequest deploymentScopeId.
                 * @member {string} deploymentScopeId
                 * @memberof colbylwilliams.teamcloud.v1.InitializeAuthorizationRequest
                 * @instance
                 */
                InitializeAuthorizationRequest.prototype.deploymentScopeId = "";

                /**
                 * Verifies an InitializeAuthorizationRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.InitializeAuthorizationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                InitializeAuthorizationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        if (!$util.isString(message.deploymentScopeId))
                            return "deploymentScopeId: string expected";
                    return null;
                };

                /**
                 * Creates an InitializeAuthorizationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.InitializeAuthorizationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.InitializeAuthorizationRequest} InitializeAuthorizationRequest
                 */
                InitializeAuthorizationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.InitializeAuthorizationRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.InitializeAuthorizationRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.deploymentScopeId != null)
                        message.deploymentScopeId = String(object.deploymentScopeId);
                    return message;
                };

                /**
                 * Creates a plain object from an InitializeAuthorizationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.InitializeAuthorizationRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.InitializeAuthorizationRequest} message InitializeAuthorizationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                InitializeAuthorizationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.deploymentScopeId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        object.deploymentScopeId = message.deploymentScopeId;
                    return object;
                };

                /**
                 * Converts this InitializeAuthorizationRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.InitializeAuthorizationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                InitializeAuthorizationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return InitializeAuthorizationRequest;
            })();

            v1.DeploymentScopesAPI = (function() {

                /**
                 * Constructs a new DeploymentScopesAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeploymentScopesAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function DeploymentScopesAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (DeploymentScopesAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = DeploymentScopesAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.DeploymentScopesAPI#createDeploymentScope}.
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @typedef CreateDeploymentScopeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopeDataResult} [response] DeploymentScopeDataResult
                 */

                /**
                 * Calls CreateDeploymentScope.
                 * @function createDeploymentScope
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateDeploymentScopeRequest} request CreateDeploymentScopeRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopesAPI.CreateDeploymentScopeCallback} callback Node-style callback called with the error, if any, and DeploymentScopeDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeploymentScopesAPI.prototype.createDeploymentScope = function createDeploymentScope(request, callback) {
                    return this.rpcCall(createDeploymentScope, $root.colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest, $root.colbylwilliams.teamcloud.v1.DeploymentScopeDataResult, request, callback);
                }, "name", { value: "CreateDeploymentScope" });

                /**
                 * Calls CreateDeploymentScope.
                 * @function createDeploymentScope
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateDeploymentScopeRequest} request CreateDeploymentScopeRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.DeploymentScopeDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.DeploymentScopesAPI#deleteDeploymentScope}.
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @typedef DeleteDeploymentScopeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopeDataResult} [response] DeploymentScopeDataResult
                 */

                /**
                 * Calls DeleteDeploymentScope.
                 * @function deleteDeploymentScope
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteDeploymentScopeRequest} request DeleteDeploymentScopeRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopesAPI.DeleteDeploymentScopeCallback} callback Node-style callback called with the error, if any, and DeploymentScopeDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeploymentScopesAPI.prototype.deleteDeploymentScope = function deleteDeploymentScope(request, callback) {
                    return this.rpcCall(deleteDeploymentScope, $root.colbylwilliams.teamcloud.v1.DeleteDeploymentScopeRequest, $root.colbylwilliams.teamcloud.v1.DeploymentScopeDataResult, request, callback);
                }, "name", { value: "DeleteDeploymentScope" });

                /**
                 * Calls DeleteDeploymentScope.
                 * @function deleteDeploymentScope
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteDeploymentScopeRequest} request DeleteDeploymentScopeRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.DeploymentScopeDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.DeploymentScopesAPI#getDeploymentScope}.
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @typedef GetDeploymentScopeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopeDataResult} [response] DeploymentScopeDataResult
                 */

                /**
                 * Calls GetDeploymentScope.
                 * @function getDeploymentScope
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetDeploymentScopeRequest} request GetDeploymentScopeRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopesAPI.GetDeploymentScopeCallback} callback Node-style callback called with the error, if any, and DeploymentScopeDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeploymentScopesAPI.prototype.getDeploymentScope = function getDeploymentScope(request, callback) {
                    return this.rpcCall(getDeploymentScope, $root.colbylwilliams.teamcloud.v1.GetDeploymentScopeRequest, $root.colbylwilliams.teamcloud.v1.DeploymentScopeDataResult, request, callback);
                }, "name", { value: "GetDeploymentScope" });

                /**
                 * Calls GetDeploymentScope.
                 * @function getDeploymentScope
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetDeploymentScopeRequest} request GetDeploymentScopeRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.DeploymentScopeDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.DeploymentScopesAPI#getDeploymentScopes}.
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @typedef GetDeploymentScopesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult} [response] DeploymentScopeListDataResult
                 */

                /**
                 * Calls GetDeploymentScopes.
                 * @function getDeploymentScopes
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetDeploymentScopesRequest} request GetDeploymentScopesRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopesAPI.GetDeploymentScopesCallback} callback Node-style callback called with the error, if any, and DeploymentScopeListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeploymentScopesAPI.prototype.getDeploymentScopes = function getDeploymentScopes(request, callback) {
                    return this.rpcCall(getDeploymentScopes, $root.colbylwilliams.teamcloud.v1.GetDeploymentScopesRequest, $root.colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult, request, callback);
                }, "name", { value: "GetDeploymentScopes" });

                /**
                 * Calls GetDeploymentScopes.
                 * @function getDeploymentScopes
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetDeploymentScopesRequest} request GetDeploymentScopesRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.DeploymentScopeListDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.DeploymentScopesAPI#updateDeploymentScope}.
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @typedef UpdateDeploymentScopeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopeDataResult} [response] DeploymentScopeDataResult
                 */

                /**
                 * Calls UpdateDeploymentScope.
                 * @function updateDeploymentScope
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateDeploymentScopeRequest} request UpdateDeploymentScopeRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.DeploymentScopesAPI.UpdateDeploymentScopeCallback} callback Node-style callback called with the error, if any, and DeploymentScopeDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeploymentScopesAPI.prototype.updateDeploymentScope = function updateDeploymentScope(request, callback) {
                    return this.rpcCall(updateDeploymentScope, $root.colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest, $root.colbylwilliams.teamcloud.v1.DeploymentScopeDataResult, request, callback);
                }, "name", { value: "UpdateDeploymentScope" });

                /**
                 * Calls UpdateDeploymentScope.
                 * @function updateDeploymentScope
                 * @memberof colbylwilliams.teamcloud.v1.DeploymentScopesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateDeploymentScopeRequest} request UpdateDeploymentScopeRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.DeploymentScopeDataResult>} Promise
                 * @variation 2
                 */

                return DeploymentScopesAPI;
            })();

            v1.CreateDeploymentScopeRequest = (function() {

                /**
                 * Properties of a CreateDeploymentScopeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICreateDeploymentScopeRequest
                 * @property {string|null} [organizationId] CreateDeploymentScopeRequest organizationId
                 * @property {colbylwilliams.teamcloud.v1.IDeploymentScopeDefinition|null} [deploymentScopeDefinition] CreateDeploymentScopeRequest deploymentScopeDefinition
                 */

                /**
                 * Constructs a new CreateDeploymentScopeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CreateDeploymentScopeRequest.
                 * @implements ICreateDeploymentScopeRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICreateDeploymentScopeRequest=} [properties] Properties to set
                 */
                function CreateDeploymentScopeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateDeploymentScopeRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest
                 * @instance
                 */
                CreateDeploymentScopeRequest.prototype.organizationId = "";

                /**
                 * CreateDeploymentScopeRequest deploymentScopeDefinition.
                 * @member {colbylwilliams.teamcloud.v1.IDeploymentScopeDefinition|null|undefined} deploymentScopeDefinition
                 * @memberof colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest
                 * @instance
                 */
                CreateDeploymentScopeRequest.prototype.deploymentScopeDefinition = null;

                /**
                 * Verifies a CreateDeploymentScopeRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateDeploymentScopeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.deploymentScopeDefinition != null && message.hasOwnProperty("deploymentScopeDefinition")) {
                        let error = $root.colbylwilliams.teamcloud.v1.DeploymentScopeDefinition.verify(message.deploymentScopeDefinition);
                        if (error)
                            return "deploymentScopeDefinition." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CreateDeploymentScopeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest} CreateDeploymentScopeRequest
                 */
                CreateDeploymentScopeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.deploymentScopeDefinition != null) {
                        if (typeof object.deploymentScopeDefinition !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest.deploymentScopeDefinition: object expected");
                        message.deploymentScopeDefinition = $root.colbylwilliams.teamcloud.v1.DeploymentScopeDefinition.fromObject(object.deploymentScopeDefinition);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CreateDeploymentScopeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest} message CreateDeploymentScopeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateDeploymentScopeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.deploymentScopeDefinition = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.deploymentScopeDefinition != null && message.hasOwnProperty("deploymentScopeDefinition"))
                        object.deploymentScopeDefinition = $root.colbylwilliams.teamcloud.v1.DeploymentScopeDefinition.toObject(message.deploymentScopeDefinition, options);
                    return object;
                };

                /**
                 * Converts this CreateDeploymentScopeRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CreateDeploymentScopeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateDeploymentScopeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CreateDeploymentScopeRequest;
            })();

            v1.DeleteDeploymentScopeRequest = (function() {

                /**
                 * Properties of a DeleteDeploymentScopeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeleteDeploymentScopeRequest
                 * @property {string|null} [organizationId] DeleteDeploymentScopeRequest organizationId
                 * @property {string|null} [deploymentScopeId] DeleteDeploymentScopeRequest deploymentScopeId
                 */

                /**
                 * Constructs a new DeleteDeploymentScopeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeleteDeploymentScopeRequest.
                 * @implements IDeleteDeploymentScopeRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeleteDeploymentScopeRequest=} [properties] Properties to set
                 */
                function DeleteDeploymentScopeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteDeploymentScopeRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteDeploymentScopeRequest
                 * @instance
                 */
                DeleteDeploymentScopeRequest.prototype.organizationId = "";

                /**
                 * DeleteDeploymentScopeRequest deploymentScopeId.
                 * @member {string} deploymentScopeId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteDeploymentScopeRequest
                 * @instance
                 */
                DeleteDeploymentScopeRequest.prototype.deploymentScopeId = "";

                /**
                 * Verifies a DeleteDeploymentScopeRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeleteDeploymentScopeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteDeploymentScopeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        if (!$util.isString(message.deploymentScopeId))
                            return "deploymentScopeId: string expected";
                    return null;
                };

                /**
                 * Creates a DeleteDeploymentScopeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteDeploymentScopeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeleteDeploymentScopeRequest} DeleteDeploymentScopeRequest
                 */
                DeleteDeploymentScopeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeleteDeploymentScopeRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeleteDeploymentScopeRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.deploymentScopeId != null)
                        message.deploymentScopeId = String(object.deploymentScopeId);
                    return message;
                };

                /**
                 * Creates a plain object from a DeleteDeploymentScopeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteDeploymentScopeRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeleteDeploymentScopeRequest} message DeleteDeploymentScopeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteDeploymentScopeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.deploymentScopeId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        object.deploymentScopeId = message.deploymentScopeId;
                    return object;
                };

                /**
                 * Converts this DeleteDeploymentScopeRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeleteDeploymentScopeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteDeploymentScopeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeleteDeploymentScopeRequest;
            })();

            v1.GetDeploymentScopeRequest = (function() {

                /**
                 * Properties of a GetDeploymentScopeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetDeploymentScopeRequest
                 * @property {string|null} [organizationId] GetDeploymentScopeRequest organizationId
                 * @property {string|null} [deploymentScopeId] GetDeploymentScopeRequest deploymentScopeId
                 */

                /**
                 * Constructs a new GetDeploymentScopeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetDeploymentScopeRequest.
                 * @implements IGetDeploymentScopeRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetDeploymentScopeRequest=} [properties] Properties to set
                 */
                function GetDeploymentScopeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetDeploymentScopeRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetDeploymentScopeRequest
                 * @instance
                 */
                GetDeploymentScopeRequest.prototype.organizationId = "";

                /**
                 * GetDeploymentScopeRequest deploymentScopeId.
                 * @member {string} deploymentScopeId
                 * @memberof colbylwilliams.teamcloud.v1.GetDeploymentScopeRequest
                 * @instance
                 */
                GetDeploymentScopeRequest.prototype.deploymentScopeId = "";

                /**
                 * Verifies a GetDeploymentScopeRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetDeploymentScopeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetDeploymentScopeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        if (!$util.isString(message.deploymentScopeId))
                            return "deploymentScopeId: string expected";
                    return null;
                };

                /**
                 * Creates a GetDeploymentScopeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetDeploymentScopeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetDeploymentScopeRequest} GetDeploymentScopeRequest
                 */
                GetDeploymentScopeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetDeploymentScopeRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetDeploymentScopeRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.deploymentScopeId != null)
                        message.deploymentScopeId = String(object.deploymentScopeId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetDeploymentScopeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetDeploymentScopeRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetDeploymentScopeRequest} message GetDeploymentScopeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetDeploymentScopeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.deploymentScopeId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        object.deploymentScopeId = message.deploymentScopeId;
                    return object;
                };

                /**
                 * Converts this GetDeploymentScopeRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetDeploymentScopeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetDeploymentScopeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetDeploymentScopeRequest;
            })();

            v1.GetDeploymentScopesRequest = (function() {

                /**
                 * Properties of a GetDeploymentScopesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetDeploymentScopesRequest
                 * @property {string|null} [organizationId] GetDeploymentScopesRequest organizationId
                 */

                /**
                 * Constructs a new GetDeploymentScopesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetDeploymentScopesRequest.
                 * @implements IGetDeploymentScopesRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetDeploymentScopesRequest=} [properties] Properties to set
                 */
                function GetDeploymentScopesRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetDeploymentScopesRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetDeploymentScopesRequest
                 * @instance
                 */
                GetDeploymentScopesRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetDeploymentScopesRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetDeploymentScopesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetDeploymentScopesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetDeploymentScopesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetDeploymentScopesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetDeploymentScopesRequest} GetDeploymentScopesRequest
                 */
                GetDeploymentScopesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetDeploymentScopesRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetDeploymentScopesRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetDeploymentScopesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetDeploymentScopesRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetDeploymentScopesRequest} message GetDeploymentScopesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetDeploymentScopesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.organizationId = "";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetDeploymentScopesRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetDeploymentScopesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetDeploymentScopesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetDeploymentScopesRequest;
            })();

            v1.UpdateDeploymentScopeRequest = (function() {

                /**
                 * Properties of an UpdateDeploymentScopeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUpdateDeploymentScopeRequest
                 * @property {string|null} [organizationId] UpdateDeploymentScopeRequest organizationId
                 * @property {string|null} [deploymentScopeId] UpdateDeploymentScopeRequest deploymentScopeId
                 * @property {colbylwilliams.teamcloud.v1.IDeploymentScope|null} [deploymentScope] UpdateDeploymentScopeRequest deploymentScope
                 */

                /**
                 * Constructs a new UpdateDeploymentScopeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an UpdateDeploymentScopeRequest.
                 * @implements IUpdateDeploymentScopeRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUpdateDeploymentScopeRequest=} [properties] Properties to set
                 */
                function UpdateDeploymentScopeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateDeploymentScopeRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest
                 * @instance
                 */
                UpdateDeploymentScopeRequest.prototype.organizationId = "";

                /**
                 * UpdateDeploymentScopeRequest deploymentScopeId.
                 * @member {string} deploymentScopeId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest
                 * @instance
                 */
                UpdateDeploymentScopeRequest.prototype.deploymentScopeId = "";

                /**
                 * UpdateDeploymentScopeRequest deploymentScope.
                 * @member {colbylwilliams.teamcloud.v1.IDeploymentScope|null|undefined} deploymentScope
                 * @memberof colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest
                 * @instance
                 */
                UpdateDeploymentScopeRequest.prototype.deploymentScope = null;

                /**
                 * Verifies an UpdateDeploymentScopeRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateDeploymentScopeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        if (!$util.isString(message.deploymentScopeId))
                            return "deploymentScopeId: string expected";
                    if (message.deploymentScope != null && message.hasOwnProperty("deploymentScope")) {
                        let error = $root.colbylwilliams.teamcloud.v1.DeploymentScope.verify(message.deploymentScope);
                        if (error)
                            return "deploymentScope." + error;
                    }
                    return null;
                };

                /**
                 * Creates an UpdateDeploymentScopeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest} UpdateDeploymentScopeRequest
                 */
                UpdateDeploymentScopeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.deploymentScopeId != null)
                        message.deploymentScopeId = String(object.deploymentScopeId);
                    if (object.deploymentScope != null) {
                        if (typeof object.deploymentScope !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest.deploymentScope: object expected");
                        message.deploymentScope = $root.colbylwilliams.teamcloud.v1.DeploymentScope.fromObject(object.deploymentScope);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an UpdateDeploymentScopeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest} message UpdateDeploymentScopeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateDeploymentScopeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.deploymentScopeId = "";
                        object.deploymentScope = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        object.deploymentScopeId = message.deploymentScopeId;
                    if (message.deploymentScope != null && message.hasOwnProperty("deploymentScope"))
                        object.deploymentScope = $root.colbylwilliams.teamcloud.v1.DeploymentScope.toObject(message.deploymentScope, options);
                    return object;
                };

                /**
                 * Converts this UpdateDeploymentScopeRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UpdateDeploymentScopeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateDeploymentScopeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UpdateDeploymentScopeRequest;
            })();

            v1.NegotiateAPI = (function() {

                /**
                 * Constructs a new NegotiateAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a NegotiateAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function NegotiateAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (NegotiateAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = NegotiateAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.NegotiateAPI#negotiateSignalR}.
                 * @memberof colbylwilliams.teamcloud.v1.NegotiateAPI
                 * @typedef NegotiateSignalRCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */

                /**
                 * Calls NegotiateSignalR.
                 * @function negotiateSignalR
                 * @memberof colbylwilliams.teamcloud.v1.NegotiateAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.INegotiateSignalRRequest} request NegotiateSignalRRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.NegotiateAPI.NegotiateSignalRCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(NegotiateAPI.prototype.negotiateSignalR = function negotiateSignalR(request, callback) {
                    return this.rpcCall(negotiateSignalR, $root.colbylwilliams.teamcloud.v1.NegotiateSignalRRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "NegotiateSignalR" });

                /**
                 * Calls NegotiateSignalR.
                 * @function negotiateSignalR
                 * @memberof colbylwilliams.teamcloud.v1.NegotiateAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.INegotiateSignalRRequest} request NegotiateSignalRRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */

                return NegotiateAPI;
            })();

            v1.NegotiateSignalRRequest = (function() {

                /**
                 * Properties of a NegotiateSignalRRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface INegotiateSignalRRequest
                 * @property {string|null} [organizationId] NegotiateSignalRRequest organizationId
                 * @property {string|null} [projectId] NegotiateSignalRRequest projectId
                 */

                /**
                 * Constructs a new NegotiateSignalRRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a NegotiateSignalRRequest.
                 * @implements INegotiateSignalRRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.INegotiateSignalRRequest=} [properties] Properties to set
                 */
                function NegotiateSignalRRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NegotiateSignalRRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.NegotiateSignalRRequest
                 * @instance
                 */
                NegotiateSignalRRequest.prototype.organizationId = "";

                /**
                 * NegotiateSignalRRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.NegotiateSignalRRequest
                 * @instance
                 */
                NegotiateSignalRRequest.prototype.projectId = "";

                /**
                 * Verifies a NegotiateSignalRRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.NegotiateSignalRRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NegotiateSignalRRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a NegotiateSignalRRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.NegotiateSignalRRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.NegotiateSignalRRequest} NegotiateSignalRRequest
                 */
                NegotiateSignalRRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.NegotiateSignalRRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.NegotiateSignalRRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a NegotiateSignalRRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.NegotiateSignalRRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.NegotiateSignalRRequest} message NegotiateSignalRRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NegotiateSignalRRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this NegotiateSignalRRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.NegotiateSignalRRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NegotiateSignalRRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NegotiateSignalRRequest;
            })();

            v1.OrganizationAuditAPI = (function() {

                /**
                 * Constructs a new OrganizationAuditAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an OrganizationAuditAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function OrganizationAuditAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (OrganizationAuditAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = OrganizationAuditAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationAuditAPI#getAuditCommands}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationAuditAPI
                 * @typedef GetAuditCommandsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StringListDataResult} [response] StringListDataResult
                 */

                /**
                 * Calls GetAuditCommands.
                 * @function getAuditCommands
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationAuditAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetAuditCommandsRequest} request GetAuditCommandsRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationAuditAPI.GetAuditCommandsCallback} callback Node-style callback called with the error, if any, and StringListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationAuditAPI.prototype.getAuditCommands = function getAuditCommands(request, callback) {
                    return this.rpcCall(getAuditCommands, $root.colbylwilliams.teamcloud.v1.GetAuditCommandsRequest, $root.colbylwilliams.teamcloud.v1.StringListDataResult, request, callback);
                }, "name", { value: "GetAuditCommands" });

                /**
                 * Calls GetAuditCommands.
                 * @function getAuditCommands
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationAuditAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetAuditCommandsRequest} request GetAuditCommandsRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StringListDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationAuditAPI#getAuditEntries}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationAuditAPI
                 * @typedef GetAuditEntriesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult} [response] CommandAuditEntityListDataResult
                 */

                /**
                 * Calls GetAuditEntries.
                 * @function getAuditEntries
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationAuditAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetAuditEntriesRequest} request GetAuditEntriesRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationAuditAPI.GetAuditEntriesCallback} callback Node-style callback called with the error, if any, and CommandAuditEntityListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationAuditAPI.prototype.getAuditEntries = function getAuditEntries(request, callback) {
                    return this.rpcCall(getAuditEntries, $root.colbylwilliams.teamcloud.v1.GetAuditEntriesRequest, $root.colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult, request, callback);
                }, "name", { value: "GetAuditEntries" });

                /**
                 * Calls GetAuditEntries.
                 * @function getAuditEntries
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationAuditAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetAuditEntriesRequest} request GetAuditEntriesRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.CommandAuditEntityListDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationAuditAPI#getAuditEntry}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationAuditAPI
                 * @typedef GetAuditEntryCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult} [response] CommandAuditEntityDataResult
                 */

                /**
                 * Calls GetAuditEntry.
                 * @function getAuditEntry
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationAuditAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetAuditEntryRequest} request GetAuditEntryRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationAuditAPI.GetAuditEntryCallback} callback Node-style callback called with the error, if any, and CommandAuditEntityDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationAuditAPI.prototype.getAuditEntry = function getAuditEntry(request, callback) {
                    return this.rpcCall(getAuditEntry, $root.colbylwilliams.teamcloud.v1.GetAuditEntryRequest, $root.colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult, request, callback);
                }, "name", { value: "GetAuditEntry" });

                /**
                 * Calls GetAuditEntry.
                 * @function getAuditEntry
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationAuditAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetAuditEntryRequest} request GetAuditEntryRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.CommandAuditEntityDataResult>} Promise
                 * @variation 2
                 */

                return OrganizationAuditAPI;
            })();

            v1.GetAuditCommandsRequest = (function() {

                /**
                 * Properties of a GetAuditCommandsRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetAuditCommandsRequest
                 * @property {string|null} [organizationId] GetAuditCommandsRequest organizationId
                 */

                /**
                 * Constructs a new GetAuditCommandsRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetAuditCommandsRequest.
                 * @implements IGetAuditCommandsRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetAuditCommandsRequest=} [properties] Properties to set
                 */
                function GetAuditCommandsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetAuditCommandsRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditCommandsRequest
                 * @instance
                 */
                GetAuditCommandsRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetAuditCommandsRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditCommandsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetAuditCommandsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetAuditCommandsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditCommandsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetAuditCommandsRequest} GetAuditCommandsRequest
                 */
                GetAuditCommandsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetAuditCommandsRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetAuditCommandsRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetAuditCommandsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditCommandsRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetAuditCommandsRequest} message GetAuditCommandsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetAuditCommandsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.organizationId = "";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetAuditCommandsRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditCommandsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetAuditCommandsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetAuditCommandsRequest;
            })();

            v1.GetAuditEntriesRequest = (function() {

                /**
                 * Properties of a GetAuditEntriesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetAuditEntriesRequest
                 * @property {string|null} [organizationId] GetAuditEntriesRequest organizationId
                 * @property {string|null} [timeRange] GetAuditEntriesRequest timeRange
                 * @property {Array.<string>|null} [commands] GetAuditEntriesRequest commands
                 */

                /**
                 * Constructs a new GetAuditEntriesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetAuditEntriesRequest.
                 * @implements IGetAuditEntriesRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetAuditEntriesRequest=} [properties] Properties to set
                 */
                function GetAuditEntriesRequest(properties) {
                    this.commands = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetAuditEntriesRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntriesRequest
                 * @instance
                 */
                GetAuditEntriesRequest.prototype.organizationId = "";

                /**
                 * GetAuditEntriesRequest timeRange.
                 * @member {string} timeRange
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntriesRequest
                 * @instance
                 */
                GetAuditEntriesRequest.prototype.timeRange = "";

                /**
                 * GetAuditEntriesRequest commands.
                 * @member {Array.<string>} commands
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntriesRequest
                 * @instance
                 */
                GetAuditEntriesRequest.prototype.commands = $util.emptyArray;

                /**
                 * Verifies a GetAuditEntriesRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntriesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetAuditEntriesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.timeRange != null && message.hasOwnProperty("timeRange"))
                        if (!$util.isString(message.timeRange))
                            return "timeRange: string expected";
                    if (message.commands != null && message.hasOwnProperty("commands")) {
                        if (!Array.isArray(message.commands))
                            return "commands: array expected";
                        for (let i = 0; i < message.commands.length; ++i)
                            if (!$util.isString(message.commands[i]))
                                return "commands: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a GetAuditEntriesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntriesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetAuditEntriesRequest} GetAuditEntriesRequest
                 */
                GetAuditEntriesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetAuditEntriesRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetAuditEntriesRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.timeRange != null)
                        message.timeRange = String(object.timeRange);
                    if (object.commands) {
                        if (!Array.isArray(object.commands))
                            throw TypeError(".colbylwilliams.teamcloud.v1.GetAuditEntriesRequest.commands: array expected");
                        message.commands = [];
                        for (let i = 0; i < object.commands.length; ++i)
                            message.commands[i] = String(object.commands[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GetAuditEntriesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntriesRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetAuditEntriesRequest} message GetAuditEntriesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetAuditEntriesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.commands = [];
                    if (options.defaults) {
                        object.organizationId = "";
                        object.timeRange = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.timeRange != null && message.hasOwnProperty("timeRange"))
                        object.timeRange = message.timeRange;
                    if (message.commands && message.commands.length) {
                        object.commands = [];
                        for (let j = 0; j < message.commands.length; ++j)
                            object.commands[j] = message.commands[j];
                    }
                    return object;
                };

                /**
                 * Converts this GetAuditEntriesRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntriesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetAuditEntriesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetAuditEntriesRequest;
            })();

            v1.GetAuditEntryRequest = (function() {

                /**
                 * Properties of a GetAuditEntryRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetAuditEntryRequest
                 * @property {string|null} [commandId] GetAuditEntryRequest commandId
                 * @property {string|null} [organizationId] GetAuditEntryRequest organizationId
                 * @property {boolean|null} [expand] GetAuditEntryRequest expand
                 */

                /**
                 * Constructs a new GetAuditEntryRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetAuditEntryRequest.
                 * @implements IGetAuditEntryRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetAuditEntryRequest=} [properties] Properties to set
                 */
                function GetAuditEntryRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetAuditEntryRequest commandId.
                 * @member {string} commandId
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntryRequest
                 * @instance
                 */
                GetAuditEntryRequest.prototype.commandId = "";

                /**
                 * GetAuditEntryRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntryRequest
                 * @instance
                 */
                GetAuditEntryRequest.prototype.organizationId = "";

                /**
                 * GetAuditEntryRequest expand.
                 * @member {boolean} expand
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntryRequest
                 * @instance
                 */
                GetAuditEntryRequest.prototype.expand = false;

                /**
                 * Verifies a GetAuditEntryRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntryRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetAuditEntryRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        if (!$util.isString(message.commandId))
                            return "commandId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.expand != null && message.hasOwnProperty("expand"))
                        if (typeof message.expand !== "boolean")
                            return "expand: boolean expected";
                    return null;
                };

                /**
                 * Creates a GetAuditEntryRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntryRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetAuditEntryRequest} GetAuditEntryRequest
                 */
                GetAuditEntryRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetAuditEntryRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetAuditEntryRequest();
                    if (object.commandId != null)
                        message.commandId = String(object.commandId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.expand != null)
                        message.expand = Boolean(object.expand);
                    return message;
                };

                /**
                 * Creates a plain object from a GetAuditEntryRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntryRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetAuditEntryRequest} message GetAuditEntryRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetAuditEntryRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.commandId = "";
                        object.organizationId = "";
                        object.expand = false;
                    }
                    if (message.commandId != null && message.hasOwnProperty("commandId"))
                        object.commandId = message.commandId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.expand != null && message.hasOwnProperty("expand"))
                        object.expand = message.expand;
                    return object;
                };

                /**
                 * Converts this GetAuditEntryRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetAuditEntryRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetAuditEntryRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetAuditEntryRequest;
            })();

            v1.StringListDataResult = (function() {

                /**
                 * Properties of a StringListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IStringListDataResult
                 * @property {number|null} [code] StringListDataResult code
                 * @property {string|null} [status] StringListDataResult status
                 * @property {Array.<string>|null} [data] StringListDataResult data
                 * @property {string|null} [location] StringListDataResult location
                 */

                /**
                 * Constructs a new StringListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a StringListDataResult.
                 * @implements IStringListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IStringListDataResult=} [properties] Properties to set
                 */
                function StringListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * StringListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.StringListDataResult
                 * @instance
                 */
                StringListDataResult.prototype.code = 0;

                /**
                 * StringListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.StringListDataResult
                 * @instance
                 */
                StringListDataResult.prototype.status = null;

                /**
                 * StringListDataResult data.
                 * @member {Array.<string>} data
                 * @memberof colbylwilliams.teamcloud.v1.StringListDataResult
                 * @instance
                 */
                StringListDataResult.prototype.data = $util.emptyArray;

                /**
                 * StringListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.StringListDataResult
                 * @instance
                 */
                StringListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * StringListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.StringListDataResult
                 * @instance
                 */
                Object.defineProperty(StringListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * StringListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.StringListDataResult
                 * @instance
                 */
                Object.defineProperty(StringListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a StringListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.StringListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StringListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i)
                            if (!$util.isString(message.data[i]))
                                return "data: string[] expected";
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a StringListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.StringListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.StringListDataResult} StringListDataResult
                 */
                StringListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.StringListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.StringListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.StringListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i)
                            message.data[i] = String(object.data[i]);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a StringListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.StringListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.StringListDataResult} message StringListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StringListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = message.data[j];
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this StringListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.StringListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StringListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return StringListDataResult;
            })();

            v1.OrganizationDataResult = (function() {

                /**
                 * Properties of an OrganizationDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IOrganizationDataResult
                 * @property {number|null} [code] OrganizationDataResult code
                 * @property {string|null} [status] OrganizationDataResult status
                 * @property {colbylwilliams.teamcloud.v1.IOrganization|null} [data] OrganizationDataResult data
                 * @property {string|null} [location] OrganizationDataResult location
                 */

                /**
                 * Constructs a new OrganizationDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an OrganizationDataResult.
                 * @implements IOrganizationDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IOrganizationDataResult=} [properties] Properties to set
                 */
                function OrganizationDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * OrganizationDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDataResult
                 * @instance
                 */
                OrganizationDataResult.prototype.code = 0;

                /**
                 * OrganizationDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDataResult
                 * @instance
                 */
                OrganizationDataResult.prototype.status = null;

                /**
                 * OrganizationDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.IOrganization|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDataResult
                 * @instance
                 */
                OrganizationDataResult.prototype.data = null;

                /**
                 * OrganizationDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDataResult
                 * @instance
                 */
                OrganizationDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * OrganizationDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDataResult
                 * @instance
                 */
                Object.defineProperty(OrganizationDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * OrganizationDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDataResult
                 * @instance
                 */
                Object.defineProperty(OrganizationDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies an OrganizationDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OrganizationDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.Organization.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates an OrganizationDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.OrganizationDataResult} OrganizationDataResult
                 */
                OrganizationDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.OrganizationDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.OrganizationDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.OrganizationDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.Organization.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from an OrganizationDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.OrganizationDataResult} message OrganizationDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OrganizationDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.Organization.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this OrganizationDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OrganizationDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return OrganizationDataResult;
            })();

            v1.Organization = (function() {

                /**
                 * Properties of an Organization.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IOrganization
                 * @property {string|null} [tenant] Organization tenant
                 * @property {string|null} [slug] Organization slug
                 * @property {string|null} [displayName] Organization displayName
                 * @property {string|null} [subscriptionId] Organization subscriptionId
                 * @property {string|null} [location] Organization location
                 * @property {Object.<string,string>|null} [tags] Organization tags
                 * @property {string|null} [resourceId] Organization resourceId
                 * @property {colbylwilliams.teamcloud.v1.Organization.ResourceStateEnum|null} [resourceState] Organization resourceState
                 * @property {string|null} [secretsVaultId] Organization secretsVaultId
                 * @property {string|null} [galleryId] Organization galleryId
                 * @property {string|null} [registryId] Organization registryId
                 * @property {string|null} [storageId] Organization storageId
                 * @property {string|null} [id] Organization id
                 */

                /**
                 * Constructs a new Organization.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an Organization.
                 * @implements IOrganization
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IOrganization=} [properties] Properties to set
                 */
                function Organization(properties) {
                    this.tags = {};
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Organization tenant.
                 * @member {string} tenant
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.tenant = "";

                /**
                 * Organization slug.
                 * @member {string} slug
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.slug = "";

                /**
                 * Organization displayName.
                 * @member {string} displayName
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.displayName = "";

                /**
                 * Organization subscriptionId.
                 * @member {string} subscriptionId
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.subscriptionId = "";

                /**
                 * Organization location.
                 * @member {string} location
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.location = "";

                /**
                 * Organization tags.
                 * @member {Object.<string,string>} tags
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.tags = $util.emptyObject;

                /**
                 * Organization resourceId.
                 * @member {string|null|undefined} resourceId
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.resourceId = null;

                /**
                 * Organization resourceState.
                 * @member {colbylwilliams.teamcloud.v1.Organization.ResourceStateEnum} resourceState
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.resourceState = 0;

                /**
                 * Organization secretsVaultId.
                 * @member {string|null|undefined} secretsVaultId
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.secretsVaultId = null;

                /**
                 * Organization galleryId.
                 * @member {string|null|undefined} galleryId
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.galleryId = null;

                /**
                 * Organization registryId.
                 * @member {string|null|undefined} registryId
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.registryId = null;

                /**
                 * Organization storageId.
                 * @member {string|null|undefined} storageId
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.storageId = null;

                /**
                 * Organization id.
                 * @member {string} id
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Organization.prototype.id = "";

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * Organization _resourceId.
                 * @member {"resourceId"|undefined} _resourceId
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Object.defineProperty(Organization.prototype, "_resourceId", {
                    get: $util.oneOfGetter($oneOfFields = ["resourceId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Organization _secretsVaultId.
                 * @member {"secretsVaultId"|undefined} _secretsVaultId
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Object.defineProperty(Organization.prototype, "_secretsVaultId", {
                    get: $util.oneOfGetter($oneOfFields = ["secretsVaultId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Organization _galleryId.
                 * @member {"galleryId"|undefined} _galleryId
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Object.defineProperty(Organization.prototype, "_galleryId", {
                    get: $util.oneOfGetter($oneOfFields = ["galleryId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Organization _registryId.
                 * @member {"registryId"|undefined} _registryId
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Object.defineProperty(Organization.prototype, "_registryId", {
                    get: $util.oneOfGetter($oneOfFields = ["registryId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Organization _storageId.
                 * @member {"storageId"|undefined} _storageId
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 */
                Object.defineProperty(Organization.prototype, "_storageId", {
                    get: $util.oneOfGetter($oneOfFields = ["storageId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies an Organization message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Organization.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.tenant != null && message.hasOwnProperty("tenant"))
                        if (!$util.isString(message.tenant))
                            return "tenant: string expected";
                    if (message.slug != null && message.hasOwnProperty("slug"))
                        if (!$util.isString(message.slug))
                            return "slug: string expected";
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    if (message.subscriptionId != null && message.hasOwnProperty("subscriptionId"))
                        if (!$util.isString(message.subscriptionId))
                            return "subscriptionId: string expected";
                    if (message.location != null && message.hasOwnProperty("location"))
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    if (message.tags != null && message.hasOwnProperty("tags")) {
                        if (!$util.isObject(message.tags))
                            return "tags: object expected";
                        let key = Object.keys(message.tags);
                        for (let i = 0; i < key.length; ++i)
                            if (!$util.isString(message.tags[key[i]]))
                                return "tags: string{k:string} expected";
                    }
                    if (message.resourceId != null && message.hasOwnProperty("resourceId")) {
                        properties._resourceId = 1;
                        if (!$util.isString(message.resourceId))
                            return "resourceId: string expected";
                    }
                    if (message.resourceState != null && message.hasOwnProperty("resourceState"))
                        switch (message.resourceState) {
                        default:
                            return "resourceState: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            break;
                        }
                    if (message.secretsVaultId != null && message.hasOwnProperty("secretsVaultId")) {
                        properties._secretsVaultId = 1;
                        if (!$util.isString(message.secretsVaultId))
                            return "secretsVaultId: string expected";
                    }
                    if (message.galleryId != null && message.hasOwnProperty("galleryId")) {
                        properties._galleryId = 1;
                        if (!$util.isString(message.galleryId))
                            return "galleryId: string expected";
                    }
                    if (message.registryId != null && message.hasOwnProperty("registryId")) {
                        properties._registryId = 1;
                        if (!$util.isString(message.registryId))
                            return "registryId: string expected";
                    }
                    if (message.storageId != null && message.hasOwnProperty("storageId")) {
                        properties._storageId = 1;
                        if (!$util.isString(message.storageId))
                            return "storageId: string expected";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    return null;
                };

                /**
                 * Creates an Organization message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.Organization} Organization
                 */
                Organization.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.Organization)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.Organization();
                    if (object.tenant != null)
                        message.tenant = String(object.tenant);
                    if (object.slug != null)
                        message.slug = String(object.slug);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.subscriptionId != null)
                        message.subscriptionId = String(object.subscriptionId);
                    if (object.location != null)
                        message.location = String(object.location);
                    if (object.tags) {
                        if (typeof object.tags !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.Organization.tags: object expected");
                        message.tags = {};
                        for (let keys = Object.keys(object.tags), i = 0; i < keys.length; ++i)
                            message.tags[keys[i]] = String(object.tags[keys[i]]);
                    }
                    if (object.resourceId != null)
                        message.resourceId = String(object.resourceId);
                    switch (object.resourceState) {
                    case "PENDING":
                    case 0:
                        message.resourceState = 0;
                        break;
                    case "INITIALIZING":
                    case 1:
                        message.resourceState = 1;
                        break;
                    case "PROVISIONING":
                    case 2:
                        message.resourceState = 2;
                        break;
                    case "PROVISIONED":
                    case 3:
                        message.resourceState = 3;
                        break;
                    case "DEPROVISIONING":
                    case 4:
                        message.resourceState = 4;
                        break;
                    case "DEPROVISIONED":
                    case 5:
                        message.resourceState = 5;
                        break;
                    case "FAILED":
                    case 6:
                        message.resourceState = 6;
                        break;
                    }
                    if (object.secretsVaultId != null)
                        message.secretsVaultId = String(object.secretsVaultId);
                    if (object.galleryId != null)
                        message.galleryId = String(object.galleryId);
                    if (object.registryId != null)
                        message.registryId = String(object.registryId);
                    if (object.storageId != null)
                        message.storageId = String(object.storageId);
                    if (object.id != null)
                        message.id = String(object.id);
                    return message;
                };

                /**
                 * Creates a plain object from an Organization message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.Organization} message Organization
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Organization.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.objects || options.defaults)
                        object.tags = {};
                    if (options.defaults) {
                        object.id = "";
                        object.slug = "";
                        object.displayName = "";
                        object.location = "";
                        object.tenant = "";
                        object.subscriptionId = "";
                        object.resourceState = options.enums === String ? "PENDING" : 0;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.slug != null && message.hasOwnProperty("slug"))
                        object.slug = message.slug;
                    let keys2;
                    if (message.tags && (keys2 = Object.keys(message.tags)).length) {
                        object.tags = {};
                        for (let j = 0; j < keys2.length; ++j)
                            object.tags[keys2[j]] = message.tags[keys2[j]];
                    }
                    if (message.storageId != null && message.hasOwnProperty("storageId")) {
                        object.storageId = message.storageId;
                        if (options.oneofs)
                            object._storageId = "storageId";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        object.displayName = message.displayName;
                    if (message.registryId != null && message.hasOwnProperty("registryId")) {
                        object.registryId = message.registryId;
                        if (options.oneofs)
                            object._registryId = "registryId";
                    }
                    if (message.resourceId != null && message.hasOwnProperty("resourceId")) {
                        object.resourceId = message.resourceId;
                        if (options.oneofs)
                            object._resourceId = "resourceId";
                    }
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = message.location;
                    if (message.galleryId != null && message.hasOwnProperty("galleryId")) {
                        object.galleryId = message.galleryId;
                        if (options.oneofs)
                            object._galleryId = "galleryId";
                    }
                    if (message.tenant != null && message.hasOwnProperty("tenant"))
                        object.tenant = message.tenant;
                    if (message.subscriptionId != null && message.hasOwnProperty("subscriptionId"))
                        object.subscriptionId = message.subscriptionId;
                    if (message.resourceState != null && message.hasOwnProperty("resourceState"))
                        object.resourceState = options.enums === String ? $root.colbylwilliams.teamcloud.v1.Organization.ResourceStateEnum[message.resourceState] : message.resourceState;
                    if (message.secretsVaultId != null && message.hasOwnProperty("secretsVaultId")) {
                        object.secretsVaultId = message.secretsVaultId;
                        if (options.oneofs)
                            object._secretsVaultId = "secretsVaultId";
                    }
                    return object;
                };

                /**
                 * Converts this Organization to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.Organization
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Organization.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * ResourceStateEnum enum.
                 * @name colbylwilliams.teamcloud.v1.Organization.ResourceStateEnum
                 * @enum {number}
                 * @property {number} PENDING=0 PENDING value
                 * @property {number} INITIALIZING=1 INITIALIZING value
                 * @property {number} PROVISIONING=2 PROVISIONING value
                 * @property {number} PROVISIONED=3 PROVISIONED value
                 * @property {number} DEPROVISIONING=4 DEPROVISIONING value
                 * @property {number} DEPROVISIONED=5 DEPROVISIONED value
                 * @property {number} FAILED=6 FAILED value
                 */
                Organization.ResourceStateEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "PENDING"] = 0;
                    values[valuesById[1] = "INITIALIZING"] = 1;
                    values[valuesById[2] = "PROVISIONING"] = 2;
                    values[valuesById[3] = "PROVISIONED"] = 3;
                    values[valuesById[4] = "DEPROVISIONING"] = 4;
                    values[valuesById[5] = "DEPROVISIONED"] = 5;
                    values[valuesById[6] = "FAILED"] = 6;
                    return values;
                })();

                return Organization;
            })();

            v1.OrganizationDefinition = (function() {

                /**
                 * Properties of an OrganizationDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IOrganizationDefinition
                 * @property {string|null} [slug] OrganizationDefinition slug
                 * @property {string|null} [displayName] OrganizationDefinition displayName
                 * @property {string|null} [subscriptionId] OrganizationDefinition subscriptionId
                 * @property {string|null} [location] OrganizationDefinition location
                 * @property {Object.<string,string>|null} [tags] OrganizationDefinition tags
                 */

                /**
                 * Constructs a new OrganizationDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an OrganizationDefinition.
                 * @implements IOrganizationDefinition
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IOrganizationDefinition=} [properties] Properties to set
                 */
                function OrganizationDefinition(properties) {
                    this.tags = {};
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * OrganizationDefinition slug.
                 * @member {string|null|undefined} slug
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDefinition
                 * @instance
                 */
                OrganizationDefinition.prototype.slug = null;

                /**
                 * OrganizationDefinition displayName.
                 * @member {string} displayName
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDefinition
                 * @instance
                 */
                OrganizationDefinition.prototype.displayName = "";

                /**
                 * OrganizationDefinition subscriptionId.
                 * @member {string} subscriptionId
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDefinition
                 * @instance
                 */
                OrganizationDefinition.prototype.subscriptionId = "";

                /**
                 * OrganizationDefinition location.
                 * @member {string} location
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDefinition
                 * @instance
                 */
                OrganizationDefinition.prototype.location = "";

                /**
                 * OrganizationDefinition tags.
                 * @member {Object.<string,string>} tags
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDefinition
                 * @instance
                 */
                OrganizationDefinition.prototype.tags = $util.emptyObject;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * OrganizationDefinition _slug.
                 * @member {"slug"|undefined} _slug
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDefinition
                 * @instance
                 */
                Object.defineProperty(OrganizationDefinition.prototype, "_slug", {
                    get: $util.oneOfGetter($oneOfFields = ["slug"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies an OrganizationDefinition message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDefinition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OrganizationDefinition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.slug != null && message.hasOwnProperty("slug")) {
                        properties._slug = 1;
                        if (!$util.isString(message.slug))
                            return "slug: string expected";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    if (message.subscriptionId != null && message.hasOwnProperty("subscriptionId"))
                        if (!$util.isString(message.subscriptionId))
                            return "subscriptionId: string expected";
                    if (message.location != null && message.hasOwnProperty("location"))
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    if (message.tags != null && message.hasOwnProperty("tags")) {
                        if (!$util.isObject(message.tags))
                            return "tags: object expected";
                        let key = Object.keys(message.tags);
                        for (let i = 0; i < key.length; ++i)
                            if (!$util.isString(message.tags[key[i]]))
                                return "tags: string{k:string} expected";
                    }
                    return null;
                };

                /**
                 * Creates an OrganizationDefinition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDefinition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.OrganizationDefinition} OrganizationDefinition
                 */
                OrganizationDefinition.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.OrganizationDefinition)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.OrganizationDefinition();
                    if (object.slug != null)
                        message.slug = String(object.slug);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.subscriptionId != null)
                        message.subscriptionId = String(object.subscriptionId);
                    if (object.location != null)
                        message.location = String(object.location);
                    if (object.tags) {
                        if (typeof object.tags !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.OrganizationDefinition.tags: object expected");
                        message.tags = {};
                        for (let keys = Object.keys(object.tags), i = 0; i < keys.length; ++i)
                            message.tags[keys[i]] = String(object.tags[keys[i]]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an OrganizationDefinition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDefinition
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.OrganizationDefinition} message OrganizationDefinition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OrganizationDefinition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.objects || options.defaults)
                        object.tags = {};
                    if (options.defaults) {
                        object.displayName = "";
                        object.location = "";
                        object.subscriptionId = "";
                    }
                    if (message.slug != null && message.hasOwnProperty("slug")) {
                        object.slug = message.slug;
                        if (options.oneofs)
                            object._slug = "slug";
                    }
                    let keys2;
                    if (message.tags && (keys2 = Object.keys(message.tags)).length) {
                        object.tags = {};
                        for (let j = 0; j < keys2.length; ++j)
                            object.tags[keys2[j]] = message.tags[keys2[j]];
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        object.displayName = message.displayName;
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = message.location;
                    if (message.subscriptionId != null && message.hasOwnProperty("subscriptionId"))
                        object.subscriptionId = message.subscriptionId;
                    return object;
                };

                /**
                 * Converts this OrganizationDefinition to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationDefinition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OrganizationDefinition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return OrganizationDefinition;
            })();

            v1.OrganizationListDataResult = (function() {

                /**
                 * Properties of an OrganizationListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IOrganizationListDataResult
                 * @property {number|null} [code] OrganizationListDataResult code
                 * @property {string|null} [status] OrganizationListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.IOrganization>|null} [data] OrganizationListDataResult data
                 * @property {string|null} [location] OrganizationListDataResult location
                 */

                /**
                 * Constructs a new OrganizationListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an OrganizationListDataResult.
                 * @implements IOrganizationListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IOrganizationListDataResult=} [properties] Properties to set
                 */
                function OrganizationListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * OrganizationListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationListDataResult
                 * @instance
                 */
                OrganizationListDataResult.prototype.code = 0;

                /**
                 * OrganizationListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationListDataResult
                 * @instance
                 */
                OrganizationListDataResult.prototype.status = null;

                /**
                 * OrganizationListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IOrganization>} data
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationListDataResult
                 * @instance
                 */
                OrganizationListDataResult.prototype.data = $util.emptyArray;

                /**
                 * OrganizationListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationListDataResult
                 * @instance
                 */
                OrganizationListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * OrganizationListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationListDataResult
                 * @instance
                 */
                Object.defineProperty(OrganizationListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * OrganizationListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationListDataResult
                 * @instance
                 */
                Object.defineProperty(OrganizationListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies an OrganizationListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OrganizationListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.Organization.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates an OrganizationListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.OrganizationListDataResult} OrganizationListDataResult
                 */
                OrganizationListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.OrganizationListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.OrganizationListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.OrganizationListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.OrganizationListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.Organization.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from an OrganizationListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.OrganizationListDataResult} message OrganizationListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OrganizationListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.Organization.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this OrganizationListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OrganizationListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return OrganizationListDataResult;
            })();

            v1.OrganizationsAPI = (function() {

                /**
                 * Constructs a new OrganizationsAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an OrganizationsAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function OrganizationsAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (OrganizationsAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = OrganizationsAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationsAPI#createOrganization}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @typedef CreateOrganizationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.OrganizationDataResult} [response] OrganizationDataResult
                 */

                /**
                 * Calls CreateOrganization.
                 * @function createOrganization
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateOrganizationRequest} request CreateOrganizationRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationsAPI.CreateOrganizationCallback} callback Node-style callback called with the error, if any, and OrganizationDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationsAPI.prototype.createOrganization = function createOrganization(request, callback) {
                    return this.rpcCall(createOrganization, $root.colbylwilliams.teamcloud.v1.CreateOrganizationRequest, $root.colbylwilliams.teamcloud.v1.OrganizationDataResult, request, callback);
                }, "name", { value: "CreateOrganization" });

                /**
                 * Calls CreateOrganization.
                 * @function createOrganization
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateOrganizationRequest} request CreateOrganizationRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.OrganizationDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationsAPI#deleteOrganization}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @typedef DeleteOrganizationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} [response] StatusResult
                 */

                /**
                 * Calls DeleteOrganization.
                 * @function deleteOrganization
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteOrganizationRequest} request DeleteOrganizationRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationsAPI.DeleteOrganizationCallback} callback Node-style callback called with the error, if any, and StatusResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationsAPI.prototype.deleteOrganization = function deleteOrganization(request, callback) {
                    return this.rpcCall(deleteOrganization, $root.colbylwilliams.teamcloud.v1.DeleteOrganizationRequest, $root.colbylwilliams.teamcloud.v1.StatusResult, request, callback);
                }, "name", { value: "DeleteOrganization" });

                /**
                 * Calls DeleteOrganization.
                 * @function deleteOrganization
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteOrganizationRequest} request DeleteOrganizationRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StatusResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationsAPI#getOrganization}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @typedef GetOrganizationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.OrganizationDataResult} [response] OrganizationDataResult
                 */

                /**
                 * Calls GetOrganization.
                 * @function getOrganization
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationRequest} request GetOrganizationRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationsAPI.GetOrganizationCallback} callback Node-style callback called with the error, if any, and OrganizationDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationsAPI.prototype.getOrganization = function getOrganization(request, callback) {
                    return this.rpcCall(getOrganization, $root.colbylwilliams.teamcloud.v1.GetOrganizationRequest, $root.colbylwilliams.teamcloud.v1.OrganizationDataResult, request, callback);
                }, "name", { value: "GetOrganization" });

                /**
                 * Calls GetOrganization.
                 * @function getOrganization
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationRequest} request GetOrganizationRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.OrganizationDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationsAPI#getOrganizations}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @typedef GetOrganizationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.OrganizationListDataResult} [response] OrganizationListDataResult
                 */

                /**
                 * Calls GetOrganizations.
                 * @function getOrganizations
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @instance
                 * @param {google.protobuf.IEmpty} request Empty message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationsAPI.GetOrganizationsCallback} callback Node-style callback called with the error, if any, and OrganizationListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationsAPI.prototype.getOrganizations = function getOrganizations(request, callback) {
                    return this.rpcCall(getOrganizations, $root.google.protobuf.Empty, $root.colbylwilliams.teamcloud.v1.OrganizationListDataResult, request, callback);
                }, "name", { value: "GetOrganizations" });

                /**
                 * Calls GetOrganizations.
                 * @function getOrganizations
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationsAPI
                 * @instance
                 * @param {google.protobuf.IEmpty} request Empty message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.OrganizationListDataResult>} Promise
                 * @variation 2
                 */

                return OrganizationsAPI;
            })();

            v1.CreateOrganizationRequest = (function() {

                /**
                 * Properties of a CreateOrganizationRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICreateOrganizationRequest
                 * @property {colbylwilliams.teamcloud.v1.IOrganizationDefinition|null} [organizationDefinition] CreateOrganizationRequest organizationDefinition
                 */

                /**
                 * Constructs a new CreateOrganizationRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CreateOrganizationRequest.
                 * @implements ICreateOrganizationRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICreateOrganizationRequest=} [properties] Properties to set
                 */
                function CreateOrganizationRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateOrganizationRequest organizationDefinition.
                 * @member {colbylwilliams.teamcloud.v1.IOrganizationDefinition|null|undefined} organizationDefinition
                 * @memberof colbylwilliams.teamcloud.v1.CreateOrganizationRequest
                 * @instance
                 */
                CreateOrganizationRequest.prototype.organizationDefinition = null;

                /**
                 * Verifies a CreateOrganizationRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CreateOrganizationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateOrganizationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationDefinition != null && message.hasOwnProperty("organizationDefinition")) {
                        let error = $root.colbylwilliams.teamcloud.v1.OrganizationDefinition.verify(message.organizationDefinition);
                        if (error)
                            return "organizationDefinition." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CreateOrganizationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateOrganizationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CreateOrganizationRequest} CreateOrganizationRequest
                 */
                CreateOrganizationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CreateOrganizationRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CreateOrganizationRequest();
                    if (object.organizationDefinition != null) {
                        if (typeof object.organizationDefinition !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.CreateOrganizationRequest.organizationDefinition: object expected");
                        message.organizationDefinition = $root.colbylwilliams.teamcloud.v1.OrganizationDefinition.fromObject(object.organizationDefinition);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CreateOrganizationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateOrganizationRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CreateOrganizationRequest} message CreateOrganizationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateOrganizationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.organizationDefinition = null;
                    if (message.organizationDefinition != null && message.hasOwnProperty("organizationDefinition"))
                        object.organizationDefinition = $root.colbylwilliams.teamcloud.v1.OrganizationDefinition.toObject(message.organizationDefinition, options);
                    return object;
                };

                /**
                 * Converts this CreateOrganizationRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CreateOrganizationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateOrganizationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CreateOrganizationRequest;
            })();

            v1.DeleteOrganizationRequest = (function() {

                /**
                 * Properties of a DeleteOrganizationRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeleteOrganizationRequest
                 * @property {string|null} [organizationId] DeleteOrganizationRequest organizationId
                 */

                /**
                 * Constructs a new DeleteOrganizationRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeleteOrganizationRequest.
                 * @implements IDeleteOrganizationRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeleteOrganizationRequest=} [properties] Properties to set
                 */
                function DeleteOrganizationRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteOrganizationRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteOrganizationRequest
                 * @instance
                 */
                DeleteOrganizationRequest.prototype.organizationId = "";

                /**
                 * Verifies a DeleteOrganizationRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeleteOrganizationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteOrganizationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a DeleteOrganizationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteOrganizationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeleteOrganizationRequest} DeleteOrganizationRequest
                 */
                DeleteOrganizationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeleteOrganizationRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeleteOrganizationRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a DeleteOrganizationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteOrganizationRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeleteOrganizationRequest} message DeleteOrganizationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteOrganizationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.organizationId = "";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this DeleteOrganizationRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeleteOrganizationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteOrganizationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeleteOrganizationRequest;
            })();

            v1.GetOrganizationRequest = (function() {

                /**
                 * Properties of a GetOrganizationRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetOrganizationRequest
                 * @property {string|null} [organizationId] GetOrganizationRequest organizationId
                 */

                /**
                 * Constructs a new GetOrganizationRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetOrganizationRequest.
                 * @implements IGetOrganizationRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationRequest=} [properties] Properties to set
                 */
                function GetOrganizationRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetOrganizationRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationRequest
                 * @instance
                 */
                GetOrganizationRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetOrganizationRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOrganizationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetOrganizationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetOrganizationRequest} GetOrganizationRequest
                 */
                GetOrganizationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetOrganizationRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetOrganizationRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetOrganizationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetOrganizationRequest} message GetOrganizationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOrganizationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.organizationId = "";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetOrganizationRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOrganizationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetOrganizationRequest;
            })();

            v1.OrganizationUsersAPI = (function() {

                /**
                 * Constructs a new OrganizationUsersAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an OrganizationUsersAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function OrganizationUsersAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (OrganizationUsersAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = OrganizationUsersAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationUsersAPI#createOrganizationUser}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @typedef CreateOrganizationUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserDataResult} [response] UserDataResult
                 */

                /**
                 * Calls CreateOrganizationUser.
                 * @function createOrganizationUser
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateOrganizationUserRequest} request CreateOrganizationUserRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationUsersAPI.CreateOrganizationUserCallback} callback Node-style callback called with the error, if any, and UserDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationUsersAPI.prototype.createOrganizationUser = function createOrganizationUser(request, callback) {
                    return this.rpcCall(createOrganizationUser, $root.colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest, $root.colbylwilliams.teamcloud.v1.UserDataResult, request, callback);
                }, "name", { value: "CreateOrganizationUser" });

                /**
                 * Calls CreateOrganizationUser.
                 * @function createOrganizationUser
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateOrganizationUserRequest} request CreateOrganizationUserRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationUsersAPI#deleteOrganizationUser}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @typedef DeleteOrganizationUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} [response] StatusResult
                 */

                /**
                 * Calls DeleteOrganizationUser.
                 * @function deleteOrganizationUser
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteOrganizationUserRequest} request DeleteOrganizationUserRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationUsersAPI.DeleteOrganizationUserCallback} callback Node-style callback called with the error, if any, and StatusResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationUsersAPI.prototype.deleteOrganizationUser = function deleteOrganizationUser(request, callback) {
                    return this.rpcCall(deleteOrganizationUser, $root.colbylwilliams.teamcloud.v1.DeleteOrganizationUserRequest, $root.colbylwilliams.teamcloud.v1.StatusResult, request, callback);
                }, "name", { value: "DeleteOrganizationUser" });

                /**
                 * Calls DeleteOrganizationUser.
                 * @function deleteOrganizationUser
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteOrganizationUserRequest} request DeleteOrganizationUserRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StatusResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationUsersAPI#getOrganizationUser}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @typedef GetOrganizationUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserDataResult} [response] UserDataResult
                 */

                /**
                 * Calls GetOrganizationUser.
                 * @function getOrganizationUser
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationUserRequest} request GetOrganizationUserRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationUsersAPI.GetOrganizationUserCallback} callback Node-style callback called with the error, if any, and UserDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationUsersAPI.prototype.getOrganizationUser = function getOrganizationUser(request, callback) {
                    return this.rpcCall(getOrganizationUser, $root.colbylwilliams.teamcloud.v1.GetOrganizationUserRequest, $root.colbylwilliams.teamcloud.v1.UserDataResult, request, callback);
                }, "name", { value: "GetOrganizationUser" });

                /**
                 * Calls GetOrganizationUser.
                 * @function getOrganizationUser
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationUserRequest} request GetOrganizationUserRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationUsersAPI#getOrganizationUserMe}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @typedef GetOrganizationUserMeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserDataResult} [response] UserDataResult
                 */

                /**
                 * Calls GetOrganizationUserMe.
                 * @function getOrganizationUserMe
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationUserMeRequest} request GetOrganizationUserMeRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationUsersAPI.GetOrganizationUserMeCallback} callback Node-style callback called with the error, if any, and UserDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationUsersAPI.prototype.getOrganizationUserMe = function getOrganizationUserMe(request, callback) {
                    return this.rpcCall(getOrganizationUserMe, $root.colbylwilliams.teamcloud.v1.GetOrganizationUserMeRequest, $root.colbylwilliams.teamcloud.v1.UserDataResult, request, callback);
                }, "name", { value: "GetOrganizationUserMe" });

                /**
                 * Calls GetOrganizationUserMe.
                 * @function getOrganizationUserMe
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationUserMeRequest} request GetOrganizationUserMeRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationUsersAPI#getOrganizationUsers}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @typedef GetOrganizationUsersCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserListDataResult} [response] UserListDataResult
                 */

                /**
                 * Calls GetOrganizationUsers.
                 * @function getOrganizationUsers
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationUsersRequest} request GetOrganizationUsersRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationUsersAPI.GetOrganizationUsersCallback} callback Node-style callback called with the error, if any, and UserListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationUsersAPI.prototype.getOrganizationUsers = function getOrganizationUsers(request, callback) {
                    return this.rpcCall(getOrganizationUsers, $root.colbylwilliams.teamcloud.v1.GetOrganizationUsersRequest, $root.colbylwilliams.teamcloud.v1.UserListDataResult, request, callback);
                }, "name", { value: "GetOrganizationUsers" });

                /**
                 * Calls GetOrganizationUsers.
                 * @function getOrganizationUsers
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationUsersRequest} request GetOrganizationUsersRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserListDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationUsersAPI#updateOrganizationUser}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @typedef UpdateOrganizationUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserDataResult} [response] UserDataResult
                 */

                /**
                 * Calls UpdateOrganizationUser.
                 * @function updateOrganizationUser
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateOrganizationUserRequest} request UpdateOrganizationUserRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationUsersAPI.UpdateOrganizationUserCallback} callback Node-style callback called with the error, if any, and UserDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationUsersAPI.prototype.updateOrganizationUser = function updateOrganizationUser(request, callback) {
                    return this.rpcCall(updateOrganizationUser, $root.colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest, $root.colbylwilliams.teamcloud.v1.UserDataResult, request, callback);
                }, "name", { value: "UpdateOrganizationUser" });

                /**
                 * Calls UpdateOrganizationUser.
                 * @function updateOrganizationUser
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateOrganizationUserRequest} request UpdateOrganizationUserRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.OrganizationUsersAPI#updateOrganizationUserMe}.
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @typedef UpdateOrganizationUserMeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserDataResult} [response] UserDataResult
                 */

                /**
                 * Calls UpdateOrganizationUserMe.
                 * @function updateOrganizationUserMe
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateOrganizationUserMeRequest} request UpdateOrganizationUserMeRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.OrganizationUsersAPI.UpdateOrganizationUserMeCallback} callback Node-style callback called with the error, if any, and UserDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(OrganizationUsersAPI.prototype.updateOrganizationUserMe = function updateOrganizationUserMe(request, callback) {
                    return this.rpcCall(updateOrganizationUserMe, $root.colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest, $root.colbylwilliams.teamcloud.v1.UserDataResult, request, callback);
                }, "name", { value: "UpdateOrganizationUserMe" });

                /**
                 * Calls UpdateOrganizationUserMe.
                 * @function updateOrganizationUserMe
                 * @memberof colbylwilliams.teamcloud.v1.OrganizationUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateOrganizationUserMeRequest} request UpdateOrganizationUserMeRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserDataResult>} Promise
                 * @variation 2
                 */

                return OrganizationUsersAPI;
            })();

            v1.CreateOrganizationUserRequest = (function() {

                /**
                 * Properties of a CreateOrganizationUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICreateOrganizationUserRequest
                 * @property {string|null} [organizationId] CreateOrganizationUserRequest organizationId
                 * @property {colbylwilliams.teamcloud.v1.IUserDefinition|null} [userDefinition] CreateOrganizationUserRequest userDefinition
                 */

                /**
                 * Constructs a new CreateOrganizationUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CreateOrganizationUserRequest.
                 * @implements ICreateOrganizationUserRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICreateOrganizationUserRequest=} [properties] Properties to set
                 */
                function CreateOrganizationUserRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateOrganizationUserRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest
                 * @instance
                 */
                CreateOrganizationUserRequest.prototype.organizationId = "";

                /**
                 * CreateOrganizationUserRequest userDefinition.
                 * @member {colbylwilliams.teamcloud.v1.IUserDefinition|null|undefined} userDefinition
                 * @memberof colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest
                 * @instance
                 */
                CreateOrganizationUserRequest.prototype.userDefinition = null;

                /**
                 * Verifies a CreateOrganizationUserRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateOrganizationUserRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.userDefinition != null && message.hasOwnProperty("userDefinition")) {
                        let error = $root.colbylwilliams.teamcloud.v1.UserDefinition.verify(message.userDefinition);
                        if (error)
                            return "userDefinition." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CreateOrganizationUserRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest} CreateOrganizationUserRequest
                 */
                CreateOrganizationUserRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.userDefinition != null) {
                        if (typeof object.userDefinition !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest.userDefinition: object expected");
                        message.userDefinition = $root.colbylwilliams.teamcloud.v1.UserDefinition.fromObject(object.userDefinition);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CreateOrganizationUserRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest} message CreateOrganizationUserRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateOrganizationUserRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.userDefinition = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.userDefinition != null && message.hasOwnProperty("userDefinition"))
                        object.userDefinition = $root.colbylwilliams.teamcloud.v1.UserDefinition.toObject(message.userDefinition, options);
                    return object;
                };

                /**
                 * Converts this CreateOrganizationUserRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CreateOrganizationUserRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateOrganizationUserRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CreateOrganizationUserRequest;
            })();

            v1.DeleteOrganizationUserRequest = (function() {

                /**
                 * Properties of a DeleteOrganizationUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeleteOrganizationUserRequest
                 * @property {string|null} [userId] DeleteOrganizationUserRequest userId
                 * @property {string|null} [organizationId] DeleteOrganizationUserRequest organizationId
                 */

                /**
                 * Constructs a new DeleteOrganizationUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeleteOrganizationUserRequest.
                 * @implements IDeleteOrganizationUserRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeleteOrganizationUserRequest=} [properties] Properties to set
                 */
                function DeleteOrganizationUserRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteOrganizationUserRequest userId.
                 * @member {string} userId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteOrganizationUserRequest
                 * @instance
                 */
                DeleteOrganizationUserRequest.prototype.userId = "";

                /**
                 * DeleteOrganizationUserRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteOrganizationUserRequest
                 * @instance
                 */
                DeleteOrganizationUserRequest.prototype.organizationId = "";

                /**
                 * Verifies a DeleteOrganizationUserRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeleteOrganizationUserRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteOrganizationUserRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        if (!$util.isString(message.userId))
                            return "userId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a DeleteOrganizationUserRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteOrganizationUserRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeleteOrganizationUserRequest} DeleteOrganizationUserRequest
                 */
                DeleteOrganizationUserRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeleteOrganizationUserRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeleteOrganizationUserRequest();
                    if (object.userId != null)
                        message.userId = String(object.userId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a DeleteOrganizationUserRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteOrganizationUserRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeleteOrganizationUserRequest} message DeleteOrganizationUserRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteOrganizationUserRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.userId = "";
                        object.organizationId = "";
                    }
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        object.userId = message.userId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this DeleteOrganizationUserRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeleteOrganizationUserRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteOrganizationUserRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeleteOrganizationUserRequest;
            })();

            v1.GetOrganizationUserRequest = (function() {

                /**
                 * Properties of a GetOrganizationUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetOrganizationUserRequest
                 * @property {string|null} [userId] GetOrganizationUserRequest userId
                 * @property {string|null} [organizationId] GetOrganizationUserRequest organizationId
                 */

                /**
                 * Constructs a new GetOrganizationUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetOrganizationUserRequest.
                 * @implements IGetOrganizationUserRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationUserRequest=} [properties] Properties to set
                 */
                function GetOrganizationUserRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetOrganizationUserRequest userId.
                 * @member {string} userId
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUserRequest
                 * @instance
                 */
                GetOrganizationUserRequest.prototype.userId = "";

                /**
                 * GetOrganizationUserRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUserRequest
                 * @instance
                 */
                GetOrganizationUserRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetOrganizationUserRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUserRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOrganizationUserRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        if (!$util.isString(message.userId))
                            return "userId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetOrganizationUserRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUserRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetOrganizationUserRequest} GetOrganizationUserRequest
                 */
                GetOrganizationUserRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetOrganizationUserRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetOrganizationUserRequest();
                    if (object.userId != null)
                        message.userId = String(object.userId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetOrganizationUserRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUserRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetOrganizationUserRequest} message GetOrganizationUserRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOrganizationUserRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.userId = "";
                        object.organizationId = "";
                    }
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        object.userId = message.userId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetOrganizationUserRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUserRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOrganizationUserRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetOrganizationUserRequest;
            })();

            v1.GetOrganizationUserMeRequest = (function() {

                /**
                 * Properties of a GetOrganizationUserMeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetOrganizationUserMeRequest
                 * @property {string|null} [organizationId] GetOrganizationUserMeRequest organizationId
                 */

                /**
                 * Constructs a new GetOrganizationUserMeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetOrganizationUserMeRequest.
                 * @implements IGetOrganizationUserMeRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationUserMeRequest=} [properties] Properties to set
                 */
                function GetOrganizationUserMeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetOrganizationUserMeRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUserMeRequest
                 * @instance
                 */
                GetOrganizationUserMeRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetOrganizationUserMeRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUserMeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOrganizationUserMeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetOrganizationUserMeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUserMeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetOrganizationUserMeRequest} GetOrganizationUserMeRequest
                 */
                GetOrganizationUserMeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetOrganizationUserMeRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetOrganizationUserMeRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetOrganizationUserMeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUserMeRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetOrganizationUserMeRequest} message GetOrganizationUserMeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOrganizationUserMeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.organizationId = "";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetOrganizationUserMeRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUserMeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOrganizationUserMeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetOrganizationUserMeRequest;
            })();

            v1.GetOrganizationUsersRequest = (function() {

                /**
                 * Properties of a GetOrganizationUsersRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetOrganizationUsersRequest
                 * @property {string|null} [organizationId] GetOrganizationUsersRequest organizationId
                 */

                /**
                 * Constructs a new GetOrganizationUsersRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetOrganizationUsersRequest.
                 * @implements IGetOrganizationUsersRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetOrganizationUsersRequest=} [properties] Properties to set
                 */
                function GetOrganizationUsersRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetOrganizationUsersRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUsersRequest
                 * @instance
                 */
                GetOrganizationUsersRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetOrganizationUsersRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUsersRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOrganizationUsersRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetOrganizationUsersRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUsersRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetOrganizationUsersRequest} GetOrganizationUsersRequest
                 */
                GetOrganizationUsersRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetOrganizationUsersRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetOrganizationUsersRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetOrganizationUsersRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUsersRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetOrganizationUsersRequest} message GetOrganizationUsersRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOrganizationUsersRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.organizationId = "";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetOrganizationUsersRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetOrganizationUsersRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOrganizationUsersRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetOrganizationUsersRequest;
            })();

            v1.UpdateOrganizationUserRequest = (function() {

                /**
                 * Properties of an UpdateOrganizationUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUpdateOrganizationUserRequest
                 * @property {string|null} [userId] UpdateOrganizationUserRequest userId
                 * @property {string|null} [organizationId] UpdateOrganizationUserRequest organizationId
                 * @property {colbylwilliams.teamcloud.v1.IUser|null} [user] UpdateOrganizationUserRequest user
                 */

                /**
                 * Constructs a new UpdateOrganizationUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an UpdateOrganizationUserRequest.
                 * @implements IUpdateOrganizationUserRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUpdateOrganizationUserRequest=} [properties] Properties to set
                 */
                function UpdateOrganizationUserRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateOrganizationUserRequest userId.
                 * @member {string} userId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest
                 * @instance
                 */
                UpdateOrganizationUserRequest.prototype.userId = "";

                /**
                 * UpdateOrganizationUserRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest
                 * @instance
                 */
                UpdateOrganizationUserRequest.prototype.organizationId = "";

                /**
                 * UpdateOrganizationUserRequest user.
                 * @member {colbylwilliams.teamcloud.v1.IUser|null|undefined} user
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest
                 * @instance
                 */
                UpdateOrganizationUserRequest.prototype.user = null;

                /**
                 * Verifies an UpdateOrganizationUserRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateOrganizationUserRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        if (!$util.isString(message.userId))
                            return "userId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.user != null && message.hasOwnProperty("user")) {
                        let error = $root.colbylwilliams.teamcloud.v1.User.verify(message.user);
                        if (error)
                            return "user." + error;
                    }
                    return null;
                };

                /**
                 * Creates an UpdateOrganizationUserRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest} UpdateOrganizationUserRequest
                 */
                UpdateOrganizationUserRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest();
                    if (object.userId != null)
                        message.userId = String(object.userId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.user != null) {
                        if (typeof object.user !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest.user: object expected");
                        message.user = $root.colbylwilliams.teamcloud.v1.User.fromObject(object.user);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an UpdateOrganizationUserRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest} message UpdateOrganizationUserRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateOrganizationUserRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.userId = "";
                        object.organizationId = "";
                        object.user = null;
                    }
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        object.userId = message.userId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.user != null && message.hasOwnProperty("user"))
                        object.user = $root.colbylwilliams.teamcloud.v1.User.toObject(message.user, options);
                    return object;
                };

                /**
                 * Converts this UpdateOrganizationUserRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateOrganizationUserRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UpdateOrganizationUserRequest;
            })();

            v1.UpdateOrganizationUserMeRequest = (function() {

                /**
                 * Properties of an UpdateOrganizationUserMeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUpdateOrganizationUserMeRequest
                 * @property {string|null} [organizationId] UpdateOrganizationUserMeRequest organizationId
                 * @property {colbylwilliams.teamcloud.v1.IUser|null} [user] UpdateOrganizationUserMeRequest user
                 */

                /**
                 * Constructs a new UpdateOrganizationUserMeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an UpdateOrganizationUserMeRequest.
                 * @implements IUpdateOrganizationUserMeRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUpdateOrganizationUserMeRequest=} [properties] Properties to set
                 */
                function UpdateOrganizationUserMeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateOrganizationUserMeRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest
                 * @instance
                 */
                UpdateOrganizationUserMeRequest.prototype.organizationId = "";

                /**
                 * UpdateOrganizationUserMeRequest user.
                 * @member {colbylwilliams.teamcloud.v1.IUser|null|undefined} user
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest
                 * @instance
                 */
                UpdateOrganizationUserMeRequest.prototype.user = null;

                /**
                 * Verifies an UpdateOrganizationUserMeRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateOrganizationUserMeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.user != null && message.hasOwnProperty("user")) {
                        let error = $root.colbylwilliams.teamcloud.v1.User.verify(message.user);
                        if (error)
                            return "user." + error;
                    }
                    return null;
                };

                /**
                 * Creates an UpdateOrganizationUserMeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest} UpdateOrganizationUserMeRequest
                 */
                UpdateOrganizationUserMeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.user != null) {
                        if (typeof object.user !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest.user: object expected");
                        message.user = $root.colbylwilliams.teamcloud.v1.User.fromObject(object.user);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an UpdateOrganizationUserMeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest} message UpdateOrganizationUserMeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateOrganizationUserMeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.user = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.user != null && message.hasOwnProperty("user"))
                        object.user = $root.colbylwilliams.teamcloud.v1.User.toObject(message.user, options);
                    return object;
                };

                /**
                 * Converts this UpdateOrganizationUserMeRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UpdateOrganizationUserMeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateOrganizationUserMeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UpdateOrganizationUserMeRequest;
            })();

            v1.User = (function() {

                /**
                 * Properties of a User.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUser
                 * @property {string|null} [organization] User organization
                 * @property {string|null} [organizationName] User organizationName
                 * @property {string|null} [displayName] User displayName
                 * @property {string|null} [loginName] User loginName
                 * @property {string|null} [mailAddress] User mailAddress
                 * @property {colbylwilliams.teamcloud.v1.User.UserTypeEnum|null} [userType] User userType
                 * @property {colbylwilliams.teamcloud.v1.User.RoleEnum|null} [role] User role
                 * @property {Array.<colbylwilliams.teamcloud.v1.IProjectMembership>|null} [projectMemberships] User projectMemberships
                 * @property {colbylwilliams.teamcloud.v1.IUserAlternateIdentities|null} [alternateIdentities] User alternateIdentities
                 * @property {Object.<string,string>|null} [properties] User properties
                 * @property {string|null} [id] User id
                 */

                /**
                 * Constructs a new User.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a User.
                 * @implements IUser
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUser=} [properties] Properties to set
                 */
                function User(properties) {
                    this.projectMemberships = [];
                    this.properties = {};
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * User organization.
                 * @member {string} organization
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                User.prototype.organization = "";

                /**
                 * User organizationName.
                 * @member {string} organizationName
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                User.prototype.organizationName = "";

                /**
                 * User displayName.
                 * @member {string|null|undefined} displayName
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                User.prototype.displayName = null;

                /**
                 * User loginName.
                 * @member {string|null|undefined} loginName
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                User.prototype.loginName = null;

                /**
                 * User mailAddress.
                 * @member {string|null|undefined} mailAddress
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                User.prototype.mailAddress = null;

                /**
                 * User userType.
                 * @member {colbylwilliams.teamcloud.v1.User.UserTypeEnum} userType
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                User.prototype.userType = 0;

                /**
                 * User role.
                 * @member {colbylwilliams.teamcloud.v1.User.RoleEnum} role
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                User.prototype.role = 0;

                /**
                 * User projectMemberships.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IProjectMembership>} projectMemberships
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                User.prototype.projectMemberships = $util.emptyArray;

                /**
                 * User alternateIdentities.
                 * @member {colbylwilliams.teamcloud.v1.IUserAlternateIdentities|null|undefined} alternateIdentities
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                User.prototype.alternateIdentities = null;

                /**
                 * User properties.
                 * @member {Object.<string,string>} properties
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                User.prototype.properties = $util.emptyObject;

                /**
                 * User id.
                 * @member {string} id
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                User.prototype.id = "";

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * User _displayName.
                 * @member {"displayName"|undefined} _displayName
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                Object.defineProperty(User.prototype, "_displayName", {
                    get: $util.oneOfGetter($oneOfFields = ["displayName"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * User _loginName.
                 * @member {"loginName"|undefined} _loginName
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                Object.defineProperty(User.prototype, "_loginName", {
                    get: $util.oneOfGetter($oneOfFields = ["loginName"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * User _mailAddress.
                 * @member {"mailAddress"|undefined} _mailAddress
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 */
                Object.defineProperty(User.prototype, "_mailAddress", {
                    get: $util.oneOfGetter($oneOfFields = ["mailAddress"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a User message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                User.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        if (!$util.isString(message.organization))
                            return "organization: string expected";
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        if (!$util.isString(message.organizationName))
                            return "organizationName: string expected";
                    if (message.displayName != null && message.hasOwnProperty("displayName")) {
                        properties._displayName = 1;
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    }
                    if (message.loginName != null && message.hasOwnProperty("loginName")) {
                        properties._loginName = 1;
                        if (!$util.isString(message.loginName))
                            return "loginName: string expected";
                    }
                    if (message.mailAddress != null && message.hasOwnProperty("mailAddress")) {
                        properties._mailAddress = 1;
                        if (!$util.isString(message.mailAddress))
                            return "mailAddress: string expected";
                    }
                    if (message.userType != null && message.hasOwnProperty("userType"))
                        switch (message.userType) {
                        default:
                            return "userType: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.role != null && message.hasOwnProperty("role"))
                        switch (message.role) {
                        default:
                            return "role: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.projectMemberships != null && message.hasOwnProperty("projectMemberships")) {
                        if (!Array.isArray(message.projectMemberships))
                            return "projectMemberships: array expected";
                        for (let i = 0; i < message.projectMemberships.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.ProjectMembership.verify(message.projectMemberships[i]);
                            if (error)
                                return "projectMemberships." + error;
                        }
                    }
                    if (message.alternateIdentities != null && message.hasOwnProperty("alternateIdentities")) {
                        let error = $root.colbylwilliams.teamcloud.v1.UserAlternateIdentities.verify(message.alternateIdentities);
                        if (error)
                            return "alternateIdentities." + error;
                    }
                    if (message.properties != null && message.hasOwnProperty("properties")) {
                        if (!$util.isObject(message.properties))
                            return "properties: object expected";
                        let key = Object.keys(message.properties);
                        for (let i = 0; i < key.length; ++i)
                            if (!$util.isString(message.properties[key[i]]))
                                return "properties: string{k:string} expected";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    return null;
                };

                /**
                 * Creates a User message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.User} User
                 */
                User.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.User)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.User();
                    if (object.organization != null)
                        message.organization = String(object.organization);
                    if (object.organizationName != null)
                        message.organizationName = String(object.organizationName);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.loginName != null)
                        message.loginName = String(object.loginName);
                    if (object.mailAddress != null)
                        message.mailAddress = String(object.mailAddress);
                    switch (object.userType) {
                    case "USER":
                    case 0:
                        message.userType = 0;
                        break;
                    case "GROUP":
                    case 1:
                        message.userType = 1;
                        break;
                    case "SYSTEM":
                    case 2:
                        message.userType = 2;
                        break;
                    case "SERVICE":
                    case 3:
                        message.userType = 3;
                        break;
                    }
                    switch (object.role) {
                    case "NONE":
                    case 0:
                        message.role = 0;
                        break;
                    case "MEMBER":
                    case 1:
                        message.role = 1;
                        break;
                    case "ADMIN":
                    case 2:
                        message.role = 2;
                        break;
                    case "OWNER":
                    case 3:
                        message.role = 3;
                        break;
                    case "ADAPTER":
                    case 4:
                        message.role = 4;
                        break;
                    }
                    if (object.projectMemberships) {
                        if (!Array.isArray(object.projectMemberships))
                            throw TypeError(".colbylwilliams.teamcloud.v1.User.projectMemberships: array expected");
                        message.projectMemberships = [];
                        for (let i = 0; i < object.projectMemberships.length; ++i) {
                            if (typeof object.projectMemberships[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.User.projectMemberships: object expected");
                            message.projectMemberships[i] = $root.colbylwilliams.teamcloud.v1.ProjectMembership.fromObject(object.projectMemberships[i]);
                        }
                    }
                    if (object.alternateIdentities != null) {
                        if (typeof object.alternateIdentities !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.User.alternateIdentities: object expected");
                        message.alternateIdentities = $root.colbylwilliams.teamcloud.v1.UserAlternateIdentities.fromObject(object.alternateIdentities);
                    }
                    if (object.properties) {
                        if (typeof object.properties !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.User.properties: object expected");
                        message.properties = {};
                        for (let keys = Object.keys(object.properties), i = 0; i < keys.length; ++i)
                            message.properties[keys[i]] = String(object.properties[keys[i]]);
                    }
                    if (object.id != null)
                        message.id = String(object.id);
                    return message;
                };

                /**
                 * Creates a plain object from a User message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.User} message User
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                User.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.projectMemberships = [];
                    if (options.objects || options.defaults)
                        object.properties = {};
                    if (options.defaults) {
                        object.id = "";
                        object.role = options.enums === String ? "NONE" : 0;
                        object.organization = "";
                        object.alternateIdentities = null;
                        object.organizationName = "";
                        object.userType = options.enums === String ? "USER" : 0;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.role != null && message.hasOwnProperty("role"))
                        object.role = options.enums === String ? $root.colbylwilliams.teamcloud.v1.User.RoleEnum[message.role] : message.role;
                    if (message.displayName != null && message.hasOwnProperty("displayName")) {
                        object.displayName = message.displayName;
                        if (options.oneofs)
                            object._displayName = "displayName";
                    }
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = message.organization;
                    if (message.loginName != null && message.hasOwnProperty("loginName")) {
                        object.loginName = message.loginName;
                        if (options.oneofs)
                            object._loginName = "loginName";
                    }
                    if (message.alternateIdentities != null && message.hasOwnProperty("alternateIdentities"))
                        object.alternateIdentities = $root.colbylwilliams.teamcloud.v1.UserAlternateIdentities.toObject(message.alternateIdentities, options);
                    if (message.mailAddress != null && message.hasOwnProperty("mailAddress")) {
                        object.mailAddress = message.mailAddress;
                        if (options.oneofs)
                            object._mailAddress = "mailAddress";
                    }
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        object.organizationName = message.organizationName;
                    if (message.userType != null && message.hasOwnProperty("userType"))
                        object.userType = options.enums === String ? $root.colbylwilliams.teamcloud.v1.User.UserTypeEnum[message.userType] : message.userType;
                    let keys2;
                    if (message.properties && (keys2 = Object.keys(message.properties)).length) {
                        object.properties = {};
                        for (let j = 0; j < keys2.length; ++j)
                            object.properties[keys2[j]] = message.properties[keys2[j]];
                    }
                    if (message.projectMemberships && message.projectMemberships.length) {
                        object.projectMemberships = [];
                        for (let j = 0; j < message.projectMemberships.length; ++j)
                            object.projectMemberships[j] = $root.colbylwilliams.teamcloud.v1.ProjectMembership.toObject(message.projectMemberships[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this User to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.User
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                User.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * UserTypeEnum enum.
                 * @name colbylwilliams.teamcloud.v1.User.UserTypeEnum
                 * @enum {number}
                 * @property {number} USER=0 USER value
                 * @property {number} GROUP=1 GROUP value
                 * @property {number} SYSTEM=2 SYSTEM value
                 * @property {number} SERVICE=3 SERVICE value
                 */
                User.UserTypeEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "USER"] = 0;
                    values[valuesById[1] = "GROUP"] = 1;
                    values[valuesById[2] = "SYSTEM"] = 2;
                    values[valuesById[3] = "SERVICE"] = 3;
                    return values;
                })();

                /**
                 * RoleEnum enum.
                 * @name colbylwilliams.teamcloud.v1.User.RoleEnum
                 * @enum {number}
                 * @property {number} NONE=0 NONE value
                 * @property {number} MEMBER=1 MEMBER value
                 * @property {number} ADMIN=2 ADMIN value
                 * @property {number} OWNER=3 OWNER value
                 * @property {number} ADAPTER=4 ADAPTER value
                 */
                User.RoleEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "NONE"] = 0;
                    values[valuesById[1] = "MEMBER"] = 1;
                    values[valuesById[2] = "ADMIN"] = 2;
                    values[valuesById[3] = "OWNER"] = 3;
                    values[valuesById[4] = "ADAPTER"] = 4;
                    return values;
                })();

                return User;
            })();

            v1.ProjectMembership = (function() {

                /**
                 * Properties of a ProjectMembership.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectMembership
                 * @property {string|null} [projectId] ProjectMembership projectId
                 * @property {colbylwilliams.teamcloud.v1.ProjectMembership.RoleEnum|null} [role] ProjectMembership role
                 * @property {Object.<string,string>|null} [properties] ProjectMembership properties
                 */

                /**
                 * Constructs a new ProjectMembership.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectMembership.
                 * @implements IProjectMembership
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectMembership=} [properties] Properties to set
                 */
                function ProjectMembership(properties) {
                    this.properties = {};
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectMembership projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.ProjectMembership
                 * @instance
                 */
                ProjectMembership.prototype.projectId = "";

                /**
                 * ProjectMembership role.
                 * @member {colbylwilliams.teamcloud.v1.ProjectMembership.RoleEnum} role
                 * @memberof colbylwilliams.teamcloud.v1.ProjectMembership
                 * @instance
                 */
                ProjectMembership.prototype.role = 0;

                /**
                 * ProjectMembership properties.
                 * @member {Object.<string,string>} properties
                 * @memberof colbylwilliams.teamcloud.v1.ProjectMembership
                 * @instance
                 */
                ProjectMembership.prototype.properties = $util.emptyObject;

                /**
                 * Verifies a ProjectMembership message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectMembership
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectMembership.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.role != null && message.hasOwnProperty("role"))
                        switch (message.role) {
                        default:
                            return "role: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.properties != null && message.hasOwnProperty("properties")) {
                        if (!$util.isObject(message.properties))
                            return "properties: object expected";
                        let key = Object.keys(message.properties);
                        for (let i = 0; i < key.length; ++i)
                            if (!$util.isString(message.properties[key[i]]))
                                return "properties: string{k:string} expected";
                    }
                    return null;
                };

                /**
                 * Creates a ProjectMembership message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectMembership
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectMembership} ProjectMembership
                 */
                ProjectMembership.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectMembership)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectMembership();
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    switch (object.role) {
                    case "NONE":
                    case 0:
                        message.role = 0;
                        break;
                    case "MEMBER":
                    case 1:
                        message.role = 1;
                        break;
                    case "ADMIN":
                    case 2:
                        message.role = 2;
                        break;
                    case "OWNER":
                    case 3:
                        message.role = 3;
                        break;
                    case "ADAPTER":
                    case 4:
                        message.role = 4;
                        break;
                    }
                    if (object.properties) {
                        if (typeof object.properties !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectMembership.properties: object expected");
                        message.properties = {};
                        for (let keys = Object.keys(object.properties), i = 0; i < keys.length; ++i)
                            message.properties[keys[i]] = String(object.properties[keys[i]]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectMembership message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectMembership
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectMembership} message ProjectMembership
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectMembership.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.objects || options.defaults)
                        object.properties = {};
                    if (options.defaults) {
                        object.role = options.enums === String ? "NONE" : 0;
                        object.projectId = "";
                    }
                    if (message.role != null && message.hasOwnProperty("role"))
                        object.role = options.enums === String ? $root.colbylwilliams.teamcloud.v1.ProjectMembership.RoleEnum[message.role] : message.role;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    let keys2;
                    if (message.properties && (keys2 = Object.keys(message.properties)).length) {
                        object.properties = {};
                        for (let j = 0; j < keys2.length; ++j)
                            object.properties[keys2[j]] = message.properties[keys2[j]];
                    }
                    return object;
                };

                /**
                 * Converts this ProjectMembership to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectMembership
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectMembership.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * RoleEnum enum.
                 * @name colbylwilliams.teamcloud.v1.ProjectMembership.RoleEnum
                 * @enum {number}
                 * @property {number} NONE=0 NONE value
                 * @property {number} MEMBER=1 MEMBER value
                 * @property {number} ADMIN=2 ADMIN value
                 * @property {number} OWNER=3 OWNER value
                 * @property {number} ADAPTER=4 ADAPTER value
                 */
                ProjectMembership.RoleEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "NONE"] = 0;
                    values[valuesById[1] = "MEMBER"] = 1;
                    values[valuesById[2] = "ADMIN"] = 2;
                    values[valuesById[3] = "OWNER"] = 3;
                    values[valuesById[4] = "ADAPTER"] = 4;
                    return values;
                })();

                return ProjectMembership;
            })();

            v1.UserAlternateIdentities = (function() {

                /**
                 * Properties of a UserAlternateIdentities.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUserAlternateIdentities
                 * @property {colbylwilliams.teamcloud.v1.IAlternateIdentity|null} [AzureResourceManager] UserAlternateIdentities AzureResourceManager
                 * @property {colbylwilliams.teamcloud.v1.IAlternateIdentity|null} [AzureDevOps] UserAlternateIdentities AzureDevOps
                 * @property {colbylwilliams.teamcloud.v1.IAlternateIdentity|null} [GitHub] UserAlternateIdentities GitHub
                 * @property {colbylwilliams.teamcloud.v1.IAlternateIdentity|null} [Kubernetes] UserAlternateIdentities Kubernetes
                 */

                /**
                 * Constructs a new UserAlternateIdentities.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a UserAlternateIdentities.
                 * @implements IUserAlternateIdentities
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUserAlternateIdentities=} [properties] Properties to set
                 */
                function UserAlternateIdentities(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserAlternateIdentities AzureResourceManager.
                 * @member {colbylwilliams.teamcloud.v1.IAlternateIdentity|null|undefined} AzureResourceManager
                 * @memberof colbylwilliams.teamcloud.v1.UserAlternateIdentities
                 * @instance
                 */
                UserAlternateIdentities.prototype.AzureResourceManager = null;

                /**
                 * UserAlternateIdentities AzureDevOps.
                 * @member {colbylwilliams.teamcloud.v1.IAlternateIdentity|null|undefined} AzureDevOps
                 * @memberof colbylwilliams.teamcloud.v1.UserAlternateIdentities
                 * @instance
                 */
                UserAlternateIdentities.prototype.AzureDevOps = null;

                /**
                 * UserAlternateIdentities GitHub.
                 * @member {colbylwilliams.teamcloud.v1.IAlternateIdentity|null|undefined} GitHub
                 * @memberof colbylwilliams.teamcloud.v1.UserAlternateIdentities
                 * @instance
                 */
                UserAlternateIdentities.prototype.GitHub = null;

                /**
                 * UserAlternateIdentities Kubernetes.
                 * @member {colbylwilliams.teamcloud.v1.IAlternateIdentity|null|undefined} Kubernetes
                 * @memberof colbylwilliams.teamcloud.v1.UserAlternateIdentities
                 * @instance
                 */
                UserAlternateIdentities.prototype.Kubernetes = null;

                /**
                 * Verifies a UserAlternateIdentities message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UserAlternateIdentities
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UserAlternateIdentities.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.AzureResourceManager != null && message.hasOwnProperty("AzureResourceManager")) {
                        let error = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.verify(message.AzureResourceManager);
                        if (error)
                            return "AzureResourceManager." + error;
                    }
                    if (message.AzureDevOps != null && message.hasOwnProperty("AzureDevOps")) {
                        let error = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.verify(message.AzureDevOps);
                        if (error)
                            return "AzureDevOps." + error;
                    }
                    if (message.GitHub != null && message.hasOwnProperty("GitHub")) {
                        let error = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.verify(message.GitHub);
                        if (error)
                            return "GitHub." + error;
                    }
                    if (message.Kubernetes != null && message.hasOwnProperty("Kubernetes")) {
                        let error = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.verify(message.Kubernetes);
                        if (error)
                            return "Kubernetes." + error;
                    }
                    return null;
                };

                /**
                 * Creates a UserAlternateIdentities message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UserAlternateIdentities
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UserAlternateIdentities} UserAlternateIdentities
                 */
                UserAlternateIdentities.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UserAlternateIdentities)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UserAlternateIdentities();
                    if (object.AzureResourceManager != null) {
                        if (typeof object.AzureResourceManager !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UserAlternateIdentities.AzureResourceManager: object expected");
                        message.AzureResourceManager = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.fromObject(object.AzureResourceManager);
                    }
                    if (object.AzureDevOps != null) {
                        if (typeof object.AzureDevOps !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UserAlternateIdentities.AzureDevOps: object expected");
                        message.AzureDevOps = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.fromObject(object.AzureDevOps);
                    }
                    if (object.GitHub != null) {
                        if (typeof object.GitHub !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UserAlternateIdentities.GitHub: object expected");
                        message.GitHub = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.fromObject(object.GitHub);
                    }
                    if (object.Kubernetes != null) {
                        if (typeof object.Kubernetes !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UserAlternateIdentities.Kubernetes: object expected");
                        message.Kubernetes = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.fromObject(object.Kubernetes);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a UserAlternateIdentities message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UserAlternateIdentities
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UserAlternateIdentities} message UserAlternateIdentities
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UserAlternateIdentities.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.AzureDevOps = null;
                        object.AzureResourceManager = null;
                        object.GitHub = null;
                        object.Kubernetes = null;
                    }
                    if (message.AzureDevOps != null && message.hasOwnProperty("AzureDevOps"))
                        object.AzureDevOps = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.toObject(message.AzureDevOps, options);
                    if (message.AzureResourceManager != null && message.hasOwnProperty("AzureResourceManager"))
                        object.AzureResourceManager = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.toObject(message.AzureResourceManager, options);
                    if (message.GitHub != null && message.hasOwnProperty("GitHub"))
                        object.GitHub = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.toObject(message.GitHub, options);
                    if (message.Kubernetes != null && message.hasOwnProperty("Kubernetes"))
                        object.Kubernetes = $root.colbylwilliams.teamcloud.v1.AlternateIdentity.toObject(message.Kubernetes, options);
                    return object;
                };

                /**
                 * Converts this UserAlternateIdentities to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UserAlternateIdentities
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UserAlternateIdentities.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UserAlternateIdentities;
            })();

            v1.UserDataResult = (function() {

                /**
                 * Properties of a UserDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUserDataResult
                 * @property {number|null} [code] UserDataResult code
                 * @property {string|null} [status] UserDataResult status
                 * @property {colbylwilliams.teamcloud.v1.IUser|null} [data] UserDataResult data
                 * @property {string|null} [location] UserDataResult location
                 */

                /**
                 * Constructs a new UserDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a UserDataResult.
                 * @implements IUserDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUserDataResult=} [properties] Properties to set
                 */
                function UserDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.UserDataResult
                 * @instance
                 */
                UserDataResult.prototype.code = 0;

                /**
                 * UserDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.UserDataResult
                 * @instance
                 */
                UserDataResult.prototype.status = null;

                /**
                 * UserDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.IUser|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.UserDataResult
                 * @instance
                 */
                UserDataResult.prototype.data = null;

                /**
                 * UserDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.UserDataResult
                 * @instance
                 */
                UserDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * UserDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.UserDataResult
                 * @instance
                 */
                Object.defineProperty(UserDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * UserDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.UserDataResult
                 * @instance
                 */
                Object.defineProperty(UserDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a UserDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UserDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UserDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.User.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a UserDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UserDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UserDataResult} UserDataResult
                 */
                UserDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UserDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UserDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UserDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.User.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a UserDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UserDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UserDataResult} message UserDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UserDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.User.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this UserDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UserDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UserDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UserDataResult;
            })();

            v1.UserDefinition = (function() {

                /**
                 * Properties of a UserDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUserDefinition
                 * @property {string|null} [identifier] UserDefinition identifier
                 * @property {string|null} [role] UserDefinition role
                 * @property {Object.<string,string>|null} [properties] UserDefinition properties
                 */

                /**
                 * Constructs a new UserDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a UserDefinition.
                 * @implements IUserDefinition
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUserDefinition=} [properties] Properties to set
                 */
                function UserDefinition(properties) {
                    this.properties = {};
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserDefinition identifier.
                 * @member {string} identifier
                 * @memberof colbylwilliams.teamcloud.v1.UserDefinition
                 * @instance
                 */
                UserDefinition.prototype.identifier = "";

                /**
                 * UserDefinition role.
                 * @member {string} role
                 * @memberof colbylwilliams.teamcloud.v1.UserDefinition
                 * @instance
                 */
                UserDefinition.prototype.role = "";

                /**
                 * UserDefinition properties.
                 * @member {Object.<string,string>} properties
                 * @memberof colbylwilliams.teamcloud.v1.UserDefinition
                 * @instance
                 */
                UserDefinition.prototype.properties = $util.emptyObject;

                /**
                 * Verifies a UserDefinition message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UserDefinition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UserDefinition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.identifier != null && message.hasOwnProperty("identifier"))
                        if (!$util.isString(message.identifier))
                            return "identifier: string expected";
                    if (message.role != null && message.hasOwnProperty("role"))
                        if (!$util.isString(message.role))
                            return "role: string expected";
                    if (message.properties != null && message.hasOwnProperty("properties")) {
                        if (!$util.isObject(message.properties))
                            return "properties: object expected";
                        let key = Object.keys(message.properties);
                        for (let i = 0; i < key.length; ++i)
                            if (!$util.isString(message.properties[key[i]]))
                                return "properties: string{k:string} expected";
                    }
                    return null;
                };

                /**
                 * Creates a UserDefinition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UserDefinition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UserDefinition} UserDefinition
                 */
                UserDefinition.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UserDefinition)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UserDefinition();
                    if (object.identifier != null)
                        message.identifier = String(object.identifier);
                    if (object.role != null)
                        message.role = String(object.role);
                    if (object.properties) {
                        if (typeof object.properties !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UserDefinition.properties: object expected");
                        message.properties = {};
                        for (let keys = Object.keys(object.properties), i = 0; i < keys.length; ++i)
                            message.properties[keys[i]] = String(object.properties[keys[i]]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a UserDefinition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UserDefinition
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UserDefinition} message UserDefinition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UserDefinition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.objects || options.defaults)
                        object.properties = {};
                    if (options.defaults) {
                        object.role = "";
                        object.identifier = "";
                    }
                    if (message.role != null && message.hasOwnProperty("role"))
                        object.role = message.role;
                    if (message.identifier != null && message.hasOwnProperty("identifier"))
                        object.identifier = message.identifier;
                    let keys2;
                    if (message.properties && (keys2 = Object.keys(message.properties)).length) {
                        object.properties = {};
                        for (let j = 0; j < keys2.length; ++j)
                            object.properties[keys2[j]] = message.properties[keys2[j]];
                    }
                    return object;
                };

                /**
                 * Converts this UserDefinition to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UserDefinition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UserDefinition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UserDefinition;
            })();

            v1.UserListDataResult = (function() {

                /**
                 * Properties of a UserListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUserListDataResult
                 * @property {number|null} [code] UserListDataResult code
                 * @property {string|null} [status] UserListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.IUser>|null} [data] UserListDataResult data
                 * @property {string|null} [location] UserListDataResult location
                 */

                /**
                 * Constructs a new UserListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a UserListDataResult.
                 * @implements IUserListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUserListDataResult=} [properties] Properties to set
                 */
                function UserListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.UserListDataResult
                 * @instance
                 */
                UserListDataResult.prototype.code = 0;

                /**
                 * UserListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.UserListDataResult
                 * @instance
                 */
                UserListDataResult.prototype.status = null;

                /**
                 * UserListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IUser>} data
                 * @memberof colbylwilliams.teamcloud.v1.UserListDataResult
                 * @instance
                 */
                UserListDataResult.prototype.data = $util.emptyArray;

                /**
                 * UserListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.UserListDataResult
                 * @instance
                 */
                UserListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * UserListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.UserListDataResult
                 * @instance
                 */
                Object.defineProperty(UserListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * UserListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.UserListDataResult
                 * @instance
                 */
                Object.defineProperty(UserListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a UserListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UserListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UserListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.User.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a UserListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UserListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UserListDataResult} UserListDataResult
                 */
                UserListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UserListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UserListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.UserListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.UserListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.User.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a UserListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UserListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UserListDataResult} message UserListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UserListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.User.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this UserListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UserListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UserListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UserListDataResult;
            })();

            v1.ProjectDataResult = (function() {

                /**
                 * Properties of a ProjectDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectDataResult
                 * @property {number|null} [code] ProjectDataResult code
                 * @property {string|null} [status] ProjectDataResult status
                 * @property {colbylwilliams.teamcloud.v1.IProject|null} [data] ProjectDataResult data
                 * @property {string|null} [location] ProjectDataResult location
                 */

                /**
                 * Constructs a new ProjectDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectDataResult.
                 * @implements IProjectDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectDataResult=} [properties] Properties to set
                 */
                function ProjectDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDataResult
                 * @instance
                 */
                ProjectDataResult.prototype.code = 0;

                /**
                 * ProjectDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDataResult
                 * @instance
                 */
                ProjectDataResult.prototype.status = null;

                /**
                 * ProjectDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.IProject|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDataResult
                 * @instance
                 */
                ProjectDataResult.prototype.data = null;

                /**
                 * ProjectDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDataResult
                 * @instance
                 */
                ProjectDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ProjectDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ProjectDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ProjectDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.Project.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ProjectDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectDataResult} ProjectDataResult
                 */
                ProjectDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.Project.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectDataResult} message ProjectDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.Project.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ProjectDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProjectDataResult;
            })();

            v1.Project = (function() {

                /**
                 * Properties of a Project.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProject
                 * @property {string|null} [organization] Project organization
                 * @property {string|null} [organizationName] Project organizationName
                 * @property {string|null} [slug] Project slug
                 * @property {string|null} [displayName] Project displayName
                 * @property {string|null} [template] Project template
                 * @property {string|null} [templateInput] Project templateInput
                 * @property {Array.<colbylwilliams.teamcloud.v1.IUser>|null} [users] Project users
                 * @property {Object.<string,string>|null} [tags] Project tags
                 * @property {string|null} [resourceId] Project resourceId
                 * @property {colbylwilliams.teamcloud.v1.Project.ResourceStateEnum|null} [resourceState] Project resourceState
                 * @property {string|null} [vaultId] Project vaultId
                 * @property {string|null} [sharedVaultId] Project sharedVaultId
                 * @property {string|null} [secretsVaultId] Project secretsVaultId
                 * @property {string|null} [storageId] Project storageId
                 * @property {string|null} [deleted] Project deleted
                 * @property {number|null} [ttl] Project ttl
                 * @property {string|null} [id] Project id
                 */

                /**
                 * Constructs a new Project.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a Project.
                 * @implements IProject
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProject=} [properties] Properties to set
                 */
                function Project(properties) {
                    this.users = [];
                    this.tags = {};
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Project organization.
                 * @member {string} organization
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.organization = "";

                /**
                 * Project organizationName.
                 * @member {string} organizationName
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.organizationName = "";

                /**
                 * Project slug.
                 * @member {string} slug
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.slug = "";

                /**
                 * Project displayName.
                 * @member {string} displayName
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.displayName = "";

                /**
                 * Project template.
                 * @member {string} template
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.template = "";

                /**
                 * Project templateInput.
                 * @member {string|null|undefined} templateInput
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.templateInput = null;

                /**
                 * Project users.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IUser>} users
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.users = $util.emptyArray;

                /**
                 * Project tags.
                 * @member {Object.<string,string>} tags
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.tags = $util.emptyObject;

                /**
                 * Project resourceId.
                 * @member {string|null|undefined} resourceId
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.resourceId = null;

                /**
                 * Project resourceState.
                 * @member {colbylwilliams.teamcloud.v1.Project.ResourceStateEnum} resourceState
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.resourceState = 0;

                /**
                 * Project vaultId.
                 * @member {string|null|undefined} vaultId
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.vaultId = null;

                /**
                 * Project sharedVaultId.
                 * @member {string|null|undefined} sharedVaultId
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.sharedVaultId = null;

                /**
                 * Project secretsVaultId.
                 * @member {string|null|undefined} secretsVaultId
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.secretsVaultId = null;

                /**
                 * Project storageId.
                 * @member {string|null|undefined} storageId
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.storageId = null;

                /**
                 * Project deleted.
                 * @member {string|null|undefined} deleted
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.deleted = null;

                /**
                 * Project ttl.
                 * @member {number|null|undefined} ttl
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.ttl = null;

                /**
                 * Project id.
                 * @member {string} id
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Project.prototype.id = "";

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * Project _templateInput.
                 * @member {"templateInput"|undefined} _templateInput
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Object.defineProperty(Project.prototype, "_templateInput", {
                    get: $util.oneOfGetter($oneOfFields = ["templateInput"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Project _resourceId.
                 * @member {"resourceId"|undefined} _resourceId
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Object.defineProperty(Project.prototype, "_resourceId", {
                    get: $util.oneOfGetter($oneOfFields = ["resourceId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Project _vaultId.
                 * @member {"vaultId"|undefined} _vaultId
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Object.defineProperty(Project.prototype, "_vaultId", {
                    get: $util.oneOfGetter($oneOfFields = ["vaultId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Project _sharedVaultId.
                 * @member {"sharedVaultId"|undefined} _sharedVaultId
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Object.defineProperty(Project.prototype, "_sharedVaultId", {
                    get: $util.oneOfGetter($oneOfFields = ["sharedVaultId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Project _secretsVaultId.
                 * @member {"secretsVaultId"|undefined} _secretsVaultId
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Object.defineProperty(Project.prototype, "_secretsVaultId", {
                    get: $util.oneOfGetter($oneOfFields = ["secretsVaultId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Project _storageId.
                 * @member {"storageId"|undefined} _storageId
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Object.defineProperty(Project.prototype, "_storageId", {
                    get: $util.oneOfGetter($oneOfFields = ["storageId"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Project _deleted.
                 * @member {"deleted"|undefined} _deleted
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Object.defineProperty(Project.prototype, "_deleted", {
                    get: $util.oneOfGetter($oneOfFields = ["deleted"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Project _ttl.
                 * @member {"ttl"|undefined} _ttl
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 */
                Object.defineProperty(Project.prototype, "_ttl", {
                    get: $util.oneOfGetter($oneOfFields = ["ttl"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a Project message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Project.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        if (!$util.isString(message.organization))
                            return "organization: string expected";
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        if (!$util.isString(message.organizationName))
                            return "organizationName: string expected";
                    if (message.slug != null && message.hasOwnProperty("slug"))
                        if (!$util.isString(message.slug))
                            return "slug: string expected";
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    if (message.template != null && message.hasOwnProperty("template"))
                        if (!$util.isString(message.template))
                            return "template: string expected";
                    if (message.templateInput != null && message.hasOwnProperty("templateInput")) {
                        properties._templateInput = 1;
                        if (!$util.isString(message.templateInput))
                            return "templateInput: string expected";
                    }
                    if (message.users != null && message.hasOwnProperty("users")) {
                        if (!Array.isArray(message.users))
                            return "users: array expected";
                        for (let i = 0; i < message.users.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.User.verify(message.users[i]);
                            if (error)
                                return "users." + error;
                        }
                    }
                    if (message.tags != null && message.hasOwnProperty("tags")) {
                        if (!$util.isObject(message.tags))
                            return "tags: object expected";
                        let key = Object.keys(message.tags);
                        for (let i = 0; i < key.length; ++i)
                            if (!$util.isString(message.tags[key[i]]))
                                return "tags: string{k:string} expected";
                    }
                    if (message.resourceId != null && message.hasOwnProperty("resourceId")) {
                        properties._resourceId = 1;
                        if (!$util.isString(message.resourceId))
                            return "resourceId: string expected";
                    }
                    if (message.resourceState != null && message.hasOwnProperty("resourceState"))
                        switch (message.resourceState) {
                        default:
                            return "resourceState: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            break;
                        }
                    if (message.vaultId != null && message.hasOwnProperty("vaultId")) {
                        properties._vaultId = 1;
                        if (!$util.isString(message.vaultId))
                            return "vaultId: string expected";
                    }
                    if (message.sharedVaultId != null && message.hasOwnProperty("sharedVaultId")) {
                        properties._sharedVaultId = 1;
                        if (!$util.isString(message.sharedVaultId))
                            return "sharedVaultId: string expected";
                    }
                    if (message.secretsVaultId != null && message.hasOwnProperty("secretsVaultId")) {
                        properties._secretsVaultId = 1;
                        if (!$util.isString(message.secretsVaultId))
                            return "secretsVaultId: string expected";
                    }
                    if (message.storageId != null && message.hasOwnProperty("storageId")) {
                        properties._storageId = 1;
                        if (!$util.isString(message.storageId))
                            return "storageId: string expected";
                    }
                    if (message.deleted != null && message.hasOwnProperty("deleted")) {
                        properties._deleted = 1;
                        if (!$util.isString(message.deleted))
                            return "deleted: string expected";
                    }
                    if (message.ttl != null && message.hasOwnProperty("ttl")) {
                        properties._ttl = 1;
                        if (!$util.isInteger(message.ttl))
                            return "ttl: integer expected";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    return null;
                };

                /**
                 * Creates a Project message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.Project} Project
                 */
                Project.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.Project)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.Project();
                    if (object.organization != null)
                        message.organization = String(object.organization);
                    if (object.organizationName != null)
                        message.organizationName = String(object.organizationName);
                    if (object.slug != null)
                        message.slug = String(object.slug);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.template != null)
                        message.template = String(object.template);
                    if (object.templateInput != null)
                        message.templateInput = String(object.templateInput);
                    if (object.users) {
                        if (!Array.isArray(object.users))
                            throw TypeError(".colbylwilliams.teamcloud.v1.Project.users: array expected");
                        message.users = [];
                        for (let i = 0; i < object.users.length; ++i) {
                            if (typeof object.users[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.Project.users: object expected");
                            message.users[i] = $root.colbylwilliams.teamcloud.v1.User.fromObject(object.users[i]);
                        }
                    }
                    if (object.tags) {
                        if (typeof object.tags !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.Project.tags: object expected");
                        message.tags = {};
                        for (let keys = Object.keys(object.tags), i = 0; i < keys.length; ++i)
                            message.tags[keys[i]] = String(object.tags[keys[i]]);
                    }
                    if (object.resourceId != null)
                        message.resourceId = String(object.resourceId);
                    switch (object.resourceState) {
                    case "PENDING":
                    case 0:
                        message.resourceState = 0;
                        break;
                    case "INITIALIZING":
                    case 1:
                        message.resourceState = 1;
                        break;
                    case "PROVISIONING":
                    case 2:
                        message.resourceState = 2;
                        break;
                    case "PROVISIONED":
                    case 3:
                        message.resourceState = 3;
                        break;
                    case "DEPROVISIONING":
                    case 4:
                        message.resourceState = 4;
                        break;
                    case "DEPROVISIONED":
                    case 5:
                        message.resourceState = 5;
                        break;
                    case "FAILED":
                    case 6:
                        message.resourceState = 6;
                        break;
                    }
                    if (object.vaultId != null)
                        message.vaultId = String(object.vaultId);
                    if (object.sharedVaultId != null)
                        message.sharedVaultId = String(object.sharedVaultId);
                    if (object.secretsVaultId != null)
                        message.secretsVaultId = String(object.secretsVaultId);
                    if (object.storageId != null)
                        message.storageId = String(object.storageId);
                    if (object.deleted != null)
                        message.deleted = String(object.deleted);
                    if (object.ttl != null)
                        message.ttl = object.ttl | 0;
                    if (object.id != null)
                        message.id = String(object.id);
                    return message;
                };

                /**
                 * Creates a plain object from a Project message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.Project} message Project
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Project.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.users = [];
                    if (options.objects || options.defaults)
                        object.tags = {};
                    if (options.defaults) {
                        object.id = "";
                        object.slug = "";
                        object.displayName = "";
                        object.organization = "";
                        object.organizationName = "";
                        object.template = "";
                        object.resourceState = options.enums === String ? "PENDING" : 0;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.ttl != null && message.hasOwnProperty("ttl")) {
                        object.ttl = message.ttl;
                        if (options.oneofs)
                            object._ttl = "ttl";
                    }
                    if (message.slug != null && message.hasOwnProperty("slug"))
                        object.slug = message.slug;
                    let keys2;
                    if (message.tags && (keys2 = Object.keys(message.tags)).length) {
                        object.tags = {};
                        for (let j = 0; j < keys2.length; ++j)
                            object.tags[keys2[j]] = message.tags[keys2[j]];
                    }
                    if (message.sharedVaultId != null && message.hasOwnProperty("sharedVaultId")) {
                        object.sharedVaultId = message.sharedVaultId;
                        if (options.oneofs)
                            object._sharedVaultId = "sharedVaultId";
                    }
                    if (message.storageId != null && message.hasOwnProperty("storageId")) {
                        object.storageId = message.storageId;
                        if (options.oneofs)
                            object._storageId = "storageId";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        object.displayName = message.displayName;
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = message.organization;
                    if (message.users && message.users.length) {
                        object.users = [];
                        for (let j = 0; j < message.users.length; ++j)
                            object.users[j] = $root.colbylwilliams.teamcloud.v1.User.toObject(message.users[j], options);
                    }
                    if (message.templateInput != null && message.hasOwnProperty("templateInput")) {
                        object.templateInput = message.templateInput;
                        if (options.oneofs)
                            object._templateInput = "templateInput";
                    }
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        object.organizationName = message.organizationName;
                    if (message.vaultId != null && message.hasOwnProperty("vaultId")) {
                        object.vaultId = message.vaultId;
                        if (options.oneofs)
                            object._vaultId = "vaultId";
                    }
                    if (message.template != null && message.hasOwnProperty("template"))
                        object.template = message.template;
                    if (message.resourceId != null && message.hasOwnProperty("resourceId")) {
                        object.resourceId = message.resourceId;
                        if (options.oneofs)
                            object._resourceId = "resourceId";
                    }
                    if (message.resourceState != null && message.hasOwnProperty("resourceState"))
                        object.resourceState = options.enums === String ? $root.colbylwilliams.teamcloud.v1.Project.ResourceStateEnum[message.resourceState] : message.resourceState;
                    if (message.deleted != null && message.hasOwnProperty("deleted")) {
                        object.deleted = message.deleted;
                        if (options.oneofs)
                            object._deleted = "deleted";
                    }
                    if (message.secretsVaultId != null && message.hasOwnProperty("secretsVaultId")) {
                        object.secretsVaultId = message.secretsVaultId;
                        if (options.oneofs)
                            object._secretsVaultId = "secretsVaultId";
                    }
                    return object;
                };

                /**
                 * Converts this Project to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.Project
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Project.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * ResourceStateEnum enum.
                 * @name colbylwilliams.teamcloud.v1.Project.ResourceStateEnum
                 * @enum {number}
                 * @property {number} PENDING=0 PENDING value
                 * @property {number} INITIALIZING=1 INITIALIZING value
                 * @property {number} PROVISIONING=2 PROVISIONING value
                 * @property {number} PROVISIONED=3 PROVISIONED value
                 * @property {number} DEPROVISIONING=4 DEPROVISIONING value
                 * @property {number} DEPROVISIONED=5 DEPROVISIONED value
                 * @property {number} FAILED=6 FAILED value
                 */
                Project.ResourceStateEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "PENDING"] = 0;
                    values[valuesById[1] = "INITIALIZING"] = 1;
                    values[valuesById[2] = "PROVISIONING"] = 2;
                    values[valuesById[3] = "PROVISIONED"] = 3;
                    values[valuesById[4] = "DEPROVISIONING"] = 4;
                    values[valuesById[5] = "DEPROVISIONED"] = 5;
                    values[valuesById[6] = "FAILED"] = 6;
                    return values;
                })();

                return Project;
            })();

            v1.ProjectDefinition = (function() {

                /**
                 * Properties of a ProjectDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectDefinition
                 * @property {string|null} [slug] ProjectDefinition slug
                 * @property {string|null} [displayName] ProjectDefinition displayName
                 * @property {string|null} [template] ProjectDefinition template
                 * @property {string|null} [templateInput] ProjectDefinition templateInput
                 * @property {Array.<colbylwilliams.teamcloud.v1.IUserDefinition>|null} [users] ProjectDefinition users
                 */

                /**
                 * Constructs a new ProjectDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectDefinition.
                 * @implements IProjectDefinition
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectDefinition=} [properties] Properties to set
                 */
                function ProjectDefinition(properties) {
                    this.users = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectDefinition slug.
                 * @member {string|null|undefined} slug
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDefinition
                 * @instance
                 */
                ProjectDefinition.prototype.slug = null;

                /**
                 * ProjectDefinition displayName.
                 * @member {string} displayName
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDefinition
                 * @instance
                 */
                ProjectDefinition.prototype.displayName = "";

                /**
                 * ProjectDefinition template.
                 * @member {string} template
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDefinition
                 * @instance
                 */
                ProjectDefinition.prototype.template = "";

                /**
                 * ProjectDefinition templateInput.
                 * @member {string} templateInput
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDefinition
                 * @instance
                 */
                ProjectDefinition.prototype.templateInput = "";

                /**
                 * ProjectDefinition users.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IUserDefinition>} users
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDefinition
                 * @instance
                 */
                ProjectDefinition.prototype.users = $util.emptyArray;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ProjectDefinition _slug.
                 * @member {"slug"|undefined} _slug
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDefinition
                 * @instance
                 */
                Object.defineProperty(ProjectDefinition.prototype, "_slug", {
                    get: $util.oneOfGetter($oneOfFields = ["slug"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ProjectDefinition message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDefinition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectDefinition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.slug != null && message.hasOwnProperty("slug")) {
                        properties._slug = 1;
                        if (!$util.isString(message.slug))
                            return "slug: string expected";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    if (message.template != null && message.hasOwnProperty("template"))
                        if (!$util.isString(message.template))
                            return "template: string expected";
                    if (message.templateInput != null && message.hasOwnProperty("templateInput"))
                        if (!$util.isString(message.templateInput))
                            return "templateInput: string expected";
                    if (message.users != null && message.hasOwnProperty("users")) {
                        if (!Array.isArray(message.users))
                            return "users: array expected";
                        for (let i = 0; i < message.users.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.UserDefinition.verify(message.users[i]);
                            if (error)
                                return "users." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ProjectDefinition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDefinition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectDefinition} ProjectDefinition
                 */
                ProjectDefinition.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectDefinition)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectDefinition();
                    if (object.slug != null)
                        message.slug = String(object.slug);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.template != null)
                        message.template = String(object.template);
                    if (object.templateInput != null)
                        message.templateInput = String(object.templateInput);
                    if (object.users) {
                        if (!Array.isArray(object.users))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectDefinition.users: array expected");
                        message.users = [];
                        for (let i = 0; i < object.users.length; ++i) {
                            if (typeof object.users[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ProjectDefinition.users: object expected");
                            message.users[i] = $root.colbylwilliams.teamcloud.v1.UserDefinition.fromObject(object.users[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectDefinition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDefinition
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectDefinition} message ProjectDefinition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectDefinition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.users = [];
                    if (options.defaults) {
                        object.displayName = "";
                        object.templateInput = "";
                        object.template = "";
                    }
                    if (message.slug != null && message.hasOwnProperty("slug")) {
                        object.slug = message.slug;
                        if (options.oneofs)
                            object._slug = "slug";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        object.displayName = message.displayName;
                    if (message.users && message.users.length) {
                        object.users = [];
                        for (let j = 0; j < message.users.length; ++j)
                            object.users[j] = $root.colbylwilliams.teamcloud.v1.UserDefinition.toObject(message.users[j], options);
                    }
                    if (message.templateInput != null && message.hasOwnProperty("templateInput"))
                        object.templateInput = message.templateInput;
                    if (message.template != null && message.hasOwnProperty("template"))
                        object.template = message.template;
                    return object;
                };

                /**
                 * Converts this ProjectDefinition to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectDefinition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectDefinition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProjectDefinition;
            })();

            v1.ProjectIdentitiesAPI = (function() {

                /**
                 * Constructs a new ProjectIdentitiesAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectIdentitiesAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ProjectIdentitiesAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (ProjectIdentitiesAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ProjectIdentitiesAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI#createProjectIdentity}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @typedef CreateProjectIdentityCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentityDataResult} [response] ProjectIdentityDataResult
                 */

                /**
                 * Calls CreateProjectIdentity.
                 * @function createProjectIdentity
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectIdentityRequest} request CreateProjectIdentityRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI.CreateProjectIdentityCallback} callback Node-style callback called with the error, if any, and ProjectIdentityDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectIdentitiesAPI.prototype.createProjectIdentity = function createProjectIdentity(request, callback) {
                    return this.rpcCall(createProjectIdentity, $root.colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest, $root.colbylwilliams.teamcloud.v1.ProjectIdentityDataResult, request, callback);
                }, "name", { value: "CreateProjectIdentity" });

                /**
                 * Calls CreateProjectIdentity.
                 * @function createProjectIdentity
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectIdentityRequest} request CreateProjectIdentityRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectIdentityDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI#deleteProjectIdentity}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @typedef DeleteProjectIdentityCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentityDataResult} [response] ProjectIdentityDataResult
                 */

                /**
                 * Calls DeleteProjectIdentity.
                 * @function deleteProjectIdentity
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectIdentityRequest} request DeleteProjectIdentityRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI.DeleteProjectIdentityCallback} callback Node-style callback called with the error, if any, and ProjectIdentityDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectIdentitiesAPI.prototype.deleteProjectIdentity = function deleteProjectIdentity(request, callback) {
                    return this.rpcCall(deleteProjectIdentity, $root.colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest, $root.colbylwilliams.teamcloud.v1.ProjectIdentityDataResult, request, callback);
                }, "name", { value: "DeleteProjectIdentity" });

                /**
                 * Calls DeleteProjectIdentity.
                 * @function deleteProjectIdentity
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectIdentityRequest} request DeleteProjectIdentityRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectIdentityDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI#getProjectIdentities}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @typedef GetProjectIdentitiesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult} [response] ProjectIdentityListDataResult
                 */

                /**
                 * Calls GetProjectIdentities.
                 * @function getProjectIdentities
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectIdentitiesRequest} request GetProjectIdentitiesRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI.GetProjectIdentitiesCallback} callback Node-style callback called with the error, if any, and ProjectIdentityListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectIdentitiesAPI.prototype.getProjectIdentities = function getProjectIdentities(request, callback) {
                    return this.rpcCall(getProjectIdentities, $root.colbylwilliams.teamcloud.v1.GetProjectIdentitiesRequest, $root.colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult, request, callback);
                }, "name", { value: "GetProjectIdentities" });

                /**
                 * Calls GetProjectIdentities.
                 * @function getProjectIdentities
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectIdentitiesRequest} request GetProjectIdentitiesRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI#getProjectIdentity}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @typedef GetProjectIdentityCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentityDataResult} [response] ProjectIdentityDataResult
                 */

                /**
                 * Calls GetProjectIdentity.
                 * @function getProjectIdentity
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectIdentityRequest} request GetProjectIdentityRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI.GetProjectIdentityCallback} callback Node-style callback called with the error, if any, and ProjectIdentityDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectIdentitiesAPI.prototype.getProjectIdentity = function getProjectIdentity(request, callback) {
                    return this.rpcCall(getProjectIdentity, $root.colbylwilliams.teamcloud.v1.GetProjectIdentityRequest, $root.colbylwilliams.teamcloud.v1.ProjectIdentityDataResult, request, callback);
                }, "name", { value: "GetProjectIdentity" });

                /**
                 * Calls GetProjectIdentity.
                 * @function getProjectIdentity
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectIdentityRequest} request GetProjectIdentityRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectIdentityDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI#updateProjectIdentity}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @typedef UpdateProjectIdentityCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} [response] StatusResult
                 */

                /**
                 * Calls UpdateProjectIdentity.
                 * @function updateProjectIdentity
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectIdentityRequest} request UpdateProjectIdentityRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI.UpdateProjectIdentityCallback} callback Node-style callback called with the error, if any, and StatusResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectIdentitiesAPI.prototype.updateProjectIdentity = function updateProjectIdentity(request, callback) {
                    return this.rpcCall(updateProjectIdentity, $root.colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest, $root.colbylwilliams.teamcloud.v1.StatusResult, request, callback);
                }, "name", { value: "UpdateProjectIdentity" });

                /**
                 * Calls UpdateProjectIdentity.
                 * @function updateProjectIdentity
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentitiesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectIdentityRequest} request UpdateProjectIdentityRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StatusResult>} Promise
                 * @variation 2
                 */

                return ProjectIdentitiesAPI;
            })();

            v1.CreateProjectIdentityRequest = (function() {

                /**
                 * Properties of a CreateProjectIdentityRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICreateProjectIdentityRequest
                 * @property {string|null} [organizationId] CreateProjectIdentityRequest organizationId
                 * @property {string|null} [projectId] CreateProjectIdentityRequest projectId
                 * @property {colbylwilliams.teamcloud.v1.IProjectIdentityDefinition|null} [projectIdentityDefinition] CreateProjectIdentityRequest projectIdentityDefinition
                 */

                /**
                 * Constructs a new CreateProjectIdentityRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CreateProjectIdentityRequest.
                 * @implements ICreateProjectIdentityRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectIdentityRequest=} [properties] Properties to set
                 */
                function CreateProjectIdentityRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateProjectIdentityRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest
                 * @instance
                 */
                CreateProjectIdentityRequest.prototype.organizationId = "";

                /**
                 * CreateProjectIdentityRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest
                 * @instance
                 */
                CreateProjectIdentityRequest.prototype.projectId = "";

                /**
                 * CreateProjectIdentityRequest projectIdentityDefinition.
                 * @member {colbylwilliams.teamcloud.v1.IProjectIdentityDefinition|null|undefined} projectIdentityDefinition
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest
                 * @instance
                 */
                CreateProjectIdentityRequest.prototype.projectIdentityDefinition = null;

                /**
                 * Verifies a CreateProjectIdentityRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateProjectIdentityRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.projectIdentityDefinition != null && message.hasOwnProperty("projectIdentityDefinition")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ProjectIdentityDefinition.verify(message.projectIdentityDefinition);
                        if (error)
                            return "projectIdentityDefinition." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CreateProjectIdentityRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest} CreateProjectIdentityRequest
                 */
                CreateProjectIdentityRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.projectIdentityDefinition != null) {
                        if (typeof object.projectIdentityDefinition !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest.projectIdentityDefinition: object expected");
                        message.projectIdentityDefinition = $root.colbylwilliams.teamcloud.v1.ProjectIdentityDefinition.fromObject(object.projectIdentityDefinition);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CreateProjectIdentityRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest} message CreateProjectIdentityRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateProjectIdentityRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                        object.projectIdentityDefinition = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.projectIdentityDefinition != null && message.hasOwnProperty("projectIdentityDefinition"))
                        object.projectIdentityDefinition = $root.colbylwilliams.teamcloud.v1.ProjectIdentityDefinition.toObject(message.projectIdentityDefinition, options);
                    return object;
                };

                /**
                 * Converts this CreateProjectIdentityRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectIdentityRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateProjectIdentityRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CreateProjectIdentityRequest;
            })();

            v1.DeleteProjectIdentityRequest = (function() {

                /**
                 * Properties of a DeleteProjectIdentityRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeleteProjectIdentityRequest
                 * @property {string|null} [projectIdentityId] DeleteProjectIdentityRequest projectIdentityId
                 * @property {string|null} [organizationId] DeleteProjectIdentityRequest organizationId
                 * @property {string|null} [projectId] DeleteProjectIdentityRequest projectId
                 */

                /**
                 * Constructs a new DeleteProjectIdentityRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeleteProjectIdentityRequest.
                 * @implements IDeleteProjectIdentityRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectIdentityRequest=} [properties] Properties to set
                 */
                function DeleteProjectIdentityRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteProjectIdentityRequest projectIdentityId.
                 * @member {string} projectIdentityId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest
                 * @instance
                 */
                DeleteProjectIdentityRequest.prototype.projectIdentityId = "";

                /**
                 * DeleteProjectIdentityRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest
                 * @instance
                 */
                DeleteProjectIdentityRequest.prototype.organizationId = "";

                /**
                 * DeleteProjectIdentityRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest
                 * @instance
                 */
                DeleteProjectIdentityRequest.prototype.projectId = "";

                /**
                 * Verifies a DeleteProjectIdentityRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteProjectIdentityRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.projectIdentityId != null && message.hasOwnProperty("projectIdentityId"))
                        if (!$util.isString(message.projectIdentityId))
                            return "projectIdentityId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a DeleteProjectIdentityRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest} DeleteProjectIdentityRequest
                 */
                DeleteProjectIdentityRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest();
                    if (object.projectIdentityId != null)
                        message.projectIdentityId = String(object.projectIdentityId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a DeleteProjectIdentityRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest} message DeleteProjectIdentityRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteProjectIdentityRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.projectIdentityId = "";
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.projectIdentityId != null && message.hasOwnProperty("projectIdentityId"))
                        object.projectIdentityId = message.projectIdentityId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this DeleteProjectIdentityRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectIdentityRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteProjectIdentityRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeleteProjectIdentityRequest;
            })();

            v1.GetProjectIdentitiesRequest = (function() {

                /**
                 * Properties of a GetProjectIdentitiesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectIdentitiesRequest
                 * @property {string|null} [organizationId] GetProjectIdentitiesRequest organizationId
                 * @property {string|null} [projectId] GetProjectIdentitiesRequest projectId
                 */

                /**
                 * Constructs a new GetProjectIdentitiesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectIdentitiesRequest.
                 * @implements IGetProjectIdentitiesRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectIdentitiesRequest=} [properties] Properties to set
                 */
                function GetProjectIdentitiesRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectIdentitiesRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentitiesRequest
                 * @instance
                 */
                GetProjectIdentitiesRequest.prototype.organizationId = "";

                /**
                 * GetProjectIdentitiesRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentitiesRequest
                 * @instance
                 */
                GetProjectIdentitiesRequest.prototype.projectId = "";

                /**
                 * Verifies a GetProjectIdentitiesRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentitiesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectIdentitiesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectIdentitiesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentitiesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectIdentitiesRequest} GetProjectIdentitiesRequest
                 */
                GetProjectIdentitiesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectIdentitiesRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectIdentitiesRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectIdentitiesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentitiesRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectIdentitiesRequest} message GetProjectIdentitiesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectIdentitiesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetProjectIdentitiesRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentitiesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectIdentitiesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectIdentitiesRequest;
            })();

            v1.GetProjectIdentityRequest = (function() {

                /**
                 * Properties of a GetProjectIdentityRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectIdentityRequest
                 * @property {string|null} [projectIdentityId] GetProjectIdentityRequest projectIdentityId
                 * @property {string|null} [organizationId] GetProjectIdentityRequest organizationId
                 * @property {string|null} [projectId] GetProjectIdentityRequest projectId
                 */

                /**
                 * Constructs a new GetProjectIdentityRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectIdentityRequest.
                 * @implements IGetProjectIdentityRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectIdentityRequest=} [properties] Properties to set
                 */
                function GetProjectIdentityRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectIdentityRequest projectIdentityId.
                 * @member {string} projectIdentityId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentityRequest
                 * @instance
                 */
                GetProjectIdentityRequest.prototype.projectIdentityId = "";

                /**
                 * GetProjectIdentityRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentityRequest
                 * @instance
                 */
                GetProjectIdentityRequest.prototype.organizationId = "";

                /**
                 * GetProjectIdentityRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentityRequest
                 * @instance
                 */
                GetProjectIdentityRequest.prototype.projectId = "";

                /**
                 * Verifies a GetProjectIdentityRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentityRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectIdentityRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.projectIdentityId != null && message.hasOwnProperty("projectIdentityId"))
                        if (!$util.isString(message.projectIdentityId))
                            return "projectIdentityId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectIdentityRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentityRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectIdentityRequest} GetProjectIdentityRequest
                 */
                GetProjectIdentityRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectIdentityRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectIdentityRequest();
                    if (object.projectIdentityId != null)
                        message.projectIdentityId = String(object.projectIdentityId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectIdentityRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentityRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectIdentityRequest} message GetProjectIdentityRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectIdentityRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.projectIdentityId = "";
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.projectIdentityId != null && message.hasOwnProperty("projectIdentityId"))
                        object.projectIdentityId = message.projectIdentityId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetProjectIdentityRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectIdentityRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectIdentityRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectIdentityRequest;
            })();

            v1.UpdateProjectIdentityRequest = (function() {

                /**
                 * Properties of an UpdateProjectIdentityRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUpdateProjectIdentityRequest
                 * @property {string|null} [projectIdentityId] UpdateProjectIdentityRequest projectIdentityId
                 * @property {string|null} [organizationId] UpdateProjectIdentityRequest organizationId
                 * @property {string|null} [projectId] UpdateProjectIdentityRequest projectId
                 * @property {colbylwilliams.teamcloud.v1.IProjectIdentity|null} [projectIdentity] UpdateProjectIdentityRequest projectIdentity
                 */

                /**
                 * Constructs a new UpdateProjectIdentityRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an UpdateProjectIdentityRequest.
                 * @implements IUpdateProjectIdentityRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectIdentityRequest=} [properties] Properties to set
                 */
                function UpdateProjectIdentityRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateProjectIdentityRequest projectIdentityId.
                 * @member {string} projectIdentityId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest
                 * @instance
                 */
                UpdateProjectIdentityRequest.prototype.projectIdentityId = "";

                /**
                 * UpdateProjectIdentityRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest
                 * @instance
                 */
                UpdateProjectIdentityRequest.prototype.organizationId = "";

                /**
                 * UpdateProjectIdentityRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest
                 * @instance
                 */
                UpdateProjectIdentityRequest.prototype.projectId = "";

                /**
                 * UpdateProjectIdentityRequest projectIdentity.
                 * @member {colbylwilliams.teamcloud.v1.IProjectIdentity|null|undefined} projectIdentity
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest
                 * @instance
                 */
                UpdateProjectIdentityRequest.prototype.projectIdentity = null;

                /**
                 * Verifies an UpdateProjectIdentityRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateProjectIdentityRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.projectIdentityId != null && message.hasOwnProperty("projectIdentityId"))
                        if (!$util.isString(message.projectIdentityId))
                            return "projectIdentityId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.projectIdentity != null && message.hasOwnProperty("projectIdentity")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ProjectIdentity.verify(message.projectIdentity);
                        if (error)
                            return "projectIdentity." + error;
                    }
                    return null;
                };

                /**
                 * Creates an UpdateProjectIdentityRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest} UpdateProjectIdentityRequest
                 */
                UpdateProjectIdentityRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest();
                    if (object.projectIdentityId != null)
                        message.projectIdentityId = String(object.projectIdentityId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.projectIdentity != null) {
                        if (typeof object.projectIdentity !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest.projectIdentity: object expected");
                        message.projectIdentity = $root.colbylwilliams.teamcloud.v1.ProjectIdentity.fromObject(object.projectIdentity);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an UpdateProjectIdentityRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest} message UpdateProjectIdentityRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateProjectIdentityRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.projectIdentityId = "";
                        object.organizationId = "";
                        object.projectId = "";
                        object.projectIdentity = null;
                    }
                    if (message.projectIdentityId != null && message.hasOwnProperty("projectIdentityId"))
                        object.projectIdentityId = message.projectIdentityId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.projectIdentity != null && message.hasOwnProperty("projectIdentity"))
                        object.projectIdentity = $root.colbylwilliams.teamcloud.v1.ProjectIdentity.toObject(message.projectIdentity, options);
                    return object;
                };

                /**
                 * Converts this UpdateProjectIdentityRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectIdentityRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateProjectIdentityRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UpdateProjectIdentityRequest;
            })();

            v1.ProjectIdentity = (function() {

                /**
                 * Properties of a ProjectIdentity.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectIdentity
                 * @property {string|null} [projectId] ProjectIdentity projectId
                 * @property {string|null} [projectName] ProjectIdentity projectName
                 * @property {string|null} [organization] ProjectIdentity organization
                 * @property {string|null} [organizationName] ProjectIdentity organizationName
                 * @property {string|null} [displayName] ProjectIdentity displayName
                 * @property {string|null} [deploymentScopeId] ProjectIdentity deploymentScopeId
                 * @property {string|null} [tenantId] ProjectIdentity tenantId
                 * @property {string|null} [clientId] ProjectIdentity clientId
                 * @property {string|null} [clientSecret] ProjectIdentity clientSecret
                 * @property {Array.<string>|null} [redirectUrls] ProjectIdentity redirectUrls
                 * @property {string|null} [objectId] ProjectIdentity objectId
                 * @property {string|null} [id] ProjectIdentity id
                 */

                /**
                 * Constructs a new ProjectIdentity.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectIdentity.
                 * @implements IProjectIdentity
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectIdentity=} [properties] Properties to set
                 */
                function ProjectIdentity(properties) {
                    this.redirectUrls = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectIdentity projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.projectId = "";

                /**
                 * ProjectIdentity projectName.
                 * @member {string} projectName
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.projectName = "";

                /**
                 * ProjectIdentity organization.
                 * @member {string} organization
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.organization = "";

                /**
                 * ProjectIdentity organizationName.
                 * @member {string} organizationName
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.organizationName = "";

                /**
                 * ProjectIdentity displayName.
                 * @member {string} displayName
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.displayName = "";

                /**
                 * ProjectIdentity deploymentScopeId.
                 * @member {string} deploymentScopeId
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.deploymentScopeId = "";

                /**
                 * ProjectIdentity tenantId.
                 * @member {string} tenantId
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.tenantId = "";

                /**
                 * ProjectIdentity clientId.
                 * @member {string} clientId
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.clientId = "";

                /**
                 * ProjectIdentity clientSecret.
                 * @member {string|null|undefined} clientSecret
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.clientSecret = null;

                /**
                 * ProjectIdentity redirectUrls.
                 * @member {Array.<string>} redirectUrls
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.redirectUrls = $util.emptyArray;

                /**
                 * ProjectIdentity objectId.
                 * @member {string} objectId
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.objectId = "";

                /**
                 * ProjectIdentity id.
                 * @member {string} id
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                ProjectIdentity.prototype.id = "";

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ProjectIdentity _clientSecret.
                 * @member {"clientSecret"|undefined} _clientSecret
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 */
                Object.defineProperty(ProjectIdentity.prototype, "_clientSecret", {
                    get: $util.oneOfGetter($oneOfFields = ["clientSecret"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ProjectIdentity message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectIdentity.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.projectName != null && message.hasOwnProperty("projectName"))
                        if (!$util.isString(message.projectName))
                            return "projectName: string expected";
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        if (!$util.isString(message.organization))
                            return "organization: string expected";
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        if (!$util.isString(message.organizationName))
                            return "organizationName: string expected";
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        if (!$util.isString(message.deploymentScopeId))
                            return "deploymentScopeId: string expected";
                    if (message.tenantId != null && message.hasOwnProperty("tenantId"))
                        if (!$util.isString(message.tenantId))
                            return "tenantId: string expected";
                    if (message.clientId != null && message.hasOwnProperty("clientId"))
                        if (!$util.isString(message.clientId))
                            return "clientId: string expected";
                    if (message.clientSecret != null && message.hasOwnProperty("clientSecret")) {
                        properties._clientSecret = 1;
                        if (!$util.isString(message.clientSecret))
                            return "clientSecret: string expected";
                    }
                    if (message.redirectUrls != null && message.hasOwnProperty("redirectUrls")) {
                        if (!Array.isArray(message.redirectUrls))
                            return "redirectUrls: array expected";
                        for (let i = 0; i < message.redirectUrls.length; ++i)
                            if (!$util.isString(message.redirectUrls[i]))
                                return "redirectUrls: string[] expected";
                    }
                    if (message.objectId != null && message.hasOwnProperty("objectId"))
                        if (!$util.isString(message.objectId))
                            return "objectId: string expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    return null;
                };

                /**
                 * Creates a ProjectIdentity message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectIdentity} ProjectIdentity
                 */
                ProjectIdentity.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectIdentity)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectIdentity();
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.projectName != null)
                        message.projectName = String(object.projectName);
                    if (object.organization != null)
                        message.organization = String(object.organization);
                    if (object.organizationName != null)
                        message.organizationName = String(object.organizationName);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.deploymentScopeId != null)
                        message.deploymentScopeId = String(object.deploymentScopeId);
                    if (object.tenantId != null)
                        message.tenantId = String(object.tenantId);
                    if (object.clientId != null)
                        message.clientId = String(object.clientId);
                    if (object.clientSecret != null)
                        message.clientSecret = String(object.clientSecret);
                    if (object.redirectUrls) {
                        if (!Array.isArray(object.redirectUrls))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectIdentity.redirectUrls: array expected");
                        message.redirectUrls = [];
                        for (let i = 0; i < object.redirectUrls.length; ++i)
                            message.redirectUrls[i] = String(object.redirectUrls[i]);
                    }
                    if (object.objectId != null)
                        message.objectId = String(object.objectId);
                    if (object.id != null)
                        message.id = String(object.id);
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectIdentity message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentity} message ProjectIdentity
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectIdentity.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.redirectUrls = [];
                    if (options.defaults) {
                        object.id = "";
                        object.objectId = "";
                        object.displayName = "";
                        object.organization = "";
                        object.organizationName = "";
                        object.tenantId = "";
                        object.deploymentScopeId = "";
                        object.projectId = "";
                        object.clientId = "";
                        object.projectName = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.objectId != null && message.hasOwnProperty("objectId"))
                        object.objectId = message.objectId;
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        object.displayName = message.displayName;
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = message.organization;
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        object.organizationName = message.organizationName;
                    if (message.tenantId != null && message.hasOwnProperty("tenantId"))
                        object.tenantId = message.tenantId;
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        object.deploymentScopeId = message.deploymentScopeId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.clientId != null && message.hasOwnProperty("clientId"))
                        object.clientId = message.clientId;
                    if (message.clientSecret != null && message.hasOwnProperty("clientSecret")) {
                        object.clientSecret = message.clientSecret;
                        if (options.oneofs)
                            object._clientSecret = "clientSecret";
                    }
                    if (message.projectName != null && message.hasOwnProperty("projectName"))
                        object.projectName = message.projectName;
                    if (message.redirectUrls && message.redirectUrls.length) {
                        object.redirectUrls = [];
                        for (let j = 0; j < message.redirectUrls.length; ++j)
                            object.redirectUrls[j] = message.redirectUrls[j];
                    }
                    return object;
                };

                /**
                 * Converts this ProjectIdentity to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentity
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectIdentity.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProjectIdentity;
            })();

            v1.ProjectIdentityDataResult = (function() {

                /**
                 * Properties of a ProjectIdentityDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectIdentityDataResult
                 * @property {number|null} [code] ProjectIdentityDataResult code
                 * @property {string|null} [status] ProjectIdentityDataResult status
                 * @property {colbylwilliams.teamcloud.v1.IProjectIdentity|null} [data] ProjectIdentityDataResult data
                 * @property {string|null} [location] ProjectIdentityDataResult location
                 */

                /**
                 * Constructs a new ProjectIdentityDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectIdentityDataResult.
                 * @implements IProjectIdentityDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectIdentityDataResult=} [properties] Properties to set
                 */
                function ProjectIdentityDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectIdentityDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDataResult
                 * @instance
                 */
                ProjectIdentityDataResult.prototype.code = 0;

                /**
                 * ProjectIdentityDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDataResult
                 * @instance
                 */
                ProjectIdentityDataResult.prototype.status = null;

                /**
                 * ProjectIdentityDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.IProjectIdentity|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDataResult
                 * @instance
                 */
                ProjectIdentityDataResult.prototype.data = null;

                /**
                 * ProjectIdentityDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDataResult
                 * @instance
                 */
                ProjectIdentityDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ProjectIdentityDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectIdentityDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ProjectIdentityDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectIdentityDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ProjectIdentityDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectIdentityDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ProjectIdentity.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ProjectIdentityDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectIdentityDataResult} ProjectIdentityDataResult
                 */
                ProjectIdentityDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectIdentityDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectIdentityDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectIdentityDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.ProjectIdentity.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectIdentityDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentityDataResult} message ProjectIdentityDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectIdentityDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.ProjectIdentity.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ProjectIdentityDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectIdentityDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProjectIdentityDataResult;
            })();

            v1.ProjectIdentityDefinition = (function() {

                /**
                 * Properties of a ProjectIdentityDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectIdentityDefinition
                 * @property {string|null} [displayName] ProjectIdentityDefinition displayName
                 * @property {string|null} [deploymentScopeId] ProjectIdentityDefinition deploymentScopeId
                 */

                /**
                 * Constructs a new ProjectIdentityDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectIdentityDefinition.
                 * @implements IProjectIdentityDefinition
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectIdentityDefinition=} [properties] Properties to set
                 */
                function ProjectIdentityDefinition(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectIdentityDefinition displayName.
                 * @member {string} displayName
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDefinition
                 * @instance
                 */
                ProjectIdentityDefinition.prototype.displayName = "";

                /**
                 * ProjectIdentityDefinition deploymentScopeId.
                 * @member {string} deploymentScopeId
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDefinition
                 * @instance
                 */
                ProjectIdentityDefinition.prototype.deploymentScopeId = "";

                /**
                 * Verifies a ProjectIdentityDefinition message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDefinition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectIdentityDefinition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        if (!$util.isString(message.deploymentScopeId))
                            return "deploymentScopeId: string expected";
                    return null;
                };

                /**
                 * Creates a ProjectIdentityDefinition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDefinition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectIdentityDefinition} ProjectIdentityDefinition
                 */
                ProjectIdentityDefinition.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectIdentityDefinition)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectIdentityDefinition();
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.deploymentScopeId != null)
                        message.deploymentScopeId = String(object.deploymentScopeId);
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectIdentityDefinition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDefinition
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentityDefinition} message ProjectIdentityDefinition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectIdentityDefinition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.displayName = "";
                        object.deploymentScopeId = "";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        object.displayName = message.displayName;
                    if (message.deploymentScopeId != null && message.hasOwnProperty("deploymentScopeId"))
                        object.deploymentScopeId = message.deploymentScopeId;
                    return object;
                };

                /**
                 * Converts this ProjectIdentityDefinition to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityDefinition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectIdentityDefinition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProjectIdentityDefinition;
            })();

            v1.ProjectIdentityListDataResult = (function() {

                /**
                 * Properties of a ProjectIdentityListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectIdentityListDataResult
                 * @property {number|null} [code] ProjectIdentityListDataResult code
                 * @property {string|null} [status] ProjectIdentityListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.IProjectIdentity>|null} [data] ProjectIdentityListDataResult data
                 * @property {string|null} [location] ProjectIdentityListDataResult location
                 */

                /**
                 * Constructs a new ProjectIdentityListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectIdentityListDataResult.
                 * @implements IProjectIdentityListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectIdentityListDataResult=} [properties] Properties to set
                 */
                function ProjectIdentityListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectIdentityListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult
                 * @instance
                 */
                ProjectIdentityListDataResult.prototype.code = 0;

                /**
                 * ProjectIdentityListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult
                 * @instance
                 */
                ProjectIdentityListDataResult.prototype.status = null;

                /**
                 * ProjectIdentityListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IProjectIdentity>} data
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult
                 * @instance
                 */
                ProjectIdentityListDataResult.prototype.data = $util.emptyArray;

                /**
                 * ProjectIdentityListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult
                 * @instance
                 */
                ProjectIdentityListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ProjectIdentityListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectIdentityListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ProjectIdentityListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectIdentityListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ProjectIdentityListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectIdentityListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.ProjectIdentity.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ProjectIdentityListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult} ProjectIdentityListDataResult
                 */
                ProjectIdentityListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.ProjectIdentity.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectIdentityListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult} message ProjectIdentityListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectIdentityListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.ProjectIdentity.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ProjectIdentityListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectIdentityListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectIdentityListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProjectIdentityListDataResult;
            })();

            v1.ProjectListDataResult = (function() {

                /**
                 * Properties of a ProjectListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectListDataResult
                 * @property {number|null} [code] ProjectListDataResult code
                 * @property {string|null} [status] ProjectListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.IProject>|null} [data] ProjectListDataResult data
                 * @property {string|null} [location] ProjectListDataResult location
                 */

                /**
                 * Constructs a new ProjectListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectListDataResult.
                 * @implements IProjectListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectListDataResult=} [properties] Properties to set
                 */
                function ProjectListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ProjectListDataResult
                 * @instance
                 */
                ProjectListDataResult.prototype.code = 0;

                /**
                 * ProjectListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectListDataResult
                 * @instance
                 */
                ProjectListDataResult.prototype.status = null;

                /**
                 * ProjectListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IProject>} data
                 * @memberof colbylwilliams.teamcloud.v1.ProjectListDataResult
                 * @instance
                 */
                ProjectListDataResult.prototype.data = $util.emptyArray;

                /**
                 * ProjectListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectListDataResult
                 * @instance
                 */
                ProjectListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ProjectListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectListDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ProjectListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectListDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ProjectListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.Project.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ProjectListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectListDataResult} ProjectListDataResult
                 */
                ProjectListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ProjectListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.Project.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectListDataResult} message ProjectListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.Project.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ProjectListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProjectListDataResult;
            })();

            v1.ProjectAPI = (function() {

                /**
                 * Constructs a new ProjectAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ProjectAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (ProjectAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ProjectAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectAPI#createProject}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @typedef CreateProjectCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectDataResult} [response] ProjectDataResult
                 */

                /**
                 * Calls CreateProject.
                 * @function createProject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectRequest} request CreateProjectRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectAPI.CreateProjectCallback} callback Node-style callback called with the error, if any, and ProjectDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectAPI.prototype.createProject = function createProject(request, callback) {
                    return this.rpcCall(createProject, $root.colbylwilliams.teamcloud.v1.CreateProjectRequest, $root.colbylwilliams.teamcloud.v1.ProjectDataResult, request, callback);
                }, "name", { value: "CreateProject" });

                /**
                 * Calls CreateProject.
                 * @function createProject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectRequest} request CreateProjectRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectAPI#deleteProject}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @typedef DeleteProjectCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} [response] StatusResult
                 */

                /**
                 * Calls DeleteProject.
                 * @function deleteProject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectRequest} request DeleteProjectRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectAPI.DeleteProjectCallback} callback Node-style callback called with the error, if any, and StatusResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectAPI.prototype.deleteProject = function deleteProject(request, callback) {
                    return this.rpcCall(deleteProject, $root.colbylwilliams.teamcloud.v1.DeleteProjectRequest, $root.colbylwilliams.teamcloud.v1.StatusResult, request, callback);
                }, "name", { value: "DeleteProject" });

                /**
                 * Calls DeleteProject.
                 * @function deleteProject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectRequest} request DeleteProjectRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StatusResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectAPI#getProject}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @typedef GetProjectCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectDataResult} [response] ProjectDataResult
                 */

                /**
                 * Calls GetProject.
                 * @function getProject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectRequest} request GetProjectRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectAPI.GetProjectCallback} callback Node-style callback called with the error, if any, and ProjectDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectAPI.prototype.getProject = function getProject(request, callback) {
                    return this.rpcCall(getProject, $root.colbylwilliams.teamcloud.v1.GetProjectRequest, $root.colbylwilliams.teamcloud.v1.ProjectDataResult, request, callback);
                }, "name", { value: "GetProject" });

                /**
                 * Calls GetProject.
                 * @function getProject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectRequest} request GetProjectRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectAPI#getProjects}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @typedef GetProjectsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectListDataResult} [response] ProjectListDataResult
                 */

                /**
                 * Calls GetProjects.
                 * @function getProjects
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectsRequest} request GetProjectsRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectAPI.GetProjectsCallback} callback Node-style callback called with the error, if any, and ProjectListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectAPI.prototype.getProjects = function getProjects(request, callback) {
                    return this.rpcCall(getProjects, $root.colbylwilliams.teamcloud.v1.GetProjectsRequest, $root.colbylwilliams.teamcloud.v1.ProjectListDataResult, request, callback);
                }, "name", { value: "GetProjects" });

                /**
                 * Calls GetProjects.
                 * @function getProjects
                 * @memberof colbylwilliams.teamcloud.v1.ProjectAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectsRequest} request GetProjectsRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectListDataResult>} Promise
                 * @variation 2
                 */

                return ProjectAPI;
            })();

            v1.CreateProjectRequest = (function() {

                /**
                 * Properties of a CreateProjectRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICreateProjectRequest
                 * @property {string|null} [organizationId] CreateProjectRequest organizationId
                 * @property {colbylwilliams.teamcloud.v1.IProjectDefinition|null} [projectDefinition] CreateProjectRequest projectDefinition
                 */

                /**
                 * Constructs a new CreateProjectRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CreateProjectRequest.
                 * @implements ICreateProjectRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectRequest=} [properties] Properties to set
                 */
                function CreateProjectRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateProjectRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectRequest
                 * @instance
                 */
                CreateProjectRequest.prototype.organizationId = "";

                /**
                 * CreateProjectRequest projectDefinition.
                 * @member {colbylwilliams.teamcloud.v1.IProjectDefinition|null|undefined} projectDefinition
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectRequest
                 * @instance
                 */
                CreateProjectRequest.prototype.projectDefinition = null;

                /**
                 * Verifies a CreateProjectRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateProjectRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectDefinition != null && message.hasOwnProperty("projectDefinition")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ProjectDefinition.verify(message.projectDefinition);
                        if (error)
                            return "projectDefinition." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CreateProjectRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CreateProjectRequest} CreateProjectRequest
                 */
                CreateProjectRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CreateProjectRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CreateProjectRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectDefinition != null) {
                        if (typeof object.projectDefinition !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.CreateProjectRequest.projectDefinition: object expected");
                        message.projectDefinition = $root.colbylwilliams.teamcloud.v1.ProjectDefinition.fromObject(object.projectDefinition);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CreateProjectRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CreateProjectRequest} message CreateProjectRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateProjectRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectDefinition = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectDefinition != null && message.hasOwnProperty("projectDefinition"))
                        object.projectDefinition = $root.colbylwilliams.teamcloud.v1.ProjectDefinition.toObject(message.projectDefinition, options);
                    return object;
                };

                /**
                 * Converts this CreateProjectRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateProjectRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CreateProjectRequest;
            })();

            v1.DeleteProjectRequest = (function() {

                /**
                 * Properties of a DeleteProjectRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeleteProjectRequest
                 * @property {string|null} [projectId] DeleteProjectRequest projectId
                 * @property {string|null} [organizationId] DeleteProjectRequest organizationId
                 */

                /**
                 * Constructs a new DeleteProjectRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeleteProjectRequest.
                 * @implements IDeleteProjectRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectRequest=} [properties] Properties to set
                 */
                function DeleteProjectRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteProjectRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectRequest
                 * @instance
                 */
                DeleteProjectRequest.prototype.projectId = "";

                /**
                 * DeleteProjectRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectRequest
                 * @instance
                 */
                DeleteProjectRequest.prototype.organizationId = "";

                /**
                 * Verifies a DeleteProjectRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteProjectRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a DeleteProjectRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeleteProjectRequest} DeleteProjectRequest
                 */
                DeleteProjectRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeleteProjectRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeleteProjectRequest();
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a DeleteProjectRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeleteProjectRequest} message DeleteProjectRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteProjectRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.projectId = "";
                        object.organizationId = "";
                    }
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this DeleteProjectRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteProjectRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeleteProjectRequest;
            })();

            v1.GetProjectRequest = (function() {

                /**
                 * Properties of a GetProjectRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectRequest
                 * @property {string|null} [projectId] GetProjectRequest projectId
                 * @property {string|null} [organizationId] GetProjectRequest organizationId
                 */

                /**
                 * Constructs a new GetProjectRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectRequest.
                 * @implements IGetProjectRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectRequest=} [properties] Properties to set
                 */
                function GetProjectRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectRequest
                 * @instance
                 */
                GetProjectRequest.prototype.projectId = "";

                /**
                 * GetProjectRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectRequest
                 * @instance
                 */
                GetProjectRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetProjectRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectRequest} GetProjectRequest
                 */
                GetProjectRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectRequest();
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectRequest} message GetProjectRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.projectId = "";
                        object.organizationId = "";
                    }
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetProjectRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectRequest;
            })();

            v1.GetProjectsRequest = (function() {

                /**
                 * Properties of a GetProjectsRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectsRequest
                 * @property {string|null} [organizationId] GetProjectsRequest organizationId
                 */

                /**
                 * Constructs a new GetProjectsRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectsRequest.
                 * @implements IGetProjectsRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectsRequest=} [properties] Properties to set
                 */
                function GetProjectsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectsRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectsRequest
                 * @instance
                 */
                GetProjectsRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetProjectsRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectsRequest} GetProjectsRequest
                 */
                GetProjectsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectsRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectsRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectsRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectsRequest} message GetProjectsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.organizationId = "";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetProjectsRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectsRequest;
            })();

            v1.ProjectTagsAPI = (function() {

                /**
                 * Constructs a new ProjectTagsAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectTagsAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ProjectTagsAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (ProjectTagsAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ProjectTagsAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectTagsAPI#createProjectTag}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @typedef CreateProjectTagCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} [response] StatusResult
                 */

                /**
                 * Calls CreateProjectTag.
                 * @function createProjectTag
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectTagRequest} request CreateProjectTagRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectTagsAPI.CreateProjectTagCallback} callback Node-style callback called with the error, if any, and StatusResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectTagsAPI.prototype.createProjectTag = function createProjectTag(request, callback) {
                    return this.rpcCall(createProjectTag, $root.colbylwilliams.teamcloud.v1.CreateProjectTagRequest, $root.colbylwilliams.teamcloud.v1.StatusResult, request, callback);
                }, "name", { value: "CreateProjectTag" });

                /**
                 * Calls CreateProjectTag.
                 * @function createProjectTag
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectTagRequest} request CreateProjectTagRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StatusResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectTagsAPI#deleteProjectTag}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @typedef DeleteProjectTagCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} [response] StatusResult
                 */

                /**
                 * Calls DeleteProjectTag.
                 * @function deleteProjectTag
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectTagRequest} request DeleteProjectTagRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectTagsAPI.DeleteProjectTagCallback} callback Node-style callback called with the error, if any, and StatusResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectTagsAPI.prototype.deleteProjectTag = function deleteProjectTag(request, callback) {
                    return this.rpcCall(deleteProjectTag, $root.colbylwilliams.teamcloud.v1.DeleteProjectTagRequest, $root.colbylwilliams.teamcloud.v1.StatusResult, request, callback);
                }, "name", { value: "DeleteProjectTag" });

                /**
                 * Calls DeleteProjectTag.
                 * @function deleteProjectTag
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectTagRequest} request DeleteProjectTagRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StatusResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectTagsAPI#getProjectTagByKey}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @typedef GetProjectTagByKeyCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult} [response] StringStringDictionaryDataResult
                 */

                /**
                 * Calls GetProjectTagByKey.
                 * @function getProjectTagByKey
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTagByKeyRequest} request GetProjectTagByKeyRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectTagsAPI.GetProjectTagByKeyCallback} callback Node-style callback called with the error, if any, and StringStringDictionaryDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectTagsAPI.prototype.getProjectTagByKey = function getProjectTagByKey(request, callback) {
                    return this.rpcCall(getProjectTagByKey, $root.colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest, $root.colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult, request, callback);
                }, "name", { value: "GetProjectTagByKey" });

                /**
                 * Calls GetProjectTagByKey.
                 * @function getProjectTagByKey
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTagByKeyRequest} request GetProjectTagByKeyRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectTagsAPI#getProjectTags}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @typedef GetProjectTagsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult} [response] StringStringDictionaryDataResult
                 */

                /**
                 * Calls GetProjectTags.
                 * @function getProjectTags
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTagsRequest} request GetProjectTagsRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectTagsAPI.GetProjectTagsCallback} callback Node-style callback called with the error, if any, and StringStringDictionaryDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectTagsAPI.prototype.getProjectTags = function getProjectTags(request, callback) {
                    return this.rpcCall(getProjectTags, $root.colbylwilliams.teamcloud.v1.GetProjectTagsRequest, $root.colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult, request, callback);
                }, "name", { value: "GetProjectTags" });

                /**
                 * Calls GetProjectTags.
                 * @function getProjectTags
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTagsRequest} request GetProjectTagsRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectTagsAPI#updateProjectTag}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @typedef UpdateProjectTagCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} [response] StatusResult
                 */

                /**
                 * Calls UpdateProjectTag.
                 * @function updateProjectTag
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectTagRequest} request UpdateProjectTagRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectTagsAPI.UpdateProjectTagCallback} callback Node-style callback called with the error, if any, and StatusResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectTagsAPI.prototype.updateProjectTag = function updateProjectTag(request, callback) {
                    return this.rpcCall(updateProjectTag, $root.colbylwilliams.teamcloud.v1.UpdateProjectTagRequest, $root.colbylwilliams.teamcloud.v1.StatusResult, request, callback);
                }, "name", { value: "UpdateProjectTag" });

                /**
                 * Calls UpdateProjectTag.
                 * @function updateProjectTag
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTagsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectTagRequest} request UpdateProjectTagRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StatusResult>} Promise
                 * @variation 2
                 */

                return ProjectTagsAPI;
            })();

            v1.CreateProjectTagRequest = (function() {

                /**
                 * Properties of a CreateProjectTagRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICreateProjectTagRequest
                 * @property {string|null} [organizationId] CreateProjectTagRequest organizationId
                 * @property {string|null} [projectId] CreateProjectTagRequest projectId
                 */

                /**
                 * Constructs a new CreateProjectTagRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CreateProjectTagRequest.
                 * @implements ICreateProjectTagRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectTagRequest=} [properties] Properties to set
                 */
                function CreateProjectTagRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateProjectTagRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTagRequest
                 * @instance
                 */
                CreateProjectTagRequest.prototype.organizationId = "";

                /**
                 * CreateProjectTagRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTagRequest
                 * @instance
                 */
                CreateProjectTagRequest.prototype.projectId = "";

                /**
                 * Verifies a CreateProjectTagRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTagRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateProjectTagRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a CreateProjectTagRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTagRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CreateProjectTagRequest} CreateProjectTagRequest
                 */
                CreateProjectTagRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CreateProjectTagRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CreateProjectTagRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a CreateProjectTagRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTagRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CreateProjectTagRequest} message CreateProjectTagRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateProjectTagRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this CreateProjectTagRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTagRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateProjectTagRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CreateProjectTagRequest;
            })();

            v1.DeleteProjectTagRequest = (function() {

                /**
                 * Properties of a DeleteProjectTagRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeleteProjectTagRequest
                 * @property {string|null} [tagKey] DeleteProjectTagRequest tagKey
                 * @property {string|null} [organizationId] DeleteProjectTagRequest organizationId
                 * @property {string|null} [projectId] DeleteProjectTagRequest projectId
                 */

                /**
                 * Constructs a new DeleteProjectTagRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeleteProjectTagRequest.
                 * @implements IDeleteProjectTagRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectTagRequest=} [properties] Properties to set
                 */
                function DeleteProjectTagRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteProjectTagRequest tagKey.
                 * @member {string} tagKey
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTagRequest
                 * @instance
                 */
                DeleteProjectTagRequest.prototype.tagKey = "";

                /**
                 * DeleteProjectTagRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTagRequest
                 * @instance
                 */
                DeleteProjectTagRequest.prototype.organizationId = "";

                /**
                 * DeleteProjectTagRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTagRequest
                 * @instance
                 */
                DeleteProjectTagRequest.prototype.projectId = "";

                /**
                 * Verifies a DeleteProjectTagRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTagRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteProjectTagRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tagKey != null && message.hasOwnProperty("tagKey"))
                        if (!$util.isString(message.tagKey))
                            return "tagKey: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a DeleteProjectTagRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTagRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeleteProjectTagRequest} DeleteProjectTagRequest
                 */
                DeleteProjectTagRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeleteProjectTagRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeleteProjectTagRequest();
                    if (object.tagKey != null)
                        message.tagKey = String(object.tagKey);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a DeleteProjectTagRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTagRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeleteProjectTagRequest} message DeleteProjectTagRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteProjectTagRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.tagKey = "";
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.tagKey != null && message.hasOwnProperty("tagKey"))
                        object.tagKey = message.tagKey;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this DeleteProjectTagRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTagRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteProjectTagRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeleteProjectTagRequest;
            })();

            v1.GetProjectTagByKeyRequest = (function() {

                /**
                 * Properties of a GetProjectTagByKeyRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectTagByKeyRequest
                 * @property {string|null} [tagKey] GetProjectTagByKeyRequest tagKey
                 * @property {string|null} [organizationId] GetProjectTagByKeyRequest organizationId
                 * @property {string|null} [projectId] GetProjectTagByKeyRequest projectId
                 */

                /**
                 * Constructs a new GetProjectTagByKeyRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectTagByKeyRequest.
                 * @implements IGetProjectTagByKeyRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTagByKeyRequest=} [properties] Properties to set
                 */
                function GetProjectTagByKeyRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectTagByKeyRequest tagKey.
                 * @member {string} tagKey
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest
                 * @instance
                 */
                GetProjectTagByKeyRequest.prototype.tagKey = "";

                /**
                 * GetProjectTagByKeyRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest
                 * @instance
                 */
                GetProjectTagByKeyRequest.prototype.organizationId = "";

                /**
                 * GetProjectTagByKeyRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest
                 * @instance
                 */
                GetProjectTagByKeyRequest.prototype.projectId = "";

                /**
                 * Verifies a GetProjectTagByKeyRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectTagByKeyRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tagKey != null && message.hasOwnProperty("tagKey"))
                        if (!$util.isString(message.tagKey))
                            return "tagKey: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectTagByKeyRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest} GetProjectTagByKeyRequest
                 */
                GetProjectTagByKeyRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest();
                    if (object.tagKey != null)
                        message.tagKey = String(object.tagKey);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectTagByKeyRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest} message GetProjectTagByKeyRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectTagByKeyRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.tagKey = "";
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.tagKey != null && message.hasOwnProperty("tagKey"))
                        object.tagKey = message.tagKey;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetProjectTagByKeyRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagByKeyRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectTagByKeyRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectTagByKeyRequest;
            })();

            v1.GetProjectTagsRequest = (function() {

                /**
                 * Properties of a GetProjectTagsRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectTagsRequest
                 * @property {string|null} [organizationId] GetProjectTagsRequest organizationId
                 * @property {string|null} [projectId] GetProjectTagsRequest projectId
                 */

                /**
                 * Constructs a new GetProjectTagsRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectTagsRequest.
                 * @implements IGetProjectTagsRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTagsRequest=} [properties] Properties to set
                 */
                function GetProjectTagsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectTagsRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagsRequest
                 * @instance
                 */
                GetProjectTagsRequest.prototype.organizationId = "";

                /**
                 * GetProjectTagsRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagsRequest
                 * @instance
                 */
                GetProjectTagsRequest.prototype.projectId = "";

                /**
                 * Verifies a GetProjectTagsRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectTagsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectTagsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectTagsRequest} GetProjectTagsRequest
                 */
                GetProjectTagsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectTagsRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectTagsRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectTagsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagsRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectTagsRequest} message GetProjectTagsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectTagsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetProjectTagsRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTagsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectTagsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectTagsRequest;
            })();

            v1.UpdateProjectTagRequest = (function() {

                /**
                 * Properties of an UpdateProjectTagRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUpdateProjectTagRequest
                 * @property {string|null} [organizationId] UpdateProjectTagRequest organizationId
                 * @property {string|null} [projectId] UpdateProjectTagRequest projectId
                 */

                /**
                 * Constructs a new UpdateProjectTagRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an UpdateProjectTagRequest.
                 * @implements IUpdateProjectTagRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectTagRequest=} [properties] Properties to set
                 */
                function UpdateProjectTagRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateProjectTagRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTagRequest
                 * @instance
                 */
                UpdateProjectTagRequest.prototype.organizationId = "";

                /**
                 * UpdateProjectTagRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTagRequest
                 * @instance
                 */
                UpdateProjectTagRequest.prototype.projectId = "";

                /**
                 * Verifies an UpdateProjectTagRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTagRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateProjectTagRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates an UpdateProjectTagRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTagRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UpdateProjectTagRequest} UpdateProjectTagRequest
                 */
                UpdateProjectTagRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UpdateProjectTagRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UpdateProjectTagRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from an UpdateProjectTagRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTagRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UpdateProjectTagRequest} message UpdateProjectTagRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateProjectTagRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this UpdateProjectTagRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTagRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateProjectTagRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UpdateProjectTagRequest;
            })();

            v1.StringStringDictionaryDataResult = (function() {

                /**
                 * Properties of a StringStringDictionaryDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IStringStringDictionaryDataResult
                 * @property {number|null} [code] StringStringDictionaryDataResult code
                 * @property {string|null} [status] StringStringDictionaryDataResult status
                 * @property {Object.<string,string>|null} [data] StringStringDictionaryDataResult data
                 * @property {string|null} [location] StringStringDictionaryDataResult location
                 */

                /**
                 * Constructs a new StringStringDictionaryDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a StringStringDictionaryDataResult.
                 * @implements IStringStringDictionaryDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IStringStringDictionaryDataResult=} [properties] Properties to set
                 */
                function StringStringDictionaryDataResult(properties) {
                    this.data = {};
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * StringStringDictionaryDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult
                 * @instance
                 */
                StringStringDictionaryDataResult.prototype.code = 0;

                /**
                 * StringStringDictionaryDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult
                 * @instance
                 */
                StringStringDictionaryDataResult.prototype.status = null;

                /**
                 * StringStringDictionaryDataResult data.
                 * @member {Object.<string,string>} data
                 * @memberof colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult
                 * @instance
                 */
                StringStringDictionaryDataResult.prototype.data = $util.emptyObject;

                /**
                 * StringStringDictionaryDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult
                 * @instance
                 */
                StringStringDictionaryDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * StringStringDictionaryDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult
                 * @instance
                 */
                Object.defineProperty(StringStringDictionaryDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * StringStringDictionaryDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult
                 * @instance
                 */
                Object.defineProperty(StringStringDictionaryDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a StringStringDictionaryDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StringStringDictionaryDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!$util.isObject(message.data))
                            return "data: object expected";
                        let key = Object.keys(message.data);
                        for (let i = 0; i < key.length; ++i)
                            if (!$util.isString(message.data[key[i]]))
                                return "data: string{k:string} expected";
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a StringStringDictionaryDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult} StringStringDictionaryDataResult
                 */
                StringStringDictionaryDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult.data: object expected");
                        message.data = {};
                        for (let keys = Object.keys(object.data), i = 0; i < keys.length; ++i)
                            message.data[keys[i]] = String(object.data[keys[i]]);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a StringStringDictionaryDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult} message StringStringDictionaryDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StringStringDictionaryDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.objects || options.defaults)
                        object.data = {};
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    let keys2;
                    if (message.data && (keys2 = Object.keys(message.data)).length) {
                        object.data = {};
                        for (let j = 0; j < keys2.length; ++j)
                            object.data[keys2[j]] = message.data[keys2[j]];
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this StringStringDictionaryDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.StringStringDictionaryDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StringStringDictionaryDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return StringStringDictionaryDataResult;
            })();

            v1.ProjectTemplateDataResult = (function() {

                /**
                 * Properties of a ProjectTemplateDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectTemplateDataResult
                 * @property {number|null} [code] ProjectTemplateDataResult code
                 * @property {string|null} [status] ProjectTemplateDataResult status
                 * @property {colbylwilliams.teamcloud.v1.IProjectTemplate|null} [data] ProjectTemplateDataResult data
                 * @property {string|null} [location] ProjectTemplateDataResult location
                 */

                /**
                 * Constructs a new ProjectTemplateDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectTemplateDataResult.
                 * @implements IProjectTemplateDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectTemplateDataResult=} [properties] Properties to set
                 */
                function ProjectTemplateDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectTemplateDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDataResult
                 * @instance
                 */
                ProjectTemplateDataResult.prototype.code = 0;

                /**
                 * ProjectTemplateDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDataResult
                 * @instance
                 */
                ProjectTemplateDataResult.prototype.status = null;

                /**
                 * ProjectTemplateDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.IProjectTemplate|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDataResult
                 * @instance
                 */
                ProjectTemplateDataResult.prototype.data = null;

                /**
                 * ProjectTemplateDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDataResult
                 * @instance
                 */
                ProjectTemplateDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ProjectTemplateDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectTemplateDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ProjectTemplateDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectTemplateDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ProjectTemplateDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectTemplateDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ProjectTemplate.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ProjectTemplateDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectTemplateDataResult} ProjectTemplateDataResult
                 */
                ProjectTemplateDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectTemplateDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectTemplateDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectTemplateDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.ProjectTemplate.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectTemplateDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplateDataResult} message ProjectTemplateDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectTemplateDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.ProjectTemplate.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ProjectTemplateDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectTemplateDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProjectTemplateDataResult;
            })();

            v1.ProjectTemplate = (function() {

                /**
                 * Properties of a ProjectTemplate.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectTemplate
                 * @property {string|null} [organization] ProjectTemplate organization
                 * @property {string|null} [organizationName] ProjectTemplate organizationName
                 * @property {string|null} [slug] ProjectTemplate slug
                 * @property {string|null} [name] ProjectTemplate name
                 * @property {string|null} [displayName] ProjectTemplate displayName
                 * @property {Array.<string>|null} [components] ProjectTemplate components
                 * @property {colbylwilliams.teamcloud.v1.IRepositoryReference|null} [repository] ProjectTemplate repository
                 * @property {string|null} [description] ProjectTemplate description
                 * @property {boolean|null} [isDefault] ProjectTemplate isDefault
                 * @property {string|null} [inputJsonSchema] ProjectTemplate inputJsonSchema
                 * @property {string|null} [id] ProjectTemplate id
                 */

                /**
                 * Constructs a new ProjectTemplate.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectTemplate.
                 * @implements IProjectTemplate
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectTemplate=} [properties] Properties to set
                 */
                function ProjectTemplate(properties) {
                    this.components = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectTemplate organization.
                 * @member {string} organization
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                ProjectTemplate.prototype.organization = "";

                /**
                 * ProjectTemplate organizationName.
                 * @member {string} organizationName
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                ProjectTemplate.prototype.organizationName = "";

                /**
                 * ProjectTemplate slug.
                 * @member {string} slug
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                ProjectTemplate.prototype.slug = "";

                /**
                 * ProjectTemplate name.
                 * @member {string|null|undefined} name
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                ProjectTemplate.prototype.name = null;

                /**
                 * ProjectTemplate displayName.
                 * @member {string} displayName
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                ProjectTemplate.prototype.displayName = "";

                /**
                 * ProjectTemplate components.
                 * @member {Array.<string>} components
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                ProjectTemplate.prototype.components = $util.emptyArray;

                /**
                 * ProjectTemplate repository.
                 * @member {colbylwilliams.teamcloud.v1.IRepositoryReference|null|undefined} repository
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                ProjectTemplate.prototype.repository = null;

                /**
                 * ProjectTemplate description.
                 * @member {string|null|undefined} description
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                ProjectTemplate.prototype.description = null;

                /**
                 * ProjectTemplate isDefault.
                 * @member {boolean} isDefault
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                ProjectTemplate.prototype.isDefault = false;

                /**
                 * ProjectTemplate inputJsonSchema.
                 * @member {string|null|undefined} inputJsonSchema
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                ProjectTemplate.prototype.inputJsonSchema = null;

                /**
                 * ProjectTemplate id.
                 * @member {string} id
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                ProjectTemplate.prototype.id = "";

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ProjectTemplate _name.
                 * @member {"name"|undefined} _name
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                Object.defineProperty(ProjectTemplate.prototype, "_name", {
                    get: $util.oneOfGetter($oneOfFields = ["name"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ProjectTemplate _description.
                 * @member {"description"|undefined} _description
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                Object.defineProperty(ProjectTemplate.prototype, "_description", {
                    get: $util.oneOfGetter($oneOfFields = ["description"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ProjectTemplate _inputJsonSchema.
                 * @member {"inputJsonSchema"|undefined} _inputJsonSchema
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 */
                Object.defineProperty(ProjectTemplate.prototype, "_inputJsonSchema", {
                    get: $util.oneOfGetter($oneOfFields = ["inputJsonSchema"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ProjectTemplate message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectTemplate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        if (!$util.isString(message.organization))
                            return "organization: string expected";
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        if (!$util.isString(message.organizationName))
                            return "organizationName: string expected";
                    if (message.slug != null && message.hasOwnProperty("slug"))
                        if (!$util.isString(message.slug))
                            return "slug: string expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        properties._name = 1;
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    if (message.components != null && message.hasOwnProperty("components")) {
                        if (!Array.isArray(message.components))
                            return "components: array expected";
                        for (let i = 0; i < message.components.length; ++i)
                            if (!$util.isString(message.components[i]))
                                return "components: string[] expected";
                    }
                    if (message.repository != null && message.hasOwnProperty("repository")) {
                        let error = $root.colbylwilliams.teamcloud.v1.RepositoryReference.verify(message.repository);
                        if (error)
                            return "repository." + error;
                    }
                    if (message.description != null && message.hasOwnProperty("description")) {
                        properties._description = 1;
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    }
                    if (message.isDefault != null && message.hasOwnProperty("isDefault"))
                        if (typeof message.isDefault !== "boolean")
                            return "isDefault: boolean expected";
                    if (message.inputJsonSchema != null && message.hasOwnProperty("inputJsonSchema")) {
                        properties._inputJsonSchema = 1;
                        if (!$util.isString(message.inputJsonSchema))
                            return "inputJsonSchema: string expected";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    return null;
                };

                /**
                 * Creates a ProjectTemplate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectTemplate} ProjectTemplate
                 */
                ProjectTemplate.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectTemplate)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectTemplate();
                    if (object.organization != null)
                        message.organization = String(object.organization);
                    if (object.organizationName != null)
                        message.organizationName = String(object.organizationName);
                    if (object.slug != null)
                        message.slug = String(object.slug);
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.components) {
                        if (!Array.isArray(object.components))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectTemplate.components: array expected");
                        message.components = [];
                        for (let i = 0; i < object.components.length; ++i)
                            message.components[i] = String(object.components[i]);
                    }
                    if (object.repository != null) {
                        if (typeof object.repository !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectTemplate.repository: object expected");
                        message.repository = $root.colbylwilliams.teamcloud.v1.RepositoryReference.fromObject(object.repository);
                    }
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.isDefault != null)
                        message.isDefault = Boolean(object.isDefault);
                    if (object.inputJsonSchema != null)
                        message.inputJsonSchema = String(object.inputJsonSchema);
                    if (object.id != null)
                        message.id = String(object.id);
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectTemplate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplate} message ProjectTemplate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectTemplate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.components = [];
                    if (options.defaults) {
                        object.id = "";
                        object.slug = "";
                        object.displayName = "";
                        object.organization = "";
                        object.organizationName = "";
                        object.repository = null;
                        object.isDefault = false;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.name != null && message.hasOwnProperty("name")) {
                        object.name = message.name;
                        if (options.oneofs)
                            object._name = "name";
                    }
                    if (message.slug != null && message.hasOwnProperty("slug"))
                        object.slug = message.slug;
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        object.displayName = message.displayName;
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = message.organization;
                    if (message.description != null && message.hasOwnProperty("description")) {
                        object.description = message.description;
                        if (options.oneofs)
                            object._description = "description";
                    }
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        object.organizationName = message.organizationName;
                    if (message.inputJsonSchema != null && message.hasOwnProperty("inputJsonSchema")) {
                        object.inputJsonSchema = message.inputJsonSchema;
                        if (options.oneofs)
                            object._inputJsonSchema = "inputJsonSchema";
                    }
                    if (message.repository != null && message.hasOwnProperty("repository"))
                        object.repository = $root.colbylwilliams.teamcloud.v1.RepositoryReference.toObject(message.repository, options);
                    if (message.isDefault != null && message.hasOwnProperty("isDefault"))
                        object.isDefault = message.isDefault;
                    if (message.components && message.components.length) {
                        object.components = [];
                        for (let j = 0; j < message.components.length; ++j)
                            object.components[j] = message.components[j];
                    }
                    return object;
                };

                /**
                 * Converts this ProjectTemplate to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectTemplate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProjectTemplate;
            })();

            v1.ProjectTemplateDefinition = (function() {

                /**
                 * Properties of a ProjectTemplateDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectTemplateDefinition
                 * @property {string|null} [displayName] ProjectTemplateDefinition displayName
                 * @property {colbylwilliams.teamcloud.v1.IRepositoryDefinition|null} [repository] ProjectTemplateDefinition repository
                 */

                /**
                 * Constructs a new ProjectTemplateDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectTemplateDefinition.
                 * @implements IProjectTemplateDefinition
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectTemplateDefinition=} [properties] Properties to set
                 */
                function ProjectTemplateDefinition(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectTemplateDefinition displayName.
                 * @member {string} displayName
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDefinition
                 * @instance
                 */
                ProjectTemplateDefinition.prototype.displayName = "";

                /**
                 * ProjectTemplateDefinition repository.
                 * @member {colbylwilliams.teamcloud.v1.IRepositoryDefinition|null|undefined} repository
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDefinition
                 * @instance
                 */
                ProjectTemplateDefinition.prototype.repository = null;

                /**
                 * Verifies a ProjectTemplateDefinition message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDefinition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectTemplateDefinition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        if (!$util.isString(message.displayName))
                            return "displayName: string expected";
                    if (message.repository != null && message.hasOwnProperty("repository")) {
                        let error = $root.colbylwilliams.teamcloud.v1.RepositoryDefinition.verify(message.repository);
                        if (error)
                            return "repository." + error;
                    }
                    return null;
                };

                /**
                 * Creates a ProjectTemplateDefinition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDefinition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectTemplateDefinition} ProjectTemplateDefinition
                 */
                ProjectTemplateDefinition.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectTemplateDefinition)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectTemplateDefinition();
                    if (object.displayName != null)
                        message.displayName = String(object.displayName);
                    if (object.repository != null) {
                        if (typeof object.repository !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectTemplateDefinition.repository: object expected");
                        message.repository = $root.colbylwilliams.teamcloud.v1.RepositoryDefinition.fromObject(object.repository);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectTemplateDefinition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDefinition
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplateDefinition} message ProjectTemplateDefinition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectTemplateDefinition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.displayName = "";
                        object.repository = null;
                    }
                    if (message.displayName != null && message.hasOwnProperty("displayName"))
                        object.displayName = message.displayName;
                    if (message.repository != null && message.hasOwnProperty("repository"))
                        object.repository = $root.colbylwilliams.teamcloud.v1.RepositoryDefinition.toObject(message.repository, options);
                    return object;
                };

                /**
                 * Converts this ProjectTemplateDefinition to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateDefinition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectTemplateDefinition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProjectTemplateDefinition;
            })();

            v1.RepositoryDefinition = (function() {

                /**
                 * Properties of a RepositoryDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IRepositoryDefinition
                 * @property {string|null} [url] RepositoryDefinition url
                 * @property {string|null} [token] RepositoryDefinition token
                 * @property {string|null} [version] RepositoryDefinition version
                 */

                /**
                 * Constructs a new RepositoryDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a RepositoryDefinition.
                 * @implements IRepositoryDefinition
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IRepositoryDefinition=} [properties] Properties to set
                 */
                function RepositoryDefinition(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RepositoryDefinition url.
                 * @member {string} url
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryDefinition
                 * @instance
                 */
                RepositoryDefinition.prototype.url = "";

                /**
                 * RepositoryDefinition token.
                 * @member {string|null|undefined} token
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryDefinition
                 * @instance
                 */
                RepositoryDefinition.prototype.token = null;

                /**
                 * RepositoryDefinition version.
                 * @member {string|null|undefined} version
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryDefinition
                 * @instance
                 */
                RepositoryDefinition.prototype.version = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * RepositoryDefinition _token.
                 * @member {"token"|undefined} _token
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryDefinition
                 * @instance
                 */
                Object.defineProperty(RepositoryDefinition.prototype, "_token", {
                    get: $util.oneOfGetter($oneOfFields = ["token"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * RepositoryDefinition _version.
                 * @member {"version"|undefined} _version
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryDefinition
                 * @instance
                 */
                Object.defineProperty(RepositoryDefinition.prototype, "_version", {
                    get: $util.oneOfGetter($oneOfFields = ["version"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a RepositoryDefinition message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryDefinition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RepositoryDefinition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.url != null && message.hasOwnProperty("url"))
                        if (!$util.isString(message.url))
                            return "url: string expected";
                    if (message.token != null && message.hasOwnProperty("token")) {
                        properties._token = 1;
                        if (!$util.isString(message.token))
                            return "token: string expected";
                    }
                    if (message.version != null && message.hasOwnProperty("version")) {
                        properties._version = 1;
                        if (!$util.isString(message.version))
                            return "version: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a RepositoryDefinition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryDefinition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.RepositoryDefinition} RepositoryDefinition
                 */
                RepositoryDefinition.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.RepositoryDefinition)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.RepositoryDefinition();
                    if (object.url != null)
                        message.url = String(object.url);
                    if (object.token != null)
                        message.token = String(object.token);
                    if (object.version != null)
                        message.version = String(object.version);
                    return message;
                };

                /**
                 * Creates a plain object from a RepositoryDefinition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryDefinition
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.RepositoryDefinition} message RepositoryDefinition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RepositoryDefinition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.url = "";
                    if (message.url != null && message.hasOwnProperty("url"))
                        object.url = message.url;
                    if (message.token != null && message.hasOwnProperty("token")) {
                        object.token = message.token;
                        if (options.oneofs)
                            object._token = "token";
                    }
                    if (message.version != null && message.hasOwnProperty("version")) {
                        object.version = message.version;
                        if (options.oneofs)
                            object._version = "version";
                    }
                    return object;
                };

                /**
                 * Converts this RepositoryDefinition to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.RepositoryDefinition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RepositoryDefinition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RepositoryDefinition;
            })();

            v1.ProjectTemplateListDataResult = (function() {

                /**
                 * Properties of a ProjectTemplateListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IProjectTemplateListDataResult
                 * @property {number|null} [code] ProjectTemplateListDataResult code
                 * @property {string|null} [status] ProjectTemplateListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.IProjectTemplate>|null} [data] ProjectTemplateListDataResult data
                 * @property {string|null} [location] ProjectTemplateListDataResult location
                 */

                /**
                 * Constructs a new ProjectTemplateListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectTemplateListDataResult.
                 * @implements IProjectTemplateListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IProjectTemplateListDataResult=} [properties] Properties to set
                 */
                function ProjectTemplateListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProjectTemplateListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult
                 * @instance
                 */
                ProjectTemplateListDataResult.prototype.code = 0;

                /**
                 * ProjectTemplateListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult
                 * @instance
                 */
                ProjectTemplateListDataResult.prototype.status = null;

                /**
                 * ProjectTemplateListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IProjectTemplate>} data
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult
                 * @instance
                 */
                ProjectTemplateListDataResult.prototype.data = $util.emptyArray;

                /**
                 * ProjectTemplateListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult
                 * @instance
                 */
                ProjectTemplateListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ProjectTemplateListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectTemplateListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ProjectTemplateListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult
                 * @instance
                 */
                Object.defineProperty(ProjectTemplateListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ProjectTemplateListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectTemplateListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.ProjectTemplate.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ProjectTemplateListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult} ProjectTemplateListDataResult
                 */
                ProjectTemplateListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.ProjectTemplate.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ProjectTemplateListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult} message ProjectTemplateListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectTemplateListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.ProjectTemplate.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ProjectTemplateListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectTemplateListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProjectTemplateListDataResult;
            })();

            v1.ProjectTemplatesAPI = (function() {

                /**
                 * Constructs a new ProjectTemplatesAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectTemplatesAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ProjectTemplatesAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (ProjectTemplatesAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ProjectTemplatesAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectTemplatesAPI#createProjectTemplate}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @typedef CreateProjectTemplateCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplateDataResult} [response] ProjectTemplateDataResult
                 */

                /**
                 * Calls CreateProjectTemplate.
                 * @function createProjectTemplate
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectTemplateRequest} request CreateProjectTemplateRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplatesAPI.CreateProjectTemplateCallback} callback Node-style callback called with the error, if any, and ProjectTemplateDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectTemplatesAPI.prototype.createProjectTemplate = function createProjectTemplate(request, callback) {
                    return this.rpcCall(createProjectTemplate, $root.colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest, $root.colbylwilliams.teamcloud.v1.ProjectTemplateDataResult, request, callback);
                }, "name", { value: "CreateProjectTemplate" });

                /**
                 * Calls CreateProjectTemplate.
                 * @function createProjectTemplate
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectTemplateRequest} request CreateProjectTemplateRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectTemplateDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectTemplatesAPI#deleteProjectTemplate}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @typedef DeleteProjectTemplateCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplateDataResult} [response] ProjectTemplateDataResult
                 */

                /**
                 * Calls DeleteProjectTemplate.
                 * @function deleteProjectTemplate
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectTemplateRequest} request DeleteProjectTemplateRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplatesAPI.DeleteProjectTemplateCallback} callback Node-style callback called with the error, if any, and ProjectTemplateDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectTemplatesAPI.prototype.deleteProjectTemplate = function deleteProjectTemplate(request, callback) {
                    return this.rpcCall(deleteProjectTemplate, $root.colbylwilliams.teamcloud.v1.DeleteProjectTemplateRequest, $root.colbylwilliams.teamcloud.v1.ProjectTemplateDataResult, request, callback);
                }, "name", { value: "DeleteProjectTemplate" });

                /**
                 * Calls DeleteProjectTemplate.
                 * @function deleteProjectTemplate
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectTemplateRequest} request DeleteProjectTemplateRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectTemplateDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectTemplatesAPI#getProjectTemplate}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @typedef GetProjectTemplateCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplateDataResult} [response] ProjectTemplateDataResult
                 */

                /**
                 * Calls GetProjectTemplate.
                 * @function getProjectTemplate
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTemplateRequest} request GetProjectTemplateRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplatesAPI.GetProjectTemplateCallback} callback Node-style callback called with the error, if any, and ProjectTemplateDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectTemplatesAPI.prototype.getProjectTemplate = function getProjectTemplate(request, callback) {
                    return this.rpcCall(getProjectTemplate, $root.colbylwilliams.teamcloud.v1.GetProjectTemplateRequest, $root.colbylwilliams.teamcloud.v1.ProjectTemplateDataResult, request, callback);
                }, "name", { value: "GetProjectTemplate" });

                /**
                 * Calls GetProjectTemplate.
                 * @function getProjectTemplate
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTemplateRequest} request GetProjectTemplateRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectTemplateDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectTemplatesAPI#getProjectTemplates}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @typedef GetProjectTemplatesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult} [response] ProjectTemplateListDataResult
                 */

                /**
                 * Calls GetProjectTemplates.
                 * @function getProjectTemplates
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTemplatesRequest} request GetProjectTemplatesRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplatesAPI.GetProjectTemplatesCallback} callback Node-style callback called with the error, if any, and ProjectTemplateListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectTemplatesAPI.prototype.getProjectTemplates = function getProjectTemplates(request, callback) {
                    return this.rpcCall(getProjectTemplates, $root.colbylwilliams.teamcloud.v1.GetProjectTemplatesRequest, $root.colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult, request, callback);
                }, "name", { value: "GetProjectTemplates" });

                /**
                 * Calls GetProjectTemplates.
                 * @function getProjectTemplates
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTemplatesRequest} request GetProjectTemplatesRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectTemplateListDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectTemplatesAPI#updateProjectTemplate}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @typedef UpdateProjectTemplateCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplateDataResult} [response] ProjectTemplateDataResult
                 */

                /**
                 * Calls UpdateProjectTemplate.
                 * @function updateProjectTemplate
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectTemplateRequest} request UpdateProjectTemplateRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectTemplatesAPI.UpdateProjectTemplateCallback} callback Node-style callback called with the error, if any, and ProjectTemplateDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectTemplatesAPI.prototype.updateProjectTemplate = function updateProjectTemplate(request, callback) {
                    return this.rpcCall(updateProjectTemplate, $root.colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest, $root.colbylwilliams.teamcloud.v1.ProjectTemplateDataResult, request, callback);
                }, "name", { value: "UpdateProjectTemplate" });

                /**
                 * Calls UpdateProjectTemplate.
                 * @function updateProjectTemplate
                 * @memberof colbylwilliams.teamcloud.v1.ProjectTemplatesAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectTemplateRequest} request UpdateProjectTemplateRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectTemplateDataResult>} Promise
                 * @variation 2
                 */

                return ProjectTemplatesAPI;
            })();

            v1.CreateProjectTemplateRequest = (function() {

                /**
                 * Properties of a CreateProjectTemplateRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICreateProjectTemplateRequest
                 * @property {string|null} [organizationId] CreateProjectTemplateRequest organizationId
                 * @property {colbylwilliams.teamcloud.v1.IProjectTemplateDefinition|null} [projectTemplateDefinition] CreateProjectTemplateRequest projectTemplateDefinition
                 */

                /**
                 * Constructs a new CreateProjectTemplateRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CreateProjectTemplateRequest.
                 * @implements ICreateProjectTemplateRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectTemplateRequest=} [properties] Properties to set
                 */
                function CreateProjectTemplateRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateProjectTemplateRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest
                 * @instance
                 */
                CreateProjectTemplateRequest.prototype.organizationId = "";

                /**
                 * CreateProjectTemplateRequest projectTemplateDefinition.
                 * @member {colbylwilliams.teamcloud.v1.IProjectTemplateDefinition|null|undefined} projectTemplateDefinition
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest
                 * @instance
                 */
                CreateProjectTemplateRequest.prototype.projectTemplateDefinition = null;

                /**
                 * Verifies a CreateProjectTemplateRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateProjectTemplateRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectTemplateDefinition != null && message.hasOwnProperty("projectTemplateDefinition")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ProjectTemplateDefinition.verify(message.projectTemplateDefinition);
                        if (error)
                            return "projectTemplateDefinition." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CreateProjectTemplateRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest} CreateProjectTemplateRequest
                 */
                CreateProjectTemplateRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectTemplateDefinition != null) {
                        if (typeof object.projectTemplateDefinition !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest.projectTemplateDefinition: object expected");
                        message.projectTemplateDefinition = $root.colbylwilliams.teamcloud.v1.ProjectTemplateDefinition.fromObject(object.projectTemplateDefinition);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CreateProjectTemplateRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest} message CreateProjectTemplateRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateProjectTemplateRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectTemplateDefinition = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectTemplateDefinition != null && message.hasOwnProperty("projectTemplateDefinition"))
                        object.projectTemplateDefinition = $root.colbylwilliams.teamcloud.v1.ProjectTemplateDefinition.toObject(message.projectTemplateDefinition, options);
                    return object;
                };

                /**
                 * Converts this CreateProjectTemplateRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectTemplateRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateProjectTemplateRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CreateProjectTemplateRequest;
            })();

            v1.DeleteProjectTemplateRequest = (function() {

                /**
                 * Properties of a DeleteProjectTemplateRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeleteProjectTemplateRequest
                 * @property {string|null} [projectTemplateId] DeleteProjectTemplateRequest projectTemplateId
                 * @property {string|null} [organizationId] DeleteProjectTemplateRequest organizationId
                 */

                /**
                 * Constructs a new DeleteProjectTemplateRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeleteProjectTemplateRequest.
                 * @implements IDeleteProjectTemplateRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectTemplateRequest=} [properties] Properties to set
                 */
                function DeleteProjectTemplateRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteProjectTemplateRequest projectTemplateId.
                 * @member {string} projectTemplateId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTemplateRequest
                 * @instance
                 */
                DeleteProjectTemplateRequest.prototype.projectTemplateId = "";

                /**
                 * DeleteProjectTemplateRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTemplateRequest
                 * @instance
                 */
                DeleteProjectTemplateRequest.prototype.organizationId = "";

                /**
                 * Verifies a DeleteProjectTemplateRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTemplateRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteProjectTemplateRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.projectTemplateId != null && message.hasOwnProperty("projectTemplateId"))
                        if (!$util.isString(message.projectTemplateId))
                            return "projectTemplateId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a DeleteProjectTemplateRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTemplateRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeleteProjectTemplateRequest} DeleteProjectTemplateRequest
                 */
                DeleteProjectTemplateRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeleteProjectTemplateRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeleteProjectTemplateRequest();
                    if (object.projectTemplateId != null)
                        message.projectTemplateId = String(object.projectTemplateId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a DeleteProjectTemplateRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTemplateRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeleteProjectTemplateRequest} message DeleteProjectTemplateRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteProjectTemplateRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.projectTemplateId = "";
                        object.organizationId = "";
                    }
                    if (message.projectTemplateId != null && message.hasOwnProperty("projectTemplateId"))
                        object.projectTemplateId = message.projectTemplateId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this DeleteProjectTemplateRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectTemplateRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteProjectTemplateRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeleteProjectTemplateRequest;
            })();

            v1.GetProjectTemplateRequest = (function() {

                /**
                 * Properties of a GetProjectTemplateRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectTemplateRequest
                 * @property {string|null} [projectTemplateId] GetProjectTemplateRequest projectTemplateId
                 * @property {string|null} [organizationId] GetProjectTemplateRequest organizationId
                 */

                /**
                 * Constructs a new GetProjectTemplateRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectTemplateRequest.
                 * @implements IGetProjectTemplateRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTemplateRequest=} [properties] Properties to set
                 */
                function GetProjectTemplateRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectTemplateRequest projectTemplateId.
                 * @member {string} projectTemplateId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTemplateRequest
                 * @instance
                 */
                GetProjectTemplateRequest.prototype.projectTemplateId = "";

                /**
                 * GetProjectTemplateRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTemplateRequest
                 * @instance
                 */
                GetProjectTemplateRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetProjectTemplateRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTemplateRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectTemplateRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.projectTemplateId != null && message.hasOwnProperty("projectTemplateId"))
                        if (!$util.isString(message.projectTemplateId))
                            return "projectTemplateId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectTemplateRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTemplateRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectTemplateRequest} GetProjectTemplateRequest
                 */
                GetProjectTemplateRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectTemplateRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectTemplateRequest();
                    if (object.projectTemplateId != null)
                        message.projectTemplateId = String(object.projectTemplateId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectTemplateRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTemplateRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectTemplateRequest} message GetProjectTemplateRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectTemplateRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.projectTemplateId = "";
                        object.organizationId = "";
                    }
                    if (message.projectTemplateId != null && message.hasOwnProperty("projectTemplateId"))
                        object.projectTemplateId = message.projectTemplateId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetProjectTemplateRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTemplateRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectTemplateRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectTemplateRequest;
            })();

            v1.GetProjectTemplatesRequest = (function() {

                /**
                 * Properties of a GetProjectTemplatesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectTemplatesRequest
                 * @property {string|null} [organizationId] GetProjectTemplatesRequest organizationId
                 */

                /**
                 * Constructs a new GetProjectTemplatesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectTemplatesRequest.
                 * @implements IGetProjectTemplatesRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectTemplatesRequest=} [properties] Properties to set
                 */
                function GetProjectTemplatesRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectTemplatesRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTemplatesRequest
                 * @instance
                 */
                GetProjectTemplatesRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetProjectTemplatesRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTemplatesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectTemplatesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectTemplatesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTemplatesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectTemplatesRequest} GetProjectTemplatesRequest
                 */
                GetProjectTemplatesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectTemplatesRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectTemplatesRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectTemplatesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTemplatesRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectTemplatesRequest} message GetProjectTemplatesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectTemplatesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.organizationId = "";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetProjectTemplatesRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectTemplatesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectTemplatesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectTemplatesRequest;
            })();

            v1.UpdateProjectTemplateRequest = (function() {

                /**
                 * Properties of an UpdateProjectTemplateRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUpdateProjectTemplateRequest
                 * @property {string|null} [projectTemplateId] UpdateProjectTemplateRequest projectTemplateId
                 * @property {string|null} [organizationId] UpdateProjectTemplateRequest organizationId
                 * @property {colbylwilliams.teamcloud.v1.IProjectTemplate|null} [projectTemplate] UpdateProjectTemplateRequest projectTemplate
                 */

                /**
                 * Constructs a new UpdateProjectTemplateRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an UpdateProjectTemplateRequest.
                 * @implements IUpdateProjectTemplateRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectTemplateRequest=} [properties] Properties to set
                 */
                function UpdateProjectTemplateRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateProjectTemplateRequest projectTemplateId.
                 * @member {string} projectTemplateId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest
                 * @instance
                 */
                UpdateProjectTemplateRequest.prototype.projectTemplateId = "";

                /**
                 * UpdateProjectTemplateRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest
                 * @instance
                 */
                UpdateProjectTemplateRequest.prototype.organizationId = "";

                /**
                 * UpdateProjectTemplateRequest projectTemplate.
                 * @member {colbylwilliams.teamcloud.v1.IProjectTemplate|null|undefined} projectTemplate
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest
                 * @instance
                 */
                UpdateProjectTemplateRequest.prototype.projectTemplate = null;

                /**
                 * Verifies an UpdateProjectTemplateRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateProjectTemplateRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.projectTemplateId != null && message.hasOwnProperty("projectTemplateId"))
                        if (!$util.isString(message.projectTemplateId))
                            return "projectTemplateId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectTemplate != null && message.hasOwnProperty("projectTemplate")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ProjectTemplate.verify(message.projectTemplate);
                        if (error)
                            return "projectTemplate." + error;
                    }
                    return null;
                };

                /**
                 * Creates an UpdateProjectTemplateRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest} UpdateProjectTemplateRequest
                 */
                UpdateProjectTemplateRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest();
                    if (object.projectTemplateId != null)
                        message.projectTemplateId = String(object.projectTemplateId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectTemplate != null) {
                        if (typeof object.projectTemplate !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest.projectTemplate: object expected");
                        message.projectTemplate = $root.colbylwilliams.teamcloud.v1.ProjectTemplate.fromObject(object.projectTemplate);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an UpdateProjectTemplateRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest} message UpdateProjectTemplateRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateProjectTemplateRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.projectTemplateId = "";
                        object.organizationId = "";
                        object.projectTemplate = null;
                    }
                    if (message.projectTemplateId != null && message.hasOwnProperty("projectTemplateId"))
                        object.projectTemplateId = message.projectTemplateId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectTemplate != null && message.hasOwnProperty("projectTemplate"))
                        object.projectTemplate = $root.colbylwilliams.teamcloud.v1.ProjectTemplate.toObject(message.projectTemplate, options);
                    return object;
                };

                /**
                 * Converts this UpdateProjectTemplateRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectTemplateRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateProjectTemplateRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UpdateProjectTemplateRequest;
            })();

            v1.ProjectUsersAPI = (function() {

                /**
                 * Constructs a new ProjectUsersAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ProjectUsersAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ProjectUsersAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (ProjectUsersAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ProjectUsersAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectUsersAPI#createProjectUser}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @typedef CreateProjectUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserDataResult} [response] UserDataResult
                 */

                /**
                 * Calls CreateProjectUser.
                 * @function createProjectUser
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectUserRequest} request CreateProjectUserRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectUsersAPI.CreateProjectUserCallback} callback Node-style callback called with the error, if any, and UserDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectUsersAPI.prototype.createProjectUser = function createProjectUser(request, callback) {
                    return this.rpcCall(createProjectUser, $root.colbylwilliams.teamcloud.v1.CreateProjectUserRequest, $root.colbylwilliams.teamcloud.v1.UserDataResult, request, callback);
                }, "name", { value: "CreateProjectUser" });

                /**
                 * Calls CreateProjectUser.
                 * @function createProjectUser
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectUserRequest} request CreateProjectUserRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectUsersAPI#deleteProjectUser}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @typedef DeleteProjectUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} [response] StatusResult
                 */

                /**
                 * Calls DeleteProjectUser.
                 * @function deleteProjectUser
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectUserRequest} request DeleteProjectUserRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectUsersAPI.DeleteProjectUserCallback} callback Node-style callback called with the error, if any, and StatusResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectUsersAPI.prototype.deleteProjectUser = function deleteProjectUser(request, callback) {
                    return this.rpcCall(deleteProjectUser, $root.colbylwilliams.teamcloud.v1.DeleteProjectUserRequest, $root.colbylwilliams.teamcloud.v1.StatusResult, request, callback);
                }, "name", { value: "DeleteProjectUser" });

                /**
                 * Calls DeleteProjectUser.
                 * @function deleteProjectUser
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectUserRequest} request DeleteProjectUserRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StatusResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectUsersAPI#getProjectUser}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @typedef GetProjectUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserDataResult} [response] UserDataResult
                 */

                /**
                 * Calls GetProjectUser.
                 * @function getProjectUser
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectUserRequest} request GetProjectUserRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectUsersAPI.GetProjectUserCallback} callback Node-style callback called with the error, if any, and UserDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectUsersAPI.prototype.getProjectUser = function getProjectUser(request, callback) {
                    return this.rpcCall(getProjectUser, $root.colbylwilliams.teamcloud.v1.GetProjectUserRequest, $root.colbylwilliams.teamcloud.v1.UserDataResult, request, callback);
                }, "name", { value: "GetProjectUser" });

                /**
                 * Calls GetProjectUser.
                 * @function getProjectUser
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectUserRequest} request GetProjectUserRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectUsersAPI#getProjectUserMe}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @typedef GetProjectUserMeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserDataResult} [response] UserDataResult
                 */

                /**
                 * Calls GetProjectUserMe.
                 * @function getProjectUserMe
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectUserMeRequest} request GetProjectUserMeRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectUsersAPI.GetProjectUserMeCallback} callback Node-style callback called with the error, if any, and UserDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectUsersAPI.prototype.getProjectUserMe = function getProjectUserMe(request, callback) {
                    return this.rpcCall(getProjectUserMe, $root.colbylwilliams.teamcloud.v1.GetProjectUserMeRequest, $root.colbylwilliams.teamcloud.v1.UserDataResult, request, callback);
                }, "name", { value: "GetProjectUserMe" });

                /**
                 * Calls GetProjectUserMe.
                 * @function getProjectUserMe
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectUserMeRequest} request GetProjectUserMeRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectUsersAPI#getProjectUsers}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @typedef GetProjectUsersCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserListDataResult} [response] UserListDataResult
                 */

                /**
                 * Calls GetProjectUsers.
                 * @function getProjectUsers
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectUsersRequest} request GetProjectUsersRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectUsersAPI.GetProjectUsersCallback} callback Node-style callback called with the error, if any, and UserListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectUsersAPI.prototype.getProjectUsers = function getProjectUsers(request, callback) {
                    return this.rpcCall(getProjectUsers, $root.colbylwilliams.teamcloud.v1.GetProjectUsersRequest, $root.colbylwilliams.teamcloud.v1.UserListDataResult, request, callback);
                }, "name", { value: "GetProjectUsers" });

                /**
                 * Calls GetProjectUsers.
                 * @function getProjectUsers
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectUsersRequest} request GetProjectUsersRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserListDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectUsersAPI#updateProjectUser}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @typedef UpdateProjectUserCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserDataResult} [response] UserDataResult
                 */

                /**
                 * Calls UpdateProjectUser.
                 * @function updateProjectUser
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectUserRequest} request UpdateProjectUserRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectUsersAPI.UpdateProjectUserCallback} callback Node-style callback called with the error, if any, and UserDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectUsersAPI.prototype.updateProjectUser = function updateProjectUser(request, callback) {
                    return this.rpcCall(updateProjectUser, $root.colbylwilliams.teamcloud.v1.UpdateProjectUserRequest, $root.colbylwilliams.teamcloud.v1.UserDataResult, request, callback);
                }, "name", { value: "UpdateProjectUser" });

                /**
                 * Calls UpdateProjectUser.
                 * @function updateProjectUser
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectUserRequest} request UpdateProjectUserRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ProjectUsersAPI#updateProjectUserMe}.
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @typedef UpdateProjectUserMeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.UserDataResult} [response] UserDataResult
                 */

                /**
                 * Calls UpdateProjectUserMe.
                 * @function updateProjectUserMe
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectUserMeRequest} request UpdateProjectUserMeRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ProjectUsersAPI.UpdateProjectUserMeCallback} callback Node-style callback called with the error, if any, and UserDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProjectUsersAPI.prototype.updateProjectUserMe = function updateProjectUserMe(request, callback) {
                    return this.rpcCall(updateProjectUserMe, $root.colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest, $root.colbylwilliams.teamcloud.v1.UserDataResult, request, callback);
                }, "name", { value: "UpdateProjectUserMe" });

                /**
                 * Calls UpdateProjectUserMe.
                 * @function updateProjectUserMe
                 * @memberof colbylwilliams.teamcloud.v1.ProjectUsersAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectUserMeRequest} request UpdateProjectUserMeRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.UserDataResult>} Promise
                 * @variation 2
                 */

                return ProjectUsersAPI;
            })();

            v1.CreateProjectUserRequest = (function() {

                /**
                 * Properties of a CreateProjectUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICreateProjectUserRequest
                 * @property {string|null} [organizationId] CreateProjectUserRequest organizationId
                 * @property {string|null} [projectId] CreateProjectUserRequest projectId
                 * @property {colbylwilliams.teamcloud.v1.IUserDefinition|null} [userDefinition] CreateProjectUserRequest userDefinition
                 */

                /**
                 * Constructs a new CreateProjectUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CreateProjectUserRequest.
                 * @implements ICreateProjectUserRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICreateProjectUserRequest=} [properties] Properties to set
                 */
                function CreateProjectUserRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateProjectUserRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectUserRequest
                 * @instance
                 */
                CreateProjectUserRequest.prototype.organizationId = "";

                /**
                 * CreateProjectUserRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectUserRequest
                 * @instance
                 */
                CreateProjectUserRequest.prototype.projectId = "";

                /**
                 * CreateProjectUserRequest userDefinition.
                 * @member {colbylwilliams.teamcloud.v1.IUserDefinition|null|undefined} userDefinition
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectUserRequest
                 * @instance
                 */
                CreateProjectUserRequest.prototype.userDefinition = null;

                /**
                 * Verifies a CreateProjectUserRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectUserRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateProjectUserRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.userDefinition != null && message.hasOwnProperty("userDefinition")) {
                        let error = $root.colbylwilliams.teamcloud.v1.UserDefinition.verify(message.userDefinition);
                        if (error)
                            return "userDefinition." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CreateProjectUserRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectUserRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CreateProjectUserRequest} CreateProjectUserRequest
                 */
                CreateProjectUserRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CreateProjectUserRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CreateProjectUserRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.userDefinition != null) {
                        if (typeof object.userDefinition !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.CreateProjectUserRequest.userDefinition: object expected");
                        message.userDefinition = $root.colbylwilliams.teamcloud.v1.UserDefinition.fromObject(object.userDefinition);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CreateProjectUserRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectUserRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CreateProjectUserRequest} message CreateProjectUserRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateProjectUserRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                        object.userDefinition = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.userDefinition != null && message.hasOwnProperty("userDefinition"))
                        object.userDefinition = $root.colbylwilliams.teamcloud.v1.UserDefinition.toObject(message.userDefinition, options);
                    return object;
                };

                /**
                 * Converts this CreateProjectUserRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CreateProjectUserRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateProjectUserRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CreateProjectUserRequest;
            })();

            v1.DeleteProjectUserRequest = (function() {

                /**
                 * Properties of a DeleteProjectUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IDeleteProjectUserRequest
                 * @property {string|null} [userId] DeleteProjectUserRequest userId
                 * @property {string|null} [organizationId] DeleteProjectUserRequest organizationId
                 * @property {string|null} [projectId] DeleteProjectUserRequest projectId
                 */

                /**
                 * Constructs a new DeleteProjectUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a DeleteProjectUserRequest.
                 * @implements IDeleteProjectUserRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IDeleteProjectUserRequest=} [properties] Properties to set
                 */
                function DeleteProjectUserRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteProjectUserRequest userId.
                 * @member {string} userId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectUserRequest
                 * @instance
                 */
                DeleteProjectUserRequest.prototype.userId = "";

                /**
                 * DeleteProjectUserRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectUserRequest
                 * @instance
                 */
                DeleteProjectUserRequest.prototype.organizationId = "";

                /**
                 * DeleteProjectUserRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectUserRequest
                 * @instance
                 */
                DeleteProjectUserRequest.prototype.projectId = "";

                /**
                 * Verifies a DeleteProjectUserRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectUserRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteProjectUserRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        if (!$util.isString(message.userId))
                            return "userId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a DeleteProjectUserRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectUserRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.DeleteProjectUserRequest} DeleteProjectUserRequest
                 */
                DeleteProjectUserRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.DeleteProjectUserRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.DeleteProjectUserRequest();
                    if (object.userId != null)
                        message.userId = String(object.userId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a DeleteProjectUserRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectUserRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.DeleteProjectUserRequest} message DeleteProjectUserRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteProjectUserRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.userId = "";
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        object.userId = message.userId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this DeleteProjectUserRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.DeleteProjectUserRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteProjectUserRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeleteProjectUserRequest;
            })();

            v1.GetProjectUserRequest = (function() {

                /**
                 * Properties of a GetProjectUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectUserRequest
                 * @property {string|null} [userId] GetProjectUserRequest userId
                 * @property {string|null} [organizationId] GetProjectUserRequest organizationId
                 * @property {string|null} [projectId] GetProjectUserRequest projectId
                 */

                /**
                 * Constructs a new GetProjectUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectUserRequest.
                 * @implements IGetProjectUserRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectUserRequest=} [properties] Properties to set
                 */
                function GetProjectUserRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectUserRequest userId.
                 * @member {string} userId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserRequest
                 * @instance
                 */
                GetProjectUserRequest.prototype.userId = "";

                /**
                 * GetProjectUserRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserRequest
                 * @instance
                 */
                GetProjectUserRequest.prototype.organizationId = "";

                /**
                 * GetProjectUserRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserRequest
                 * @instance
                 */
                GetProjectUserRequest.prototype.projectId = "";

                /**
                 * Verifies a GetProjectUserRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectUserRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        if (!$util.isString(message.userId))
                            return "userId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectUserRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectUserRequest} GetProjectUserRequest
                 */
                GetProjectUserRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectUserRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectUserRequest();
                    if (object.userId != null)
                        message.userId = String(object.userId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectUserRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectUserRequest} message GetProjectUserRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectUserRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.userId = "";
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        object.userId = message.userId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetProjectUserRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectUserRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectUserRequest;
            })();

            v1.GetProjectUserMeRequest = (function() {

                /**
                 * Properties of a GetProjectUserMeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectUserMeRequest
                 * @property {string|null} [organizationId] GetProjectUserMeRequest organizationId
                 * @property {string|null} [projectId] GetProjectUserMeRequest projectId
                 */

                /**
                 * Constructs a new GetProjectUserMeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectUserMeRequest.
                 * @implements IGetProjectUserMeRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectUserMeRequest=} [properties] Properties to set
                 */
                function GetProjectUserMeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectUserMeRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserMeRequest
                 * @instance
                 */
                GetProjectUserMeRequest.prototype.organizationId = "";

                /**
                 * GetProjectUserMeRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserMeRequest
                 * @instance
                 */
                GetProjectUserMeRequest.prototype.projectId = "";

                /**
                 * Verifies a GetProjectUserMeRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserMeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectUserMeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectUserMeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserMeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectUserMeRequest} GetProjectUserMeRequest
                 */
                GetProjectUserMeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectUserMeRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectUserMeRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectUserMeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserMeRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectUserMeRequest} message GetProjectUserMeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectUserMeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetProjectUserMeRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUserMeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectUserMeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectUserMeRequest;
            })();

            v1.GetProjectUsersRequest = (function() {

                /**
                 * Properties of a GetProjectUsersRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectUsersRequest
                 * @property {string|null} [organizationId] GetProjectUsersRequest organizationId
                 * @property {string|null} [projectId] GetProjectUsersRequest projectId
                 */

                /**
                 * Constructs a new GetProjectUsersRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectUsersRequest.
                 * @implements IGetProjectUsersRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectUsersRequest=} [properties] Properties to set
                 */
                function GetProjectUsersRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectUsersRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUsersRequest
                 * @instance
                 */
                GetProjectUsersRequest.prototype.organizationId = "";

                /**
                 * GetProjectUsersRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUsersRequest
                 * @instance
                 */
                GetProjectUsersRequest.prototype.projectId = "";

                /**
                 * Verifies a GetProjectUsersRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUsersRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectUsersRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectUsersRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUsersRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectUsersRequest} GetProjectUsersRequest
                 */
                GetProjectUsersRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectUsersRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectUsersRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectUsersRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUsersRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectUsersRequest} message GetProjectUsersRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectUsersRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetProjectUsersRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectUsersRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectUsersRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectUsersRequest;
            })();

            v1.UpdateProjectUserRequest = (function() {

                /**
                 * Properties of an UpdateProjectUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUpdateProjectUserRequest
                 * @property {string|null} [userId] UpdateProjectUserRequest userId
                 * @property {string|null} [organizationId] UpdateProjectUserRequest organizationId
                 * @property {string|null} [projectId] UpdateProjectUserRequest projectId
                 * @property {colbylwilliams.teamcloud.v1.IUser|null} [user] UpdateProjectUserRequest user
                 */

                /**
                 * Constructs a new UpdateProjectUserRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an UpdateProjectUserRequest.
                 * @implements IUpdateProjectUserRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectUserRequest=} [properties] Properties to set
                 */
                function UpdateProjectUserRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateProjectUserRequest userId.
                 * @member {string} userId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserRequest
                 * @instance
                 */
                UpdateProjectUserRequest.prototype.userId = "";

                /**
                 * UpdateProjectUserRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserRequest
                 * @instance
                 */
                UpdateProjectUserRequest.prototype.organizationId = "";

                /**
                 * UpdateProjectUserRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserRequest
                 * @instance
                 */
                UpdateProjectUserRequest.prototype.projectId = "";

                /**
                 * UpdateProjectUserRequest user.
                 * @member {colbylwilliams.teamcloud.v1.IUser|null|undefined} user
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserRequest
                 * @instance
                 */
                UpdateProjectUserRequest.prototype.user = null;

                /**
                 * Verifies an UpdateProjectUserRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateProjectUserRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        if (!$util.isString(message.userId))
                            return "userId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.user != null && message.hasOwnProperty("user")) {
                        let error = $root.colbylwilliams.teamcloud.v1.User.verify(message.user);
                        if (error)
                            return "user." + error;
                    }
                    return null;
                };

                /**
                 * Creates an UpdateProjectUserRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UpdateProjectUserRequest} UpdateProjectUserRequest
                 */
                UpdateProjectUserRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UpdateProjectUserRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UpdateProjectUserRequest();
                    if (object.userId != null)
                        message.userId = String(object.userId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.user != null) {
                        if (typeof object.user !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UpdateProjectUserRequest.user: object expected");
                        message.user = $root.colbylwilliams.teamcloud.v1.User.fromObject(object.user);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an UpdateProjectUserRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UpdateProjectUserRequest} message UpdateProjectUserRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateProjectUserRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.userId = "";
                        object.organizationId = "";
                        object.projectId = "";
                        object.user = null;
                    }
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        object.userId = message.userId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.user != null && message.hasOwnProperty("user"))
                        object.user = $root.colbylwilliams.teamcloud.v1.User.toObject(message.user, options);
                    return object;
                };

                /**
                 * Converts this UpdateProjectUserRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateProjectUserRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UpdateProjectUserRequest;
            })();

            v1.UpdateProjectUserMeRequest = (function() {

                /**
                 * Properties of an UpdateProjectUserMeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUpdateProjectUserMeRequest
                 * @property {string|null} [organizationId] UpdateProjectUserMeRequest organizationId
                 * @property {string|null} [projectId] UpdateProjectUserMeRequest projectId
                 * @property {colbylwilliams.teamcloud.v1.IUser|null} [user] UpdateProjectUserMeRequest user
                 */

                /**
                 * Constructs a new UpdateProjectUserMeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an UpdateProjectUserMeRequest.
                 * @implements IUpdateProjectUserMeRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUpdateProjectUserMeRequest=} [properties] Properties to set
                 */
                function UpdateProjectUserMeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateProjectUserMeRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest
                 * @instance
                 */
                UpdateProjectUserMeRequest.prototype.organizationId = "";

                /**
                 * UpdateProjectUserMeRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest
                 * @instance
                 */
                UpdateProjectUserMeRequest.prototype.projectId = "";

                /**
                 * UpdateProjectUserMeRequest user.
                 * @member {colbylwilliams.teamcloud.v1.IUser|null|undefined} user
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest
                 * @instance
                 */
                UpdateProjectUserMeRequest.prototype.user = null;

                /**
                 * Verifies an UpdateProjectUserMeRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateProjectUserMeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.user != null && message.hasOwnProperty("user")) {
                        let error = $root.colbylwilliams.teamcloud.v1.User.verify(message.user);
                        if (error)
                            return "user." + error;
                    }
                    return null;
                };

                /**
                 * Creates an UpdateProjectUserMeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest} UpdateProjectUserMeRequest
                 */
                UpdateProjectUserMeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.user != null) {
                        if (typeof object.user !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest.user: object expected");
                        message.user = $root.colbylwilliams.teamcloud.v1.User.fromObject(object.user);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an UpdateProjectUserMeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest} message UpdateProjectUserMeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateProjectUserMeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                        object.user = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.user != null && message.hasOwnProperty("user"))
                        object.user = $root.colbylwilliams.teamcloud.v1.User.toObject(message.user, options);
                    return object;
                };

                /**
                 * Converts this UpdateProjectUserMeRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UpdateProjectUserMeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateProjectUserMeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UpdateProjectUserMeRequest;
            })();

            v1.RootAPI = (function() {

                /**
                 * Constructs a new RootAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a RootAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function RootAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (RootAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = RootAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.RootAPI#getInfo}.
                 * @memberof colbylwilliams.teamcloud.v1.RootAPI
                 * @typedef GetInfoCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult} [response] TeamCloudInformationDataResult
                 */

                /**
                 * Calls GetInfo.
                 * @function getInfo
                 * @memberof colbylwilliams.teamcloud.v1.RootAPI
                 * @instance
                 * @param {google.protobuf.IEmpty} request Empty message or plain object
                 * @param {colbylwilliams.teamcloud.v1.RootAPI.GetInfoCallback} callback Node-style callback called with the error, if any, and TeamCloudInformationDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RootAPI.prototype.getInfo = function getInfo(request, callback) {
                    return this.rpcCall(getInfo, $root.google.protobuf.Empty, $root.colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult, request, callback);
                }, "name", { value: "GetInfo" });

                /**
                 * Calls GetInfo.
                 * @function getInfo
                 * @memberof colbylwilliams.teamcloud.v1.RootAPI
                 * @instance
                 * @param {google.protobuf.IEmpty} request Empty message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult>} Promise
                 * @variation 2
                 */

                return RootAPI;
            })();

            v1.TeamCloudInformationDataResult = (function() {

                /**
                 * Properties of a TeamCloudInformationDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ITeamCloudInformationDataResult
                 * @property {number|null} [code] TeamCloudInformationDataResult code
                 * @property {string|null} [status] TeamCloudInformationDataResult status
                 * @property {colbylwilliams.teamcloud.v1.ITeamCloudInformation|null} [data] TeamCloudInformationDataResult data
                 * @property {string|null} [location] TeamCloudInformationDataResult location
                 */

                /**
                 * Constructs a new TeamCloudInformationDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a TeamCloudInformationDataResult.
                 * @implements ITeamCloudInformationDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ITeamCloudInformationDataResult=} [properties] Properties to set
                 */
                function TeamCloudInformationDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TeamCloudInformationDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult
                 * @instance
                 */
                TeamCloudInformationDataResult.prototype.code = 0;

                /**
                 * TeamCloudInformationDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult
                 * @instance
                 */
                TeamCloudInformationDataResult.prototype.status = null;

                /**
                 * TeamCloudInformationDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.ITeamCloudInformation|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult
                 * @instance
                 */
                TeamCloudInformationDataResult.prototype.data = null;

                /**
                 * TeamCloudInformationDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult
                 * @instance
                 */
                TeamCloudInformationDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * TeamCloudInformationDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult
                 * @instance
                 */
                Object.defineProperty(TeamCloudInformationDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * TeamCloudInformationDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult
                 * @instance
                 */
                Object.defineProperty(TeamCloudInformationDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a TeamCloudInformationDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TeamCloudInformationDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.TeamCloudInformation.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a TeamCloudInformationDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult} TeamCloudInformationDataResult
                 */
                TeamCloudInformationDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.TeamCloudInformation.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a TeamCloudInformationDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult} message TeamCloudInformationDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TeamCloudInformationDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.TeamCloudInformation.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this TeamCloudInformationDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformationDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TeamCloudInformationDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return TeamCloudInformationDataResult;
            })();

            v1.TeamCloudInformation = (function() {

                /**
                 * Properties of a TeamCloudInformation.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ITeamCloudInformation
                 * @property {string|null} [imageVersion] TeamCloudInformation imageVersion
                 * @property {string|null} [templateVersion] TeamCloudInformation templateVersion
                 */

                /**
                 * Constructs a new TeamCloudInformation.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a TeamCloudInformation.
                 * @implements ITeamCloudInformation
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ITeamCloudInformation=} [properties] Properties to set
                 */
                function TeamCloudInformation(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TeamCloudInformation imageVersion.
                 * @member {string|null|undefined} imageVersion
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformation
                 * @instance
                 */
                TeamCloudInformation.prototype.imageVersion = null;

                /**
                 * TeamCloudInformation templateVersion.
                 * @member {string|null|undefined} templateVersion
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformation
                 * @instance
                 */
                TeamCloudInformation.prototype.templateVersion = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * TeamCloudInformation _imageVersion.
                 * @member {"imageVersion"|undefined} _imageVersion
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformation
                 * @instance
                 */
                Object.defineProperty(TeamCloudInformation.prototype, "_imageVersion", {
                    get: $util.oneOfGetter($oneOfFields = ["imageVersion"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * TeamCloudInformation _templateVersion.
                 * @member {"templateVersion"|undefined} _templateVersion
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformation
                 * @instance
                 */
                Object.defineProperty(TeamCloudInformation.prototype, "_templateVersion", {
                    get: $util.oneOfGetter($oneOfFields = ["templateVersion"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a TeamCloudInformation message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TeamCloudInformation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.imageVersion != null && message.hasOwnProperty("imageVersion")) {
                        properties._imageVersion = 1;
                        if (!$util.isString(message.imageVersion))
                            return "imageVersion: string expected";
                    }
                    if (message.templateVersion != null && message.hasOwnProperty("templateVersion")) {
                        properties._templateVersion = 1;
                        if (!$util.isString(message.templateVersion))
                            return "templateVersion: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a TeamCloudInformation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.TeamCloudInformation} TeamCloudInformation
                 */
                TeamCloudInformation.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.TeamCloudInformation)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.TeamCloudInformation();
                    if (object.imageVersion != null)
                        message.imageVersion = String(object.imageVersion);
                    if (object.templateVersion != null)
                        message.templateVersion = String(object.templateVersion);
                    return message;
                };

                /**
                 * Creates a plain object from a TeamCloudInformation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformation
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.TeamCloudInformation} message TeamCloudInformation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TeamCloudInformation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (message.imageVersion != null && message.hasOwnProperty("imageVersion")) {
                        object.imageVersion = message.imageVersion;
                        if (options.oneofs)
                            object._imageVersion = "imageVersion";
                    }
                    if (message.templateVersion != null && message.hasOwnProperty("templateVersion")) {
                        object.templateVersion = message.templateVersion;
                        if (options.oneofs)
                            object._templateVersion = "templateVersion";
                    }
                    return object;
                };

                /**
                 * Converts this TeamCloudInformation to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInformation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TeamCloudInformation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return TeamCloudInformation;
            })();

            v1.ScheduleDataResult = (function() {

                /**
                 * Properties of a ScheduleDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IScheduleDataResult
                 * @property {number|null} [code] ScheduleDataResult code
                 * @property {string|null} [status] ScheduleDataResult status
                 * @property {colbylwilliams.teamcloud.v1.ISchedule|null} [data] ScheduleDataResult data
                 * @property {string|null} [location] ScheduleDataResult location
                 */

                /**
                 * Constructs a new ScheduleDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ScheduleDataResult.
                 * @implements IScheduleDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IScheduleDataResult=} [properties] Properties to set
                 */
                function ScheduleDataResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ScheduleDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDataResult
                 * @instance
                 */
                ScheduleDataResult.prototype.code = 0;

                /**
                 * ScheduleDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDataResult
                 * @instance
                 */
                ScheduleDataResult.prototype.status = null;

                /**
                 * ScheduleDataResult data.
                 * @member {colbylwilliams.teamcloud.v1.ISchedule|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDataResult
                 * @instance
                 */
                ScheduleDataResult.prototype.data = null;

                /**
                 * ScheduleDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDataResult
                 * @instance
                 */
                ScheduleDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ScheduleDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDataResult
                 * @instance
                 */
                Object.defineProperty(ScheduleDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ScheduleDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDataResult
                 * @instance
                 */
                Object.defineProperty(ScheduleDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ScheduleDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScheduleDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.Schedule.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ScheduleDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ScheduleDataResult} ScheduleDataResult
                 */
                ScheduleDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ScheduleDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ScheduleDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.ScheduleDataResult.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.Schedule.fromObject(object.data);
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ScheduleDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ScheduleDataResult} message ScheduleDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScheduleDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.Schedule.toObject(message.data, options);
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ScheduleDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScheduleDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ScheduleDataResult;
            })();

            v1.Schedule = (function() {

                /**
                 * Properties of a Schedule.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ISchedule
                 * @property {string|null} [organization] Schedule organization
                 * @property {string|null} [organizationName] Schedule organizationName
                 * @property {string|null} [projectId] Schedule projectId
                 * @property {string|null} [projectName] Schedule projectName
                 * @property {boolean|null} [enabled] Schedule enabled
                 * @property {boolean|null} [recurring] Schedule recurring
                 * @property {colbylwilliams.teamcloud.v1.Schedule.DaysOfWeekEnum|null} [daysOfWeek] Schedule daysOfWeek
                 * @property {number|null} [utcHour] Schedule utcHour
                 * @property {number|null} [utcMinute] Schedule utcMinute
                 * @property {string|null} [creator] Schedule creator
                 * @property {string|null} [created] Schedule created
                 * @property {string|null} [lastUpdatedBy] Schedule lastUpdatedBy
                 * @property {string|null} [lastUpdated] Schedule lastUpdated
                 * @property {string|null} [lastRun] Schedule lastRun
                 * @property {Array.<colbylwilliams.teamcloud.v1.IComponentTaskReference>|null} [componentTasks] Schedule componentTasks
                 * @property {string|null} [id] Schedule id
                 */

                /**
                 * Constructs a new Schedule.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a Schedule.
                 * @implements ISchedule
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ISchedule=} [properties] Properties to set
                 */
                function Schedule(properties) {
                    this.componentTasks = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Schedule organization.
                 * @member {string} organization
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.organization = "";

                /**
                 * Schedule organizationName.
                 * @member {string} organizationName
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.organizationName = "";

                /**
                 * Schedule projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.projectId = "";

                /**
                 * Schedule projectName.
                 * @member {string} projectName
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.projectName = "";

                /**
                 * Schedule enabled.
                 * @member {boolean} enabled
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.enabled = false;

                /**
                 * Schedule recurring.
                 * @member {boolean} recurring
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.recurring = false;

                /**
                 * Schedule daysOfWeek.
                 * @member {colbylwilliams.teamcloud.v1.Schedule.DaysOfWeekEnum} daysOfWeek
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.daysOfWeek = 0;

                /**
                 * Schedule utcHour.
                 * @member {number} utcHour
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.utcHour = 0;

                /**
                 * Schedule utcMinute.
                 * @member {number} utcMinute
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.utcMinute = 0;

                /**
                 * Schedule creator.
                 * @member {string|null|undefined} creator
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.creator = null;

                /**
                 * Schedule created.
                 * @member {string} created
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.created = "";

                /**
                 * Schedule lastUpdatedBy.
                 * @member {string|null|undefined} lastUpdatedBy
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.lastUpdatedBy = null;

                /**
                 * Schedule lastUpdated.
                 * @member {string} lastUpdated
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.lastUpdated = "";

                /**
                 * Schedule lastRun.
                 * @member {string|null|undefined} lastRun
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.lastRun = null;

                /**
                 * Schedule componentTasks.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IComponentTaskReference>} componentTasks
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.componentTasks = $util.emptyArray;

                /**
                 * Schedule id.
                 * @member {string} id
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Schedule.prototype.id = "";

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * Schedule _creator.
                 * @member {"creator"|undefined} _creator
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Object.defineProperty(Schedule.prototype, "_creator", {
                    get: $util.oneOfGetter($oneOfFields = ["creator"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Schedule _lastUpdatedBy.
                 * @member {"lastUpdatedBy"|undefined} _lastUpdatedBy
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Object.defineProperty(Schedule.prototype, "_lastUpdatedBy", {
                    get: $util.oneOfGetter($oneOfFields = ["lastUpdatedBy"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Schedule _lastRun.
                 * @member {"lastRun"|undefined} _lastRun
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 */
                Object.defineProperty(Schedule.prototype, "_lastRun", {
                    get: $util.oneOfGetter($oneOfFields = ["lastRun"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a Schedule message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Schedule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        if (!$util.isString(message.organization))
                            return "organization: string expected";
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        if (!$util.isString(message.organizationName))
                            return "organizationName: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.projectName != null && message.hasOwnProperty("projectName"))
                        if (!$util.isString(message.projectName))
                            return "projectName: string expected";
                    if (message.enabled != null && message.hasOwnProperty("enabled"))
                        if (typeof message.enabled !== "boolean")
                            return "enabled: boolean expected";
                    if (message.recurring != null && message.hasOwnProperty("recurring"))
                        if (typeof message.recurring !== "boolean")
                            return "recurring: boolean expected";
                    if (message.daysOfWeek != null && message.hasOwnProperty("daysOfWeek"))
                        switch (message.daysOfWeek) {
                        default:
                            return "daysOfWeek: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            break;
                        }
                    if (message.utcHour != null && message.hasOwnProperty("utcHour"))
                        if (!$util.isInteger(message.utcHour))
                            return "utcHour: integer expected";
                    if (message.utcMinute != null && message.hasOwnProperty("utcMinute"))
                        if (!$util.isInteger(message.utcMinute))
                            return "utcMinute: integer expected";
                    if (message.creator != null && message.hasOwnProperty("creator")) {
                        properties._creator = 1;
                        if (!$util.isString(message.creator))
                            return "creator: string expected";
                    }
                    if (message.created != null && message.hasOwnProperty("created"))
                        if (!$util.isString(message.created))
                            return "created: string expected";
                    if (message.lastUpdatedBy != null && message.hasOwnProperty("lastUpdatedBy")) {
                        properties._lastUpdatedBy = 1;
                        if (!$util.isString(message.lastUpdatedBy))
                            return "lastUpdatedBy: string expected";
                    }
                    if (message.lastUpdated != null && message.hasOwnProperty("lastUpdated"))
                        if (!$util.isString(message.lastUpdated))
                            return "lastUpdated: string expected";
                    if (message.lastRun != null && message.hasOwnProperty("lastRun")) {
                        properties._lastRun = 1;
                        if (!$util.isString(message.lastRun))
                            return "lastRun: string expected";
                    }
                    if (message.componentTasks != null && message.hasOwnProperty("componentTasks")) {
                        if (!Array.isArray(message.componentTasks))
                            return "componentTasks: array expected";
                        for (let i = 0; i < message.componentTasks.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.ComponentTaskReference.verify(message.componentTasks[i]);
                            if (error)
                                return "componentTasks." + error;
                        }
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    return null;
                };

                /**
                 * Creates a Schedule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.Schedule} Schedule
                 */
                Schedule.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.Schedule)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.Schedule();
                    if (object.organization != null)
                        message.organization = String(object.organization);
                    if (object.organizationName != null)
                        message.organizationName = String(object.organizationName);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.projectName != null)
                        message.projectName = String(object.projectName);
                    if (object.enabled != null)
                        message.enabled = Boolean(object.enabled);
                    if (object.recurring != null)
                        message.recurring = Boolean(object.recurring);
                    switch (object.daysOfWeek) {
                    case "SUNDAY":
                    case 0:
                        message.daysOfWeek = 0;
                        break;
                    case "MONDAY":
                    case 1:
                        message.daysOfWeek = 1;
                        break;
                    case "TUESDAY":
                    case 2:
                        message.daysOfWeek = 2;
                        break;
                    case "WEDNESDAY":
                    case 3:
                        message.daysOfWeek = 3;
                        break;
                    case "THURSDAY":
                    case 4:
                        message.daysOfWeek = 4;
                        break;
                    case "FRIDAY":
                    case 5:
                        message.daysOfWeek = 5;
                        break;
                    case "SATURDAY":
                    case 6:
                        message.daysOfWeek = 6;
                        break;
                    }
                    if (object.utcHour != null)
                        message.utcHour = object.utcHour | 0;
                    if (object.utcMinute != null)
                        message.utcMinute = object.utcMinute | 0;
                    if (object.creator != null)
                        message.creator = String(object.creator);
                    if (object.created != null)
                        message.created = String(object.created);
                    if (object.lastUpdatedBy != null)
                        message.lastUpdatedBy = String(object.lastUpdatedBy);
                    if (object.lastUpdated != null)
                        message.lastUpdated = String(object.lastUpdated);
                    if (object.lastRun != null)
                        message.lastRun = String(object.lastRun);
                    if (object.componentTasks) {
                        if (!Array.isArray(object.componentTasks))
                            throw TypeError(".colbylwilliams.teamcloud.v1.Schedule.componentTasks: array expected");
                        message.componentTasks = [];
                        for (let i = 0; i < object.componentTasks.length; ++i) {
                            if (typeof object.componentTasks[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.Schedule.componentTasks: object expected");
                            message.componentTasks[i] = $root.colbylwilliams.teamcloud.v1.ComponentTaskReference.fromObject(object.componentTasks[i]);
                        }
                    }
                    if (object.id != null)
                        message.id = String(object.id);
                    return message;
                };

                /**
                 * Creates a plain object from a Schedule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.Schedule} message Schedule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Schedule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.componentTasks = [];
                    if (options.defaults) {
                        object.id = "";
                        object.lastUpdated = "";
                        object.daysOfWeek = options.enums === String ? "SUNDAY" : 0;
                        object.recurring = false;
                        object.organization = "";
                        object.utcHour = 0;
                        object.utcMinute = 0;
                        object.organizationName = "";
                        object.projectId = "";
                        object.projectName = "";
                        object.created = "";
                        object.enabled = false;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.lastUpdatedBy != null && message.hasOwnProperty("lastUpdatedBy")) {
                        object.lastUpdatedBy = message.lastUpdatedBy;
                        if (options.oneofs)
                            object._lastUpdatedBy = "lastUpdatedBy";
                    }
                    if (message.lastUpdated != null && message.hasOwnProperty("lastUpdated"))
                        object.lastUpdated = message.lastUpdated;
                    if (message.lastRun != null && message.hasOwnProperty("lastRun")) {
                        object.lastRun = message.lastRun;
                        if (options.oneofs)
                            object._lastRun = "lastRun";
                    }
                    if (message.daysOfWeek != null && message.hasOwnProperty("daysOfWeek"))
                        object.daysOfWeek = options.enums === String ? $root.colbylwilliams.teamcloud.v1.Schedule.DaysOfWeekEnum[message.daysOfWeek] : message.daysOfWeek;
                    if (message.recurring != null && message.hasOwnProperty("recurring"))
                        object.recurring = message.recurring;
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = message.organization;
                    if (message.utcHour != null && message.hasOwnProperty("utcHour"))
                        object.utcHour = message.utcHour;
                    if (message.utcMinute != null && message.hasOwnProperty("utcMinute"))
                        object.utcMinute = message.utcMinute;
                    if (message.organizationName != null && message.hasOwnProperty("organizationName"))
                        object.organizationName = message.organizationName;
                    if (message.componentTasks && message.componentTasks.length) {
                        object.componentTasks = [];
                        for (let j = 0; j < message.componentTasks.length; ++j)
                            object.componentTasks[j] = $root.colbylwilliams.teamcloud.v1.ComponentTaskReference.toObject(message.componentTasks[j], options);
                    }
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.projectName != null && message.hasOwnProperty("projectName"))
                        object.projectName = message.projectName;
                    if (message.created != null && message.hasOwnProperty("created"))
                        object.created = message.created;
                    if (message.creator != null && message.hasOwnProperty("creator")) {
                        object.creator = message.creator;
                        if (options.oneofs)
                            object._creator = "creator";
                    }
                    if (message.enabled != null && message.hasOwnProperty("enabled"))
                        object.enabled = message.enabled;
                    return object;
                };

                /**
                 * Converts this Schedule to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.Schedule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Schedule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * DaysOfWeekEnum enum.
                 * @name colbylwilliams.teamcloud.v1.Schedule.DaysOfWeekEnum
                 * @enum {number}
                 * @property {number} SUNDAY=0 SUNDAY value
                 * @property {number} MONDAY=1 MONDAY value
                 * @property {number} TUESDAY=2 TUESDAY value
                 * @property {number} WEDNESDAY=3 WEDNESDAY value
                 * @property {number} THURSDAY=4 THURSDAY value
                 * @property {number} FRIDAY=5 FRIDAY value
                 * @property {number} SATURDAY=6 SATURDAY value
                 */
                Schedule.DaysOfWeekEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "SUNDAY"] = 0;
                    values[valuesById[1] = "MONDAY"] = 1;
                    values[valuesById[2] = "TUESDAY"] = 2;
                    values[valuesById[3] = "WEDNESDAY"] = 3;
                    values[valuesById[4] = "THURSDAY"] = 4;
                    values[valuesById[5] = "FRIDAY"] = 5;
                    values[valuesById[6] = "SATURDAY"] = 6;
                    return values;
                })();

                return Schedule;
            })();

            v1.ScheduleDefinition = (function() {

                /**
                 * Properties of a ScheduleDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IScheduleDefinition
                 * @property {boolean|null} [enabled] ScheduleDefinition enabled
                 * @property {boolean|null} [recurring] ScheduleDefinition recurring
                 * @property {colbylwilliams.teamcloud.v1.ScheduleDefinition.DaysOfWeekEnum|null} [daysOfWeek] ScheduleDefinition daysOfWeek
                 * @property {number|null} [utcHour] ScheduleDefinition utcHour
                 * @property {number|null} [utcMinute] ScheduleDefinition utcMinute
                 * @property {Array.<colbylwilliams.teamcloud.v1.IComponentTaskReference>|null} [componentTasks] ScheduleDefinition componentTasks
                 */

                /**
                 * Constructs a new ScheduleDefinition.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ScheduleDefinition.
                 * @implements IScheduleDefinition
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IScheduleDefinition=} [properties] Properties to set
                 */
                function ScheduleDefinition(properties) {
                    this.componentTasks = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ScheduleDefinition enabled.
                 * @member {boolean} enabled
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDefinition
                 * @instance
                 */
                ScheduleDefinition.prototype.enabled = false;

                /**
                 * ScheduleDefinition recurring.
                 * @member {boolean} recurring
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDefinition
                 * @instance
                 */
                ScheduleDefinition.prototype.recurring = false;

                /**
                 * ScheduleDefinition daysOfWeek.
                 * @member {colbylwilliams.teamcloud.v1.ScheduleDefinition.DaysOfWeekEnum} daysOfWeek
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDefinition
                 * @instance
                 */
                ScheduleDefinition.prototype.daysOfWeek = 0;

                /**
                 * ScheduleDefinition utcHour.
                 * @member {number} utcHour
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDefinition
                 * @instance
                 */
                ScheduleDefinition.prototype.utcHour = 0;

                /**
                 * ScheduleDefinition utcMinute.
                 * @member {number} utcMinute
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDefinition
                 * @instance
                 */
                ScheduleDefinition.prototype.utcMinute = 0;

                /**
                 * ScheduleDefinition componentTasks.
                 * @member {Array.<colbylwilliams.teamcloud.v1.IComponentTaskReference>} componentTasks
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDefinition
                 * @instance
                 */
                ScheduleDefinition.prototype.componentTasks = $util.emptyArray;

                /**
                 * Verifies a ScheduleDefinition message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDefinition
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScheduleDefinition.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.enabled != null && message.hasOwnProperty("enabled"))
                        if (typeof message.enabled !== "boolean")
                            return "enabled: boolean expected";
                    if (message.recurring != null && message.hasOwnProperty("recurring"))
                        if (typeof message.recurring !== "boolean")
                            return "recurring: boolean expected";
                    if (message.daysOfWeek != null && message.hasOwnProperty("daysOfWeek"))
                        switch (message.daysOfWeek) {
                        default:
                            return "daysOfWeek: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            break;
                        }
                    if (message.utcHour != null && message.hasOwnProperty("utcHour"))
                        if (!$util.isInteger(message.utcHour))
                            return "utcHour: integer expected";
                    if (message.utcMinute != null && message.hasOwnProperty("utcMinute"))
                        if (!$util.isInteger(message.utcMinute))
                            return "utcMinute: integer expected";
                    if (message.componentTasks != null && message.hasOwnProperty("componentTasks")) {
                        if (!Array.isArray(message.componentTasks))
                            return "componentTasks: array expected";
                        for (let i = 0; i < message.componentTasks.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.ComponentTaskReference.verify(message.componentTasks[i]);
                            if (error)
                                return "componentTasks." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ScheduleDefinition message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDefinition
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ScheduleDefinition} ScheduleDefinition
                 */
                ScheduleDefinition.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ScheduleDefinition)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ScheduleDefinition();
                    if (object.enabled != null)
                        message.enabled = Boolean(object.enabled);
                    if (object.recurring != null)
                        message.recurring = Boolean(object.recurring);
                    switch (object.daysOfWeek) {
                    case "SUNDAY":
                    case 0:
                        message.daysOfWeek = 0;
                        break;
                    case "MONDAY":
                    case 1:
                        message.daysOfWeek = 1;
                        break;
                    case "TUESDAY":
                    case 2:
                        message.daysOfWeek = 2;
                        break;
                    case "WEDNESDAY":
                    case 3:
                        message.daysOfWeek = 3;
                        break;
                    case "THURSDAY":
                    case 4:
                        message.daysOfWeek = 4;
                        break;
                    case "FRIDAY":
                    case 5:
                        message.daysOfWeek = 5;
                        break;
                    case "SATURDAY":
                    case 6:
                        message.daysOfWeek = 6;
                        break;
                    }
                    if (object.utcHour != null)
                        message.utcHour = object.utcHour | 0;
                    if (object.utcMinute != null)
                        message.utcMinute = object.utcMinute | 0;
                    if (object.componentTasks) {
                        if (!Array.isArray(object.componentTasks))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ScheduleDefinition.componentTasks: array expected");
                        message.componentTasks = [];
                        for (let i = 0; i < object.componentTasks.length; ++i) {
                            if (typeof object.componentTasks[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ScheduleDefinition.componentTasks: object expected");
                            message.componentTasks[i] = $root.colbylwilliams.teamcloud.v1.ComponentTaskReference.fromObject(object.componentTasks[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ScheduleDefinition message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDefinition
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ScheduleDefinition} message ScheduleDefinition
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScheduleDefinition.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.componentTasks = [];
                    if (options.defaults) {
                        object.daysOfWeek = options.enums === String ? "SUNDAY" : 0;
                        object.recurring = false;
                        object.utcHour = 0;
                        object.utcMinute = 0;
                        object.enabled = false;
                    }
                    if (message.daysOfWeek != null && message.hasOwnProperty("daysOfWeek"))
                        object.daysOfWeek = options.enums === String ? $root.colbylwilliams.teamcloud.v1.ScheduleDefinition.DaysOfWeekEnum[message.daysOfWeek] : message.daysOfWeek;
                    if (message.recurring != null && message.hasOwnProperty("recurring"))
                        object.recurring = message.recurring;
                    if (message.utcHour != null && message.hasOwnProperty("utcHour"))
                        object.utcHour = message.utcHour;
                    if (message.utcMinute != null && message.hasOwnProperty("utcMinute"))
                        object.utcMinute = message.utcMinute;
                    if (message.componentTasks && message.componentTasks.length) {
                        object.componentTasks = [];
                        for (let j = 0; j < message.componentTasks.length; ++j)
                            object.componentTasks[j] = $root.colbylwilliams.teamcloud.v1.ComponentTaskReference.toObject(message.componentTasks[j], options);
                    }
                    if (message.enabled != null && message.hasOwnProperty("enabled"))
                        object.enabled = message.enabled;
                    return object;
                };

                /**
                 * Converts this ScheduleDefinition to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleDefinition
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScheduleDefinition.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * DaysOfWeekEnum enum.
                 * @name colbylwilliams.teamcloud.v1.ScheduleDefinition.DaysOfWeekEnum
                 * @enum {number}
                 * @property {number} SUNDAY=0 SUNDAY value
                 * @property {number} MONDAY=1 MONDAY value
                 * @property {number} TUESDAY=2 TUESDAY value
                 * @property {number} WEDNESDAY=3 WEDNESDAY value
                 * @property {number} THURSDAY=4 THURSDAY value
                 * @property {number} FRIDAY=5 FRIDAY value
                 * @property {number} SATURDAY=6 SATURDAY value
                 */
                ScheduleDefinition.DaysOfWeekEnum = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "SUNDAY"] = 0;
                    values[valuesById[1] = "MONDAY"] = 1;
                    values[valuesById[2] = "TUESDAY"] = 2;
                    values[valuesById[3] = "WEDNESDAY"] = 3;
                    values[valuesById[4] = "THURSDAY"] = 4;
                    values[valuesById[5] = "FRIDAY"] = 5;
                    values[valuesById[6] = "SATURDAY"] = 6;
                    return values;
                })();

                return ScheduleDefinition;
            })();

            v1.ScheduleListDataResult = (function() {

                /**
                 * Properties of a ScheduleListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IScheduleListDataResult
                 * @property {number|null} [code] ScheduleListDataResult code
                 * @property {string|null} [status] ScheduleListDataResult status
                 * @property {Array.<colbylwilliams.teamcloud.v1.ISchedule>|null} [data] ScheduleListDataResult data
                 * @property {string|null} [location] ScheduleListDataResult location
                 */

                /**
                 * Constructs a new ScheduleListDataResult.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ScheduleListDataResult.
                 * @implements IScheduleListDataResult
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IScheduleListDataResult=} [properties] Properties to set
                 */
                function ScheduleListDataResult(properties) {
                    this.data = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ScheduleListDataResult code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleListDataResult
                 * @instance
                 */
                ScheduleListDataResult.prototype.code = 0;

                /**
                 * ScheduleListDataResult status.
                 * @member {string|null|undefined} status
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleListDataResult
                 * @instance
                 */
                ScheduleListDataResult.prototype.status = null;

                /**
                 * ScheduleListDataResult data.
                 * @member {Array.<colbylwilliams.teamcloud.v1.ISchedule>} data
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleListDataResult
                 * @instance
                 */
                ScheduleListDataResult.prototype.data = $util.emptyArray;

                /**
                 * ScheduleListDataResult location.
                 * @member {string|null|undefined} location
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleListDataResult
                 * @instance
                 */
                ScheduleListDataResult.prototype.location = null;

                // OneOf field names bound to virtual getters and setters
                let $oneOfFields;

                /**
                 * ScheduleListDataResult _status.
                 * @member {"status"|undefined} _status
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleListDataResult
                 * @instance
                 */
                Object.defineProperty(ScheduleListDataResult.prototype, "_status", {
                    get: $util.oneOfGetter($oneOfFields = ["status"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * ScheduleListDataResult _location.
                 * @member {"location"|undefined} _location
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleListDataResult
                 * @instance
                 */
                Object.defineProperty(ScheduleListDataResult.prototype, "_location", {
                    get: $util.oneOfGetter($oneOfFields = ["location"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Verifies a ScheduleListDataResult message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleListDataResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScheduleListDataResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    let properties = {};
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        properties._status = 1;
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    }
                    if (message.data != null && message.hasOwnProperty("data")) {
                        if (!Array.isArray(message.data))
                            return "data: array expected";
                        for (let i = 0; i < message.data.length; ++i) {
                            let error = $root.colbylwilliams.teamcloud.v1.Schedule.verify(message.data[i]);
                            if (error)
                                return "data." + error;
                        }
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        properties._location = 1;
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ScheduleListDataResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleListDataResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.ScheduleListDataResult} ScheduleListDataResult
                 */
                ScheduleListDataResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.ScheduleListDataResult)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.ScheduleListDataResult();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data) {
                        if (!Array.isArray(object.data))
                            throw TypeError(".colbylwilliams.teamcloud.v1.ScheduleListDataResult.data: array expected");
                        message.data = [];
                        for (let i = 0; i < object.data.length; ++i) {
                            if (typeof object.data[i] !== "object")
                                throw TypeError(".colbylwilliams.teamcloud.v1.ScheduleListDataResult.data: object expected");
                            message.data[i] = $root.colbylwilliams.teamcloud.v1.Schedule.fromObject(object.data[i]);
                        }
                    }
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };

                /**
                 * Creates a plain object from a ScheduleListDataResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleListDataResult
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.ScheduleListDataResult} message ScheduleListDataResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScheduleListDataResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.data = [];
                    if (options.defaults)
                        object.code = 0;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data && message.data.length) {
                        object.data = [];
                        for (let j = 0; j < message.data.length; ++j)
                            object.data[j] = $root.colbylwilliams.teamcloud.v1.Schedule.toObject(message.data[j], options);
                    }
                    if (message.location != null && message.hasOwnProperty("location")) {
                        object.location = message.location;
                        if (options.oneofs)
                            object._location = "location";
                    }
                    if (message.status != null && message.hasOwnProperty("status")) {
                        object.status = message.status;
                        if (options.oneofs)
                            object._status = "status";
                    }
                    return object;
                };

                /**
                 * Converts this ScheduleListDataResult to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleListDataResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScheduleListDataResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ScheduleListDataResult;
            })();

            v1.ScheduleAPI = (function() {

                /**
                 * Constructs a new ScheduleAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a ScheduleAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ScheduleAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (ScheduleAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ScheduleAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ScheduleAPI#createSchedule}.
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @typedef CreateScheduleCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ScheduleDataResult} [response] ScheduleDataResult
                 */

                /**
                 * Calls CreateSchedule.
                 * @function createSchedule
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateScheduleRequest} request CreateScheduleRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ScheduleAPI.CreateScheduleCallback} callback Node-style callback called with the error, if any, and ScheduleDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ScheduleAPI.prototype.createSchedule = function createSchedule(request, callback) {
                    return this.rpcCall(createSchedule, $root.colbylwilliams.teamcloud.v1.CreateScheduleRequest, $root.colbylwilliams.teamcloud.v1.ScheduleDataResult, request, callback);
                }, "name", { value: "CreateSchedule" });

                /**
                 * Calls CreateSchedule.
                 * @function createSchedule
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.ICreateScheduleRequest} request CreateScheduleRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ScheduleDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ScheduleAPI#getSchedule}.
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @typedef GetScheduleCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ScheduleDataResult} [response] ScheduleDataResult
                 */

                /**
                 * Calls GetSchedule.
                 * @function getSchedule
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetScheduleRequest} request GetScheduleRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ScheduleAPI.GetScheduleCallback} callback Node-style callback called with the error, if any, and ScheduleDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ScheduleAPI.prototype.getSchedule = function getSchedule(request, callback) {
                    return this.rpcCall(getSchedule, $root.colbylwilliams.teamcloud.v1.GetScheduleRequest, $root.colbylwilliams.teamcloud.v1.ScheduleDataResult, request, callback);
                }, "name", { value: "GetSchedule" });

                /**
                 * Calls GetSchedule.
                 * @function getSchedule
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetScheduleRequest} request GetScheduleRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ScheduleDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ScheduleAPI#getSchedules}.
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @typedef GetSchedulesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ScheduleListDataResult} [response] ScheduleListDataResult
                 */

                /**
                 * Calls GetSchedules.
                 * @function getSchedules
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetSchedulesRequest} request GetSchedulesRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ScheduleAPI.GetSchedulesCallback} callback Node-style callback called with the error, if any, and ScheduleListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ScheduleAPI.prototype.getSchedules = function getSchedules(request, callback) {
                    return this.rpcCall(getSchedules, $root.colbylwilliams.teamcloud.v1.GetSchedulesRequest, $root.colbylwilliams.teamcloud.v1.ScheduleListDataResult, request, callback);
                }, "name", { value: "GetSchedules" });

                /**
                 * Calls GetSchedules.
                 * @function getSchedules
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetSchedulesRequest} request GetSchedulesRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ScheduleListDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ScheduleAPI#runSchedule}.
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @typedef RunScheduleCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ScheduleDataResult} [response] ScheduleDataResult
                 */

                /**
                 * Calls RunSchedule.
                 * @function runSchedule
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IRunScheduleRequest} request RunScheduleRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ScheduleAPI.RunScheduleCallback} callback Node-style callback called with the error, if any, and ScheduleDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ScheduleAPI.prototype.runSchedule = function runSchedule(request, callback) {
                    return this.rpcCall(runSchedule, $root.colbylwilliams.teamcloud.v1.RunScheduleRequest, $root.colbylwilliams.teamcloud.v1.ScheduleDataResult, request, callback);
                }, "name", { value: "RunSchedule" });

                /**
                 * Calls RunSchedule.
                 * @function runSchedule
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IRunScheduleRequest} request RunScheduleRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ScheduleDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.ScheduleAPI#updateSchedule}.
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @typedef UpdateScheduleCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ScheduleDataResult} [response] ScheduleDataResult
                 */

                /**
                 * Calls UpdateSchedule.
                 * @function updateSchedule
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateScheduleRequest} request UpdateScheduleRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.ScheduleAPI.UpdateScheduleCallback} callback Node-style callback called with the error, if any, and ScheduleDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ScheduleAPI.prototype.updateSchedule = function updateSchedule(request, callback) {
                    return this.rpcCall(updateSchedule, $root.colbylwilliams.teamcloud.v1.UpdateScheduleRequest, $root.colbylwilliams.teamcloud.v1.ScheduleDataResult, request, callback);
                }, "name", { value: "UpdateSchedule" });

                /**
                 * Calls UpdateSchedule.
                 * @function updateSchedule
                 * @memberof colbylwilliams.teamcloud.v1.ScheduleAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IUpdateScheduleRequest} request UpdateScheduleRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ScheduleDataResult>} Promise
                 * @variation 2
                 */

                return ScheduleAPI;
            })();

            v1.CreateScheduleRequest = (function() {

                /**
                 * Properties of a CreateScheduleRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ICreateScheduleRequest
                 * @property {string|null} [organizationId] CreateScheduleRequest organizationId
                 * @property {string|null} [projectId] CreateScheduleRequest projectId
                 * @property {colbylwilliams.teamcloud.v1.IScheduleDefinition|null} [scheduleDefinition] CreateScheduleRequest scheduleDefinition
                 */

                /**
                 * Constructs a new CreateScheduleRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a CreateScheduleRequest.
                 * @implements ICreateScheduleRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ICreateScheduleRequest=} [properties] Properties to set
                 */
                function CreateScheduleRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateScheduleRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.CreateScheduleRequest
                 * @instance
                 */
                CreateScheduleRequest.prototype.organizationId = "";

                /**
                 * CreateScheduleRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.CreateScheduleRequest
                 * @instance
                 */
                CreateScheduleRequest.prototype.projectId = "";

                /**
                 * CreateScheduleRequest scheduleDefinition.
                 * @member {colbylwilliams.teamcloud.v1.IScheduleDefinition|null|undefined} scheduleDefinition
                 * @memberof colbylwilliams.teamcloud.v1.CreateScheduleRequest
                 * @instance
                 */
                CreateScheduleRequest.prototype.scheduleDefinition = null;

                /**
                 * Verifies a CreateScheduleRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.CreateScheduleRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateScheduleRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.scheduleDefinition != null && message.hasOwnProperty("scheduleDefinition")) {
                        let error = $root.colbylwilliams.teamcloud.v1.ScheduleDefinition.verify(message.scheduleDefinition);
                        if (error)
                            return "scheduleDefinition." + error;
                    }
                    return null;
                };

                /**
                 * Creates a CreateScheduleRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateScheduleRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.CreateScheduleRequest} CreateScheduleRequest
                 */
                CreateScheduleRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.CreateScheduleRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.CreateScheduleRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.scheduleDefinition != null) {
                        if (typeof object.scheduleDefinition !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.CreateScheduleRequest.scheduleDefinition: object expected");
                        message.scheduleDefinition = $root.colbylwilliams.teamcloud.v1.ScheduleDefinition.fromObject(object.scheduleDefinition);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CreateScheduleRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.CreateScheduleRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.CreateScheduleRequest} message CreateScheduleRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateScheduleRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                        object.scheduleDefinition = null;
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.scheduleDefinition != null && message.hasOwnProperty("scheduleDefinition"))
                        object.scheduleDefinition = $root.colbylwilliams.teamcloud.v1.ScheduleDefinition.toObject(message.scheduleDefinition, options);
                    return object;
                };

                /**
                 * Converts this CreateScheduleRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.CreateScheduleRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateScheduleRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CreateScheduleRequest;
            })();

            v1.GetScheduleRequest = (function() {

                /**
                 * Properties of a GetScheduleRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetScheduleRequest
                 * @property {string|null} [scheduleId] GetScheduleRequest scheduleId
                 * @property {string|null} [organizationId] GetScheduleRequest organizationId
                 * @property {string|null} [projectId] GetScheduleRequest projectId
                 */

                /**
                 * Constructs a new GetScheduleRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetScheduleRequest.
                 * @implements IGetScheduleRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetScheduleRequest=} [properties] Properties to set
                 */
                function GetScheduleRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetScheduleRequest scheduleId.
                 * @member {string} scheduleId
                 * @memberof colbylwilliams.teamcloud.v1.GetScheduleRequest
                 * @instance
                 */
                GetScheduleRequest.prototype.scheduleId = "";

                /**
                 * GetScheduleRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetScheduleRequest
                 * @instance
                 */
                GetScheduleRequest.prototype.organizationId = "";

                /**
                 * GetScheduleRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetScheduleRequest
                 * @instance
                 */
                GetScheduleRequest.prototype.projectId = "";

                /**
                 * Verifies a GetScheduleRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetScheduleRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetScheduleRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.scheduleId != null && message.hasOwnProperty("scheduleId"))
                        if (!$util.isString(message.scheduleId))
                            return "scheduleId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetScheduleRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetScheduleRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetScheduleRequest} GetScheduleRequest
                 */
                GetScheduleRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetScheduleRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetScheduleRequest();
                    if (object.scheduleId != null)
                        message.scheduleId = String(object.scheduleId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetScheduleRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetScheduleRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetScheduleRequest} message GetScheduleRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetScheduleRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.scheduleId = "";
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.scheduleId != null && message.hasOwnProperty("scheduleId"))
                        object.scheduleId = message.scheduleId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetScheduleRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetScheduleRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetScheduleRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetScheduleRequest;
            })();

            v1.GetSchedulesRequest = (function() {

                /**
                 * Properties of a GetSchedulesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetSchedulesRequest
                 * @property {string|null} [organizationId] GetSchedulesRequest organizationId
                 * @property {string|null} [projectId] GetSchedulesRequest projectId
                 */

                /**
                 * Constructs a new GetSchedulesRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetSchedulesRequest.
                 * @implements IGetSchedulesRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetSchedulesRequest=} [properties] Properties to set
                 */
                function GetSchedulesRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetSchedulesRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetSchedulesRequest
                 * @instance
                 */
                GetSchedulesRequest.prototype.organizationId = "";

                /**
                 * GetSchedulesRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetSchedulesRequest
                 * @instance
                 */
                GetSchedulesRequest.prototype.projectId = "";

                /**
                 * Verifies a GetSchedulesRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetSchedulesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetSchedulesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a GetSchedulesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetSchedulesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetSchedulesRequest} GetSchedulesRequest
                 */
                GetSchedulesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetSchedulesRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetSchedulesRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetSchedulesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetSchedulesRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetSchedulesRequest} message GetSchedulesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetSchedulesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this GetSchedulesRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetSchedulesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetSchedulesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetSchedulesRequest;
            })();

            v1.RunScheduleRequest = (function() {

                /**
                 * Properties of a RunScheduleRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IRunScheduleRequest
                 * @property {string|null} [scheduleId] RunScheduleRequest scheduleId
                 * @property {string|null} [organizationId] RunScheduleRequest organizationId
                 * @property {string|null} [projectId] RunScheduleRequest projectId
                 */

                /**
                 * Constructs a new RunScheduleRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a RunScheduleRequest.
                 * @implements IRunScheduleRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IRunScheduleRequest=} [properties] Properties to set
                 */
                function RunScheduleRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RunScheduleRequest scheduleId.
                 * @member {string} scheduleId
                 * @memberof colbylwilliams.teamcloud.v1.RunScheduleRequest
                 * @instance
                 */
                RunScheduleRequest.prototype.scheduleId = "";

                /**
                 * RunScheduleRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.RunScheduleRequest
                 * @instance
                 */
                RunScheduleRequest.prototype.organizationId = "";

                /**
                 * RunScheduleRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.RunScheduleRequest
                 * @instance
                 */
                RunScheduleRequest.prototype.projectId = "";

                /**
                 * Verifies a RunScheduleRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.RunScheduleRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RunScheduleRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.scheduleId != null && message.hasOwnProperty("scheduleId"))
                        if (!$util.isString(message.scheduleId))
                            return "scheduleId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    return null;
                };

                /**
                 * Creates a RunScheduleRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.RunScheduleRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.RunScheduleRequest} RunScheduleRequest
                 */
                RunScheduleRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.RunScheduleRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.RunScheduleRequest();
                    if (object.scheduleId != null)
                        message.scheduleId = String(object.scheduleId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    return message;
                };

                /**
                 * Creates a plain object from a RunScheduleRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.RunScheduleRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.RunScheduleRequest} message RunScheduleRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RunScheduleRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.scheduleId = "";
                        object.organizationId = "";
                        object.projectId = "";
                    }
                    if (message.scheduleId != null && message.hasOwnProperty("scheduleId"))
                        object.scheduleId = message.scheduleId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    return object;
                };

                /**
                 * Converts this RunScheduleRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.RunScheduleRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RunScheduleRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RunScheduleRequest;
            })();

            v1.UpdateScheduleRequest = (function() {

                /**
                 * Properties of an UpdateScheduleRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IUpdateScheduleRequest
                 * @property {string|null} [scheduleId] UpdateScheduleRequest scheduleId
                 * @property {string|null} [organizationId] UpdateScheduleRequest organizationId
                 * @property {string|null} [projectId] UpdateScheduleRequest projectId
                 * @property {colbylwilliams.teamcloud.v1.ISchedule|null} [schedule] UpdateScheduleRequest schedule
                 */

                /**
                 * Constructs a new UpdateScheduleRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents an UpdateScheduleRequest.
                 * @implements IUpdateScheduleRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IUpdateScheduleRequest=} [properties] Properties to set
                 */
                function UpdateScheduleRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateScheduleRequest scheduleId.
                 * @member {string} scheduleId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateScheduleRequest
                 * @instance
                 */
                UpdateScheduleRequest.prototype.scheduleId = "";

                /**
                 * UpdateScheduleRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateScheduleRequest
                 * @instance
                 */
                UpdateScheduleRequest.prototype.organizationId = "";

                /**
                 * UpdateScheduleRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.UpdateScheduleRequest
                 * @instance
                 */
                UpdateScheduleRequest.prototype.projectId = "";

                /**
                 * UpdateScheduleRequest schedule.
                 * @member {colbylwilliams.teamcloud.v1.ISchedule|null|undefined} schedule
                 * @memberof colbylwilliams.teamcloud.v1.UpdateScheduleRequest
                 * @instance
                 */
                UpdateScheduleRequest.prototype.schedule = null;

                /**
                 * Verifies an UpdateScheduleRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.UpdateScheduleRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateScheduleRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.scheduleId != null && message.hasOwnProperty("scheduleId"))
                        if (!$util.isString(message.scheduleId))
                            return "scheduleId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.schedule != null && message.hasOwnProperty("schedule")) {
                        let error = $root.colbylwilliams.teamcloud.v1.Schedule.verify(message.schedule);
                        if (error)
                            return "schedule." + error;
                    }
                    return null;
                };

                /**
                 * Creates an UpdateScheduleRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateScheduleRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.UpdateScheduleRequest} UpdateScheduleRequest
                 */
                UpdateScheduleRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.UpdateScheduleRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.UpdateScheduleRequest();
                    if (object.scheduleId != null)
                        message.scheduleId = String(object.scheduleId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.schedule != null) {
                        if (typeof object.schedule !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.UpdateScheduleRequest.schedule: object expected");
                        message.schedule = $root.colbylwilliams.teamcloud.v1.Schedule.fromObject(object.schedule);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an UpdateScheduleRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.UpdateScheduleRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.UpdateScheduleRequest} message UpdateScheduleRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateScheduleRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.scheduleId = "";
                        object.organizationId = "";
                        object.projectId = "";
                        object.schedule = null;
                    }
                    if (message.scheduleId != null && message.hasOwnProperty("scheduleId"))
                        object.scheduleId = message.scheduleId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.schedule != null && message.hasOwnProperty("schedule"))
                        object.schedule = $root.colbylwilliams.teamcloud.v1.Schedule.toObject(message.schedule, options);
                    return object;
                };

                /**
                 * Converts this UpdateScheduleRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.UpdateScheduleRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateScheduleRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return UpdateScheduleRequest;
            })();

            v1.StatusAPI = (function() {

                /**
                 * Constructs a new StatusAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a StatusAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function StatusAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (StatusAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = StatusAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.StatusAPI#getProjectStatus}.
                 * @memberof colbylwilliams.teamcloud.v1.StatusAPI
                 * @typedef GetProjectStatusCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} [response] StatusResult
                 */

                /**
                 * Calls GetProjectStatus.
                 * @function getProjectStatus
                 * @memberof colbylwilliams.teamcloud.v1.StatusAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectStatusRequest} request GetProjectStatusRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.StatusAPI.GetProjectStatusCallback} callback Node-style callback called with the error, if any, and StatusResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(StatusAPI.prototype.getProjectStatus = function getProjectStatus(request, callback) {
                    return this.rpcCall(getProjectStatus, $root.colbylwilliams.teamcloud.v1.GetProjectStatusRequest, $root.colbylwilliams.teamcloud.v1.StatusResult, request, callback);
                }, "name", { value: "GetProjectStatus" });

                /**
                 * Calls GetProjectStatus.
                 * @function getProjectStatus
                 * @memberof colbylwilliams.teamcloud.v1.StatusAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectStatusRequest} request GetProjectStatusRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StatusResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.StatusAPI#getStatus}.
                 * @memberof colbylwilliams.teamcloud.v1.StatusAPI
                 * @typedef GetStatusCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.StatusResult} [response] StatusResult
                 */

                /**
                 * Calls GetStatus.
                 * @function getStatus
                 * @memberof colbylwilliams.teamcloud.v1.StatusAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetStatusRequest} request GetStatusRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.StatusAPI.GetStatusCallback} callback Node-style callback called with the error, if any, and StatusResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(StatusAPI.prototype.getStatus = function getStatus(request, callback) {
                    return this.rpcCall(getStatus, $root.colbylwilliams.teamcloud.v1.GetStatusRequest, $root.colbylwilliams.teamcloud.v1.StatusResult, request, callback);
                }, "name", { value: "GetStatus" });

                /**
                 * Calls GetStatus.
                 * @function getStatus
                 * @memberof colbylwilliams.teamcloud.v1.StatusAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetStatusRequest} request GetStatusRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.StatusResult>} Promise
                 * @variation 2
                 */

                return StatusAPI;
            })();

            v1.GetProjectStatusRequest = (function() {

                /**
                 * Properties of a GetProjectStatusRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetProjectStatusRequest
                 * @property {string|null} [projectId] GetProjectStatusRequest projectId
                 * @property {string|null} [trackingId] GetProjectStatusRequest trackingId
                 * @property {string|null} [organizationId] GetProjectStatusRequest organizationId
                 */

                /**
                 * Constructs a new GetProjectStatusRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetProjectStatusRequest.
                 * @implements IGetProjectStatusRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetProjectStatusRequest=} [properties] Properties to set
                 */
                function GetProjectStatusRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetProjectStatusRequest projectId.
                 * @member {string} projectId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectStatusRequest
                 * @instance
                 */
                GetProjectStatusRequest.prototype.projectId = "";

                /**
                 * GetProjectStatusRequest trackingId.
                 * @member {string} trackingId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectStatusRequest
                 * @instance
                 */
                GetProjectStatusRequest.prototype.trackingId = "";

                /**
                 * GetProjectStatusRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectStatusRequest
                 * @instance
                 */
                GetProjectStatusRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetProjectStatusRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectStatusRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetProjectStatusRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.trackingId != null && message.hasOwnProperty("trackingId"))
                        if (!$util.isString(message.trackingId))
                            return "trackingId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetProjectStatusRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectStatusRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetProjectStatusRequest} GetProjectStatusRequest
                 */
                GetProjectStatusRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetProjectStatusRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetProjectStatusRequest();
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.trackingId != null)
                        message.trackingId = String(object.trackingId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetProjectStatusRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectStatusRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetProjectStatusRequest} message GetProjectStatusRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetProjectStatusRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.projectId = "";
                        object.trackingId = "";
                        object.organizationId = "";
                    }
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.trackingId != null && message.hasOwnProperty("trackingId"))
                        object.trackingId = message.trackingId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetProjectStatusRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetProjectStatusRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetProjectStatusRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetProjectStatusRequest;
            })();

            v1.GetStatusRequest = (function() {

                /**
                 * Properties of a GetStatusRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetStatusRequest
                 * @property {string|null} [trackingId] GetStatusRequest trackingId
                 * @property {string|null} [organizationId] GetStatusRequest organizationId
                 */

                /**
                 * Constructs a new GetStatusRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetStatusRequest.
                 * @implements IGetStatusRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetStatusRequest=} [properties] Properties to set
                 */
                function GetStatusRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetStatusRequest trackingId.
                 * @member {string} trackingId
                 * @memberof colbylwilliams.teamcloud.v1.GetStatusRequest
                 * @instance
                 */
                GetStatusRequest.prototype.trackingId = "";

                /**
                 * GetStatusRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetStatusRequest
                 * @instance
                 */
                GetStatusRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetStatusRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetStatusRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetStatusRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.trackingId != null && message.hasOwnProperty("trackingId"))
                        if (!$util.isString(message.trackingId))
                            return "trackingId: string expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetStatusRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetStatusRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetStatusRequest} GetStatusRequest
                 */
                GetStatusRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetStatusRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetStatusRequest();
                    if (object.trackingId != null)
                        message.trackingId = String(object.trackingId);
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetStatusRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetStatusRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetStatusRequest} message GetStatusRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetStatusRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.trackingId = "";
                        object.organizationId = "";
                    }
                    if (message.trackingId != null && message.hasOwnProperty("trackingId"))
                        object.trackingId = message.trackingId;
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetStatusRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetStatusRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetStatusRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetStatusRequest;
            })();

            v1.TeamCloudAPI = (function() {

                /**
                 * Constructs a new TeamCloudAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a TeamCloudAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function TeamCloudAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (TeamCloudAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TeamCloudAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.TeamCloudAPI#getTeamCloudInfo}.
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudAPI
                 * @typedef GetTeamCloudInfoCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse} [response] GetTeamCloudInfoResponse
                 */

                /**
                 * Calls GetTeamCloudInfo.
                 * @function getTeamCloudInfo
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetTeamCloudInfoRequest} request GetTeamCloudInfoRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.TeamCloudAPI.GetTeamCloudInfoCallback} callback Node-style callback called with the error, if any, and GetTeamCloudInfoResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(TeamCloudAPI.prototype.getTeamCloudInfo = function getTeamCloudInfo(request, callback) {
                    return this.rpcCall(getTeamCloudInfo, $root.colbylwilliams.teamcloud.v1.GetTeamCloudInfoRequest, $root.colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse, request, callback);
                }, "name", { value: "GetTeamCloudInfo" });

                /**
                 * Calls GetTeamCloudInfo.
                 * @function getTeamCloudInfo
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetTeamCloudInfoRequest} request GetTeamCloudInfoRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse>} Promise
                 * @variation 2
                 */

                return TeamCloudAPI;
            })();

            v1.GetTeamCloudInfoRequest = (function() {

                /**
                 * Properties of a GetTeamCloudInfoRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetTeamCloudInfoRequest
                 */

                /**
                 * Constructs a new GetTeamCloudInfoRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetTeamCloudInfoRequest.
                 * @implements IGetTeamCloudInfoRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetTeamCloudInfoRequest=} [properties] Properties to set
                 */
                function GetTeamCloudInfoRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Verifies a GetTeamCloudInfoRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetTeamCloudInfoRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetTeamCloudInfoRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a GetTeamCloudInfoRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetTeamCloudInfoRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetTeamCloudInfoRequest} GetTeamCloudInfoRequest
                 */
                GetTeamCloudInfoRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetTeamCloudInfoRequest)
                        return object;
                    return new $root.colbylwilliams.teamcloud.v1.GetTeamCloudInfoRequest();
                };

                /**
                 * Creates a plain object from a GetTeamCloudInfoRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetTeamCloudInfoRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetTeamCloudInfoRequest} message GetTeamCloudInfoRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetTeamCloudInfoRequest.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this GetTeamCloudInfoRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetTeamCloudInfoRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetTeamCloudInfoRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetTeamCloudInfoRequest;
            })();

            v1.GetTeamCloudInfoResponse = (function() {

                /**
                 * Properties of a GetTeamCloudInfoResponse.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetTeamCloudInfoResponse
                 * @property {number|null} [code] GetTeamCloudInfoResponse code
                 * @property {string|null} [status] GetTeamCloudInfoResponse status
                 * @property {colbylwilliams.teamcloud.v1.ITeamCloudInfoData|null} [data] GetTeamCloudInfoResponse data
                 */

                /**
                 * Constructs a new GetTeamCloudInfoResponse.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetTeamCloudInfoResponse.
                 * @implements IGetTeamCloudInfoResponse
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetTeamCloudInfoResponse=} [properties] Properties to set
                 */
                function GetTeamCloudInfoResponse(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetTeamCloudInfoResponse code.
                 * @member {number} code
                 * @memberof colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse
                 * @instance
                 */
                GetTeamCloudInfoResponse.prototype.code = 0;

                /**
                 * GetTeamCloudInfoResponse status.
                 * @member {string} status
                 * @memberof colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse
                 * @instance
                 */
                GetTeamCloudInfoResponse.prototype.status = "";

                /**
                 * GetTeamCloudInfoResponse data.
                 * @member {colbylwilliams.teamcloud.v1.ITeamCloudInfoData|null|undefined} data
                 * @memberof colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse
                 * @instance
                 */
                GetTeamCloudInfoResponse.prototype.data = null;

                /**
                 * Verifies a GetTeamCloudInfoResponse message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetTeamCloudInfoResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.status != null && message.hasOwnProperty("status"))
                        if (!$util.isString(message.status))
                            return "status: string expected";
                    if (message.data != null && message.hasOwnProperty("data")) {
                        let error = $root.colbylwilliams.teamcloud.v1.TeamCloudInfoData.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                    return null;
                };

                /**
                 * Creates a GetTeamCloudInfoResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse} GetTeamCloudInfoResponse
                 */
                GetTeamCloudInfoResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.status != null)
                        message.status = String(object.status);
                    if (object.data != null) {
                        if (typeof object.data !== "object")
                            throw TypeError(".colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse.data: object expected");
                        message.data = $root.colbylwilliams.teamcloud.v1.TeamCloudInfoData.fromObject(object.data);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GetTeamCloudInfoResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse} message GetTeamCloudInfoResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetTeamCloudInfoResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.status = "";
                        object.data = null;
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.status != null && message.hasOwnProperty("status"))
                        object.status = message.status;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = $root.colbylwilliams.teamcloud.v1.TeamCloudInfoData.toObject(message.data, options);
                    return object;
                };

                /**
                 * Converts this GetTeamCloudInfoResponse to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetTeamCloudInfoResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetTeamCloudInfoResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetTeamCloudInfoResponse;
            })();

            v1.TeamCloudInfoData = (function() {

                /**
                 * Properties of a TeamCloudInfoData.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface ITeamCloudInfoData
                 * @property {string|null} [imageVersion] TeamCloudInfoData imageVersion
                 * @property {string|null} [templateVersion] TeamCloudInfoData templateVersion
                 */

                /**
                 * Constructs a new TeamCloudInfoData.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a TeamCloudInfoData.
                 * @implements ITeamCloudInfoData
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.ITeamCloudInfoData=} [properties] Properties to set
                 */
                function TeamCloudInfoData(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TeamCloudInfoData imageVersion.
                 * @member {string} imageVersion
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInfoData
                 * @instance
                 */
                TeamCloudInfoData.prototype.imageVersion = "";

                /**
                 * TeamCloudInfoData templateVersion.
                 * @member {string} templateVersion
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInfoData
                 * @instance
                 */
                TeamCloudInfoData.prototype.templateVersion = "";

                /**
                 * Verifies a TeamCloudInfoData message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInfoData
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TeamCloudInfoData.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.imageVersion != null && message.hasOwnProperty("imageVersion"))
                        if (!$util.isString(message.imageVersion))
                            return "imageVersion: string expected";
                    if (message.templateVersion != null && message.hasOwnProperty("templateVersion"))
                        if (!$util.isString(message.templateVersion))
                            return "templateVersion: string expected";
                    return null;
                };

                /**
                 * Creates a TeamCloudInfoData message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInfoData
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.TeamCloudInfoData} TeamCloudInfoData
                 */
                TeamCloudInfoData.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.TeamCloudInfoData)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.TeamCloudInfoData();
                    if (object.imageVersion != null)
                        message.imageVersion = String(object.imageVersion);
                    if (object.templateVersion != null)
                        message.templateVersion = String(object.templateVersion);
                    return message;
                };

                /**
                 * Creates a plain object from a TeamCloudInfoData message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInfoData
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.TeamCloudInfoData} message TeamCloudInfoData
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TeamCloudInfoData.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.imageVersion = "";
                        object.templateVersion = "";
                    }
                    if (message.imageVersion != null && message.hasOwnProperty("imageVersion"))
                        object.imageVersion = message.imageVersion;
                    if (message.templateVersion != null && message.hasOwnProperty("templateVersion"))
                        object.templateVersion = message.templateVersion;
                    return object;
                };

                /**
                 * Converts this TeamCloudInfoData to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.TeamCloudInfoData
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TeamCloudInfoData.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return TeamCloudInfoData;
            })();

            v1.UserProjectsAPI = (function() {

                /**
                 * Constructs a new UserProjectsAPI service.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a UserProjectsAPI
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function UserProjectsAPI(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (UserProjectsAPI.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = UserProjectsAPI;

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.UserProjectsAPI#getUserProjects}.
                 * @memberof colbylwilliams.teamcloud.v1.UserProjectsAPI
                 * @typedef GetUserProjectsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectListDataResult} [response] ProjectListDataResult
                 */

                /**
                 * Calls GetUserProjects.
                 * @function getUserProjects
                 * @memberof colbylwilliams.teamcloud.v1.UserProjectsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetUserProjectsRequest} request GetUserProjectsRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.UserProjectsAPI.GetUserProjectsCallback} callback Node-style callback called with the error, if any, and ProjectListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(UserProjectsAPI.prototype.getUserProjects = function getUserProjects(request, callback) {
                    return this.rpcCall(getUserProjects, $root.colbylwilliams.teamcloud.v1.GetUserProjectsRequest, $root.colbylwilliams.teamcloud.v1.ProjectListDataResult, request, callback);
                }, "name", { value: "GetUserProjects" });

                /**
                 * Calls GetUserProjects.
                 * @function getUserProjects
                 * @memberof colbylwilliams.teamcloud.v1.UserProjectsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetUserProjectsRequest} request GetUserProjectsRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectListDataResult>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link colbylwilliams.teamcloud.v1.UserProjectsAPI#getUserProjectsMe}.
                 * @memberof colbylwilliams.teamcloud.v1.UserProjectsAPI
                 * @typedef GetUserProjectsMeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {colbylwilliams.teamcloud.v1.ProjectListDataResult} [response] ProjectListDataResult
                 */

                /**
                 * Calls GetUserProjectsMe.
                 * @function getUserProjectsMe
                 * @memberof colbylwilliams.teamcloud.v1.UserProjectsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetUserProjectsMeRequest} request GetUserProjectsMeRequest message or plain object
                 * @param {colbylwilliams.teamcloud.v1.UserProjectsAPI.GetUserProjectsMeCallback} callback Node-style callback called with the error, if any, and ProjectListDataResult
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(UserProjectsAPI.prototype.getUserProjectsMe = function getUserProjectsMe(request, callback) {
                    return this.rpcCall(getUserProjectsMe, $root.colbylwilliams.teamcloud.v1.GetUserProjectsMeRequest, $root.colbylwilliams.teamcloud.v1.ProjectListDataResult, request, callback);
                }, "name", { value: "GetUserProjectsMe" });

                /**
                 * Calls GetUserProjectsMe.
                 * @function getUserProjectsMe
                 * @memberof colbylwilliams.teamcloud.v1.UserProjectsAPI
                 * @instance
                 * @param {colbylwilliams.teamcloud.v1.IGetUserProjectsMeRequest} request GetUserProjectsMeRequest message or plain object
                 * @returns {Promise<colbylwilliams.teamcloud.v1.ProjectListDataResult>} Promise
                 * @variation 2
                 */

                return UserProjectsAPI;
            })();

            v1.GetUserProjectsRequest = (function() {

                /**
                 * Properties of a GetUserProjectsRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetUserProjectsRequest
                 * @property {string|null} [organizationId] GetUserProjectsRequest organizationId
                 * @property {string|null} [userId] GetUserProjectsRequest userId
                 */

                /**
                 * Constructs a new GetUserProjectsRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetUserProjectsRequest.
                 * @implements IGetUserProjectsRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetUserProjectsRequest=} [properties] Properties to set
                 */
                function GetUserProjectsRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetUserProjectsRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetUserProjectsRequest
                 * @instance
                 */
                GetUserProjectsRequest.prototype.organizationId = "";

                /**
                 * GetUserProjectsRequest userId.
                 * @member {string} userId
                 * @memberof colbylwilliams.teamcloud.v1.GetUserProjectsRequest
                 * @instance
                 */
                GetUserProjectsRequest.prototype.userId = "";

                /**
                 * Verifies a GetUserProjectsRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetUserProjectsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetUserProjectsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        if (!$util.isString(message.userId))
                            return "userId: string expected";
                    return null;
                };

                /**
                 * Creates a GetUserProjectsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetUserProjectsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetUserProjectsRequest} GetUserProjectsRequest
                 */
                GetUserProjectsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetUserProjectsRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetUserProjectsRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    if (object.userId != null)
                        message.userId = String(object.userId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetUserProjectsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetUserProjectsRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetUserProjectsRequest} message GetUserProjectsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetUserProjectsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.organizationId = "";
                        object.userId = "";
                    }
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        object.userId = message.userId;
                    return object;
                };

                /**
                 * Converts this GetUserProjectsRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetUserProjectsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetUserProjectsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetUserProjectsRequest;
            })();

            v1.GetUserProjectsMeRequest = (function() {

                /**
                 * Properties of a GetUserProjectsMeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @interface IGetUserProjectsMeRequest
                 * @property {string|null} [organizationId] GetUserProjectsMeRequest organizationId
                 */

                /**
                 * Constructs a new GetUserProjectsMeRequest.
                 * @memberof colbylwilliams.teamcloud.v1
                 * @classdesc Represents a GetUserProjectsMeRequest.
                 * @implements IGetUserProjectsMeRequest
                 * @constructor
                 * @param {colbylwilliams.teamcloud.v1.IGetUserProjectsMeRequest=} [properties] Properties to set
                 */
                function GetUserProjectsMeRequest(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GetUserProjectsMeRequest organizationId.
                 * @member {string} organizationId
                 * @memberof colbylwilliams.teamcloud.v1.GetUserProjectsMeRequest
                 * @instance
                 */
                GetUserProjectsMeRequest.prototype.organizationId = "";

                /**
                 * Verifies a GetUserProjectsMeRequest message.
                 * @function verify
                 * @memberof colbylwilliams.teamcloud.v1.GetUserProjectsMeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetUserProjectsMeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        if (!$util.isString(message.organizationId))
                            return "organizationId: string expected";
                    return null;
                };

                /**
                 * Creates a GetUserProjectsMeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof colbylwilliams.teamcloud.v1.GetUserProjectsMeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {colbylwilliams.teamcloud.v1.GetUserProjectsMeRequest} GetUserProjectsMeRequest
                 */
                GetUserProjectsMeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.colbylwilliams.teamcloud.v1.GetUserProjectsMeRequest)
                        return object;
                    let message = new $root.colbylwilliams.teamcloud.v1.GetUserProjectsMeRequest();
                    if (object.organizationId != null)
                        message.organizationId = String(object.organizationId);
                    return message;
                };

                /**
                 * Creates a plain object from a GetUserProjectsMeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof colbylwilliams.teamcloud.v1.GetUserProjectsMeRequest
                 * @static
                 * @param {colbylwilliams.teamcloud.v1.GetUserProjectsMeRequest} message GetUserProjectsMeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetUserProjectsMeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.organizationId = "";
                    if (message.organizationId != null && message.hasOwnProperty("organizationId"))
                        object.organizationId = message.organizationId;
                    return object;
                };

                /**
                 * Converts this GetUserProjectsMeRequest to JSON.
                 * @function toJSON
                 * @memberof colbylwilliams.teamcloud.v1.GetUserProjectsMeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetUserProjectsMeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GetUserProjectsMeRequest;
            })();

            return v1;
        })();

        return teamcloud;
    })();

    return colbylwilliams;
})();

export const validate = $root.validate = (() => {

    /**
     * Namespace validate.
     * @exports validate
     * @namespace
     */
    const validate = {};

    validate.FieldRules = (function() {

        /**
         * Properties of a FieldRules.
         * @memberof validate
         * @interface IFieldRules
         * @property {validate.IMessageRules|null} [message] FieldRules message
         * @property {validate.IFloatRules|null} [float] FieldRules float
         * @property {validate.IDoubleRules|null} [double] FieldRules double
         * @property {validate.IInt32Rules|null} [int32] FieldRules int32
         * @property {validate.IInt64Rules|null} [int64] FieldRules int64
         * @property {validate.IUInt32Rules|null} [uint32] FieldRules uint32
         * @property {validate.IUInt64Rules|null} [uint64] FieldRules uint64
         * @property {validate.ISInt32Rules|null} [sint32] FieldRules sint32
         * @property {validate.ISInt64Rules|null} [sint64] FieldRules sint64
         * @property {validate.IFixed32Rules|null} [fixed32] FieldRules fixed32
         * @property {validate.IFixed64Rules|null} [fixed64] FieldRules fixed64
         * @property {validate.ISFixed32Rules|null} [sfixed32] FieldRules sfixed32
         * @property {validate.ISFixed64Rules|null} [sfixed64] FieldRules sfixed64
         * @property {validate.IBoolRules|null} [bool] FieldRules bool
         * @property {validate.IStringRules|null} [string] FieldRules string
         * @property {validate.IBytesRules|null} [bytes] FieldRules bytes
         * @property {validate.IEnumRules|null} ["enum"] FieldRules enum
         * @property {validate.IRepeatedRules|null} [repeated] FieldRules repeated
         * @property {validate.IMapRules|null} [map] FieldRules map
         * @property {validate.IAnyRules|null} [any] FieldRules any
         * @property {validate.IDurationRules|null} [duration] FieldRules duration
         * @property {validate.ITimestampRules|null} [timestamp] FieldRules timestamp
         */

        /**
         * Constructs a new FieldRules.
         * @memberof validate
         * @classdesc Represents a FieldRules.
         * @implements IFieldRules
         * @constructor
         * @param {validate.IFieldRules=} [properties] Properties to set
         */
        function FieldRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FieldRules message.
         * @member {validate.IMessageRules|null|undefined} message
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.message = null;

        /**
         * FieldRules float.
         * @member {validate.IFloatRules|null|undefined} float
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.float = null;

        /**
         * FieldRules double.
         * @member {validate.IDoubleRules|null|undefined} double
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.double = null;

        /**
         * FieldRules int32.
         * @member {validate.IInt32Rules|null|undefined} int32
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.int32 = null;

        /**
         * FieldRules int64.
         * @member {validate.IInt64Rules|null|undefined} int64
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.int64 = null;

        /**
         * FieldRules uint32.
         * @member {validate.IUInt32Rules|null|undefined} uint32
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.uint32 = null;

        /**
         * FieldRules uint64.
         * @member {validate.IUInt64Rules|null|undefined} uint64
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.uint64 = null;

        /**
         * FieldRules sint32.
         * @member {validate.ISInt32Rules|null|undefined} sint32
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.sint32 = null;

        /**
         * FieldRules sint64.
         * @member {validate.ISInt64Rules|null|undefined} sint64
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.sint64 = null;

        /**
         * FieldRules fixed32.
         * @member {validate.IFixed32Rules|null|undefined} fixed32
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.fixed32 = null;

        /**
         * FieldRules fixed64.
         * @member {validate.IFixed64Rules|null|undefined} fixed64
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.fixed64 = null;

        /**
         * FieldRules sfixed32.
         * @member {validate.ISFixed32Rules|null|undefined} sfixed32
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.sfixed32 = null;

        /**
         * FieldRules sfixed64.
         * @member {validate.ISFixed64Rules|null|undefined} sfixed64
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.sfixed64 = null;

        /**
         * FieldRules bool.
         * @member {validate.IBoolRules|null|undefined} bool
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.bool = null;

        /**
         * FieldRules string.
         * @member {validate.IStringRules|null|undefined} string
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.string = null;

        /**
         * FieldRules bytes.
         * @member {validate.IBytesRules|null|undefined} bytes
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.bytes = null;

        /**
         * FieldRules enum.
         * @member {validate.IEnumRules|null|undefined} enum
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype["enum"] = null;

        /**
         * FieldRules repeated.
         * @member {validate.IRepeatedRules|null|undefined} repeated
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.repeated = null;

        /**
         * FieldRules map.
         * @member {validate.IMapRules|null|undefined} map
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.map = null;

        /**
         * FieldRules any.
         * @member {validate.IAnyRules|null|undefined} any
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.any = null;

        /**
         * FieldRules duration.
         * @member {validate.IDurationRules|null|undefined} duration
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.duration = null;

        /**
         * FieldRules timestamp.
         * @member {validate.ITimestampRules|null|undefined} timestamp
         * @memberof validate.FieldRules
         * @instance
         */
        FieldRules.prototype.timestamp = null;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * FieldRules type.
         * @member {"float"|"double"|"int32"|"int64"|"uint32"|"uint64"|"sint32"|"sint64"|"fixed32"|"fixed64"|"sfixed32"|"sfixed64"|"bool"|"string"|"bytes"|"enum"|"repeated"|"map"|"any"|"duration"|"timestamp"|undefined} type
         * @memberof validate.FieldRules
         * @instance
         */
        Object.defineProperty(FieldRules.prototype, "type", {
            get: $util.oneOfGetter($oneOfFields = ["float", "double", "int32", "int64", "uint32", "uint64", "sint32", "sint64", "fixed32", "fixed64", "sfixed32", "sfixed64", "bool", "string", "bytes", "enum", "repeated", "map", "any", "duration", "timestamp"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Verifies a FieldRules message.
         * @function verify
         * @memberof validate.FieldRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FieldRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            let properties = {};
            if (message.message != null && message.hasOwnProperty("message")) {
                let error = $root.validate.MessageRules.verify(message.message);
                if (error)
                    return "message." + error;
            }
            if (message.float != null && message.hasOwnProperty("float")) {
                properties.type = 1;
                {
                    let error = $root.validate.FloatRules.verify(message.float);
                    if (error)
                        return "float." + error;
                }
            }
            if (message.double != null && message.hasOwnProperty("double")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.DoubleRules.verify(message.double);
                    if (error)
                        return "double." + error;
                }
            }
            if (message.int32 != null && message.hasOwnProperty("int32")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.Int32Rules.verify(message.int32);
                    if (error)
                        return "int32." + error;
                }
            }
            if (message.int64 != null && message.hasOwnProperty("int64")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.Int64Rules.verify(message.int64);
                    if (error)
                        return "int64." + error;
                }
            }
            if (message.uint32 != null && message.hasOwnProperty("uint32")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.UInt32Rules.verify(message.uint32);
                    if (error)
                        return "uint32." + error;
                }
            }
            if (message.uint64 != null && message.hasOwnProperty("uint64")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.UInt64Rules.verify(message.uint64);
                    if (error)
                        return "uint64." + error;
                }
            }
            if (message.sint32 != null && message.hasOwnProperty("sint32")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.SInt32Rules.verify(message.sint32);
                    if (error)
                        return "sint32." + error;
                }
            }
            if (message.sint64 != null && message.hasOwnProperty("sint64")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.SInt64Rules.verify(message.sint64);
                    if (error)
                        return "sint64." + error;
                }
            }
            if (message.fixed32 != null && message.hasOwnProperty("fixed32")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.Fixed32Rules.verify(message.fixed32);
                    if (error)
                        return "fixed32." + error;
                }
            }
            if (message.fixed64 != null && message.hasOwnProperty("fixed64")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.Fixed64Rules.verify(message.fixed64);
                    if (error)
                        return "fixed64." + error;
                }
            }
            if (message.sfixed32 != null && message.hasOwnProperty("sfixed32")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.SFixed32Rules.verify(message.sfixed32);
                    if (error)
                        return "sfixed32." + error;
                }
            }
            if (message.sfixed64 != null && message.hasOwnProperty("sfixed64")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.SFixed64Rules.verify(message.sfixed64);
                    if (error)
                        return "sfixed64." + error;
                }
            }
            if (message.bool != null && message.hasOwnProperty("bool")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.BoolRules.verify(message.bool);
                    if (error)
                        return "bool." + error;
                }
            }
            if (message.string != null && message.hasOwnProperty("string")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.StringRules.verify(message.string);
                    if (error)
                        return "string." + error;
                }
            }
            if (message.bytes != null && message.hasOwnProperty("bytes")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.BytesRules.verify(message.bytes);
                    if (error)
                        return "bytes." + error;
                }
            }
            if (message["enum"] != null && message.hasOwnProperty("enum")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.EnumRules.verify(message["enum"]);
                    if (error)
                        return "enum." + error;
                }
            }
            if (message.repeated != null && message.hasOwnProperty("repeated")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.RepeatedRules.verify(message.repeated);
                    if (error)
                        return "repeated." + error;
                }
            }
            if (message.map != null && message.hasOwnProperty("map")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.MapRules.verify(message.map);
                    if (error)
                        return "map." + error;
                }
            }
            if (message.any != null && message.hasOwnProperty("any")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.AnyRules.verify(message.any);
                    if (error)
                        return "any." + error;
                }
            }
            if (message.duration != null && message.hasOwnProperty("duration")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.DurationRules.verify(message.duration);
                    if (error)
                        return "duration." + error;
                }
            }
            if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                if (properties.type === 1)
                    return "type: multiple values";
                properties.type = 1;
                {
                    let error = $root.validate.TimestampRules.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
            }
            return null;
        };

        /**
         * Creates a FieldRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.FieldRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.FieldRules} FieldRules
         */
        FieldRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.FieldRules)
                return object;
            let message = new $root.validate.FieldRules();
            if (object.message != null) {
                if (typeof object.message !== "object")
                    throw TypeError(".validate.FieldRules.message: object expected");
                message.message = $root.validate.MessageRules.fromObject(object.message);
            }
            if (object.float != null) {
                if (typeof object.float !== "object")
                    throw TypeError(".validate.FieldRules.float: object expected");
                message.float = $root.validate.FloatRules.fromObject(object.float);
            }
            if (object.double != null) {
                if (typeof object.double !== "object")
                    throw TypeError(".validate.FieldRules.double: object expected");
                message.double = $root.validate.DoubleRules.fromObject(object.double);
            }
            if (object.int32 != null) {
                if (typeof object.int32 !== "object")
                    throw TypeError(".validate.FieldRules.int32: object expected");
                message.int32 = $root.validate.Int32Rules.fromObject(object.int32);
            }
            if (object.int64 != null) {
                if (typeof object.int64 !== "object")
                    throw TypeError(".validate.FieldRules.int64: object expected");
                message.int64 = $root.validate.Int64Rules.fromObject(object.int64);
            }
            if (object.uint32 != null) {
                if (typeof object.uint32 !== "object")
                    throw TypeError(".validate.FieldRules.uint32: object expected");
                message.uint32 = $root.validate.UInt32Rules.fromObject(object.uint32);
            }
            if (object.uint64 != null) {
                if (typeof object.uint64 !== "object")
                    throw TypeError(".validate.FieldRules.uint64: object expected");
                message.uint64 = $root.validate.UInt64Rules.fromObject(object.uint64);
            }
            if (object.sint32 != null) {
                if (typeof object.sint32 !== "object")
                    throw TypeError(".validate.FieldRules.sint32: object expected");
                message.sint32 = $root.validate.SInt32Rules.fromObject(object.sint32);
            }
            if (object.sint64 != null) {
                if (typeof object.sint64 !== "object")
                    throw TypeError(".validate.FieldRules.sint64: object expected");
                message.sint64 = $root.validate.SInt64Rules.fromObject(object.sint64);
            }
            if (object.fixed32 != null) {
                if (typeof object.fixed32 !== "object")
                    throw TypeError(".validate.FieldRules.fixed32: object expected");
                message.fixed32 = $root.validate.Fixed32Rules.fromObject(object.fixed32);
            }
            if (object.fixed64 != null) {
                if (typeof object.fixed64 !== "object")
                    throw TypeError(".validate.FieldRules.fixed64: object expected");
                message.fixed64 = $root.validate.Fixed64Rules.fromObject(object.fixed64);
            }
            if (object.sfixed32 != null) {
                if (typeof object.sfixed32 !== "object")
                    throw TypeError(".validate.FieldRules.sfixed32: object expected");
                message.sfixed32 = $root.validate.SFixed32Rules.fromObject(object.sfixed32);
            }
            if (object.sfixed64 != null) {
                if (typeof object.sfixed64 !== "object")
                    throw TypeError(".validate.FieldRules.sfixed64: object expected");
                message.sfixed64 = $root.validate.SFixed64Rules.fromObject(object.sfixed64);
            }
            if (object.bool != null) {
                if (typeof object.bool !== "object")
                    throw TypeError(".validate.FieldRules.bool: object expected");
                message.bool = $root.validate.BoolRules.fromObject(object.bool);
            }
            if (object.string != null) {
                if (typeof object.string !== "object")
                    throw TypeError(".validate.FieldRules.string: object expected");
                message.string = $root.validate.StringRules.fromObject(object.string);
            }
            if (object.bytes != null) {
                if (typeof object.bytes !== "object")
                    throw TypeError(".validate.FieldRules.bytes: object expected");
                message.bytes = $root.validate.BytesRules.fromObject(object.bytes);
            }
            if (object["enum"] != null) {
                if (typeof object["enum"] !== "object")
                    throw TypeError(".validate.FieldRules.enum: object expected");
                message["enum"] = $root.validate.EnumRules.fromObject(object["enum"]);
            }
            if (object.repeated != null) {
                if (typeof object.repeated !== "object")
                    throw TypeError(".validate.FieldRules.repeated: object expected");
                message.repeated = $root.validate.RepeatedRules.fromObject(object.repeated);
            }
            if (object.map != null) {
                if (typeof object.map !== "object")
                    throw TypeError(".validate.FieldRules.map: object expected");
                message.map = $root.validate.MapRules.fromObject(object.map);
            }
            if (object.any != null) {
                if (typeof object.any !== "object")
                    throw TypeError(".validate.FieldRules.any: object expected");
                message.any = $root.validate.AnyRules.fromObject(object.any);
            }
            if (object.duration != null) {
                if (typeof object.duration !== "object")
                    throw TypeError(".validate.FieldRules.duration: object expected");
                message.duration = $root.validate.DurationRules.fromObject(object.duration);
            }
            if (object.timestamp != null) {
                if (typeof object.timestamp !== "object")
                    throw TypeError(".validate.FieldRules.timestamp: object expected");
                message.timestamp = $root.validate.TimestampRules.fromObject(object.timestamp);
            }
            return message;
        };

        /**
         * Creates a plain object from a FieldRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.FieldRules
         * @static
         * @param {validate.FieldRules} message FieldRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FieldRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults)
                object.message = null;
            if (message.float != null && message.hasOwnProperty("float")) {
                object.float = $root.validate.FloatRules.toObject(message.float, options);
                if (options.oneofs)
                    object.type = "float";
            }
            if (message.double != null && message.hasOwnProperty("double")) {
                object.double = $root.validate.DoubleRules.toObject(message.double, options);
                if (options.oneofs)
                    object.type = "double";
            }
            if (message.int32 != null && message.hasOwnProperty("int32")) {
                object.int32 = $root.validate.Int32Rules.toObject(message.int32, options);
                if (options.oneofs)
                    object.type = "int32";
            }
            if (message.int64 != null && message.hasOwnProperty("int64")) {
                object.int64 = $root.validate.Int64Rules.toObject(message.int64, options);
                if (options.oneofs)
                    object.type = "int64";
            }
            if (message.uint32 != null && message.hasOwnProperty("uint32")) {
                object.uint32 = $root.validate.UInt32Rules.toObject(message.uint32, options);
                if (options.oneofs)
                    object.type = "uint32";
            }
            if (message.uint64 != null && message.hasOwnProperty("uint64")) {
                object.uint64 = $root.validate.UInt64Rules.toObject(message.uint64, options);
                if (options.oneofs)
                    object.type = "uint64";
            }
            if (message.sint32 != null && message.hasOwnProperty("sint32")) {
                object.sint32 = $root.validate.SInt32Rules.toObject(message.sint32, options);
                if (options.oneofs)
                    object.type = "sint32";
            }
            if (message.sint64 != null && message.hasOwnProperty("sint64")) {
                object.sint64 = $root.validate.SInt64Rules.toObject(message.sint64, options);
                if (options.oneofs)
                    object.type = "sint64";
            }
            if (message.fixed32 != null && message.hasOwnProperty("fixed32")) {
                object.fixed32 = $root.validate.Fixed32Rules.toObject(message.fixed32, options);
                if (options.oneofs)
                    object.type = "fixed32";
            }
            if (message.fixed64 != null && message.hasOwnProperty("fixed64")) {
                object.fixed64 = $root.validate.Fixed64Rules.toObject(message.fixed64, options);
                if (options.oneofs)
                    object.type = "fixed64";
            }
            if (message.sfixed32 != null && message.hasOwnProperty("sfixed32")) {
                object.sfixed32 = $root.validate.SFixed32Rules.toObject(message.sfixed32, options);
                if (options.oneofs)
                    object.type = "sfixed32";
            }
            if (message.sfixed64 != null && message.hasOwnProperty("sfixed64")) {
                object.sfixed64 = $root.validate.SFixed64Rules.toObject(message.sfixed64, options);
                if (options.oneofs)
                    object.type = "sfixed64";
            }
            if (message.bool != null && message.hasOwnProperty("bool")) {
                object.bool = $root.validate.BoolRules.toObject(message.bool, options);
                if (options.oneofs)
                    object.type = "bool";
            }
            if (message.string != null && message.hasOwnProperty("string")) {
                object.string = $root.validate.StringRules.toObject(message.string, options);
                if (options.oneofs)
                    object.type = "string";
            }
            if (message.bytes != null && message.hasOwnProperty("bytes")) {
                object.bytes = $root.validate.BytesRules.toObject(message.bytes, options);
                if (options.oneofs)
                    object.type = "bytes";
            }
            if (message["enum"] != null && message.hasOwnProperty("enum")) {
                object["enum"] = $root.validate.EnumRules.toObject(message["enum"], options);
                if (options.oneofs)
                    object.type = "enum";
            }
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = $root.validate.MessageRules.toObject(message.message, options);
            if (message.repeated != null && message.hasOwnProperty("repeated")) {
                object.repeated = $root.validate.RepeatedRules.toObject(message.repeated, options);
                if (options.oneofs)
                    object.type = "repeated";
            }
            if (message.map != null && message.hasOwnProperty("map")) {
                object.map = $root.validate.MapRules.toObject(message.map, options);
                if (options.oneofs)
                    object.type = "map";
            }
            if (message.any != null && message.hasOwnProperty("any")) {
                object.any = $root.validate.AnyRules.toObject(message.any, options);
                if (options.oneofs)
                    object.type = "any";
            }
            if (message.duration != null && message.hasOwnProperty("duration")) {
                object.duration = $root.validate.DurationRules.toObject(message.duration, options);
                if (options.oneofs)
                    object.type = "duration";
            }
            if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                object.timestamp = $root.validate.TimestampRules.toObject(message.timestamp, options);
                if (options.oneofs)
                    object.type = "timestamp";
            }
            return object;
        };

        /**
         * Converts this FieldRules to JSON.
         * @function toJSON
         * @memberof validate.FieldRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FieldRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FieldRules;
    })();

    validate.FloatRules = (function() {

        /**
         * Properties of a FloatRules.
         * @memberof validate
         * @interface IFloatRules
         * @property {number|null} ["const"] FloatRules const
         * @property {number|null} [lt] FloatRules lt
         * @property {number|null} [lte] FloatRules lte
         * @property {number|null} [gt] FloatRules gt
         * @property {number|null} [gte] FloatRules gte
         * @property {Array.<number>|null} ["in"] FloatRules in
         * @property {Array.<number>|null} [notIn] FloatRules notIn
         * @property {boolean|null} [ignoreEmpty] FloatRules ignoreEmpty
         */

        /**
         * Constructs a new FloatRules.
         * @memberof validate
         * @classdesc Represents a FloatRules.
         * @implements IFloatRules
         * @constructor
         * @param {validate.IFloatRules=} [properties] Properties to set
         */
        function FloatRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FloatRules const.
         * @member {number} const
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype["const"] = 0;

        /**
         * FloatRules lt.
         * @member {number} lt
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.lt = 0;

        /**
         * FloatRules lte.
         * @member {number} lte
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.lte = 0;

        /**
         * FloatRules gt.
         * @member {number} gt
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.gt = 0;

        /**
         * FloatRules gte.
         * @member {number} gte
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.gte = 0;

        /**
         * FloatRules in.
         * @member {Array.<number>} in
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype["in"] = $util.emptyArray;

        /**
         * FloatRules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.notIn = $util.emptyArray;

        /**
         * FloatRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.FloatRules
         * @instance
         */
        FloatRules.prototype.ignoreEmpty = false;

        /**
         * Verifies a FloatRules message.
         * @function verify
         * @memberof validate.FloatRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FloatRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] !== "number")
                    return "const: number expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt !== "number")
                    return "lt: number expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte !== "number")
                    return "lte: number expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt !== "number")
                    return "gt: number expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte !== "number")
                    return "gte: number expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (typeof message["in"][i] !== "number")
                        return "in: number[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (typeof message.notIn[i] !== "number")
                        return "notIn: number[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a FloatRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.FloatRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.FloatRules} FloatRules
         */
        FloatRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.FloatRules)
                return object;
            let message = new $root.validate.FloatRules();
            if (object["const"] != null)
                message["const"] = Number(object["const"]);
            if (object.lt != null)
                message.lt = Number(object.lt);
            if (object.lte != null)
                message.lte = Number(object.lte);
            if (object.gt != null)
                message.gt = Number(object.gt);
            if (object.gte != null)
                message.gte = Number(object.gte);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.FloatRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = Number(object["in"][i]);
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.FloatRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = Number(object.notIn[i]);
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a FloatRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.FloatRules
         * @static
         * @param {validate.FloatRules} message FloatRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FloatRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = options.json && !isFinite(message["const"]) ? String(message["const"]) : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = options.json && !isFinite(message.lt) ? String(message.lt) : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = options.json && !isFinite(message.lte) ? String(message.lte) : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = options.json && !isFinite(message.gt) ? String(message.gt) : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = options.json && !isFinite(message.gte) ? String(message.gte) : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = options.json && !isFinite(message["in"][j]) ? String(message["in"][j]) : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = options.json && !isFinite(message.notIn[j]) ? String(message.notIn[j]) : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this FloatRules to JSON.
         * @function toJSON
         * @memberof validate.FloatRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FloatRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FloatRules;
    })();

    validate.DoubleRules = (function() {

        /**
         * Properties of a DoubleRules.
         * @memberof validate
         * @interface IDoubleRules
         * @property {number|null} ["const"] DoubleRules const
         * @property {number|null} [lt] DoubleRules lt
         * @property {number|null} [lte] DoubleRules lte
         * @property {number|null} [gt] DoubleRules gt
         * @property {number|null} [gte] DoubleRules gte
         * @property {Array.<number>|null} ["in"] DoubleRules in
         * @property {Array.<number>|null} [notIn] DoubleRules notIn
         * @property {boolean|null} [ignoreEmpty] DoubleRules ignoreEmpty
         */

        /**
         * Constructs a new DoubleRules.
         * @memberof validate
         * @classdesc Represents a DoubleRules.
         * @implements IDoubleRules
         * @constructor
         * @param {validate.IDoubleRules=} [properties] Properties to set
         */
        function DoubleRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DoubleRules const.
         * @member {number} const
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype["const"] = 0;

        /**
         * DoubleRules lt.
         * @member {number} lt
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.lt = 0;

        /**
         * DoubleRules lte.
         * @member {number} lte
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.lte = 0;

        /**
         * DoubleRules gt.
         * @member {number} gt
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.gt = 0;

        /**
         * DoubleRules gte.
         * @member {number} gte
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.gte = 0;

        /**
         * DoubleRules in.
         * @member {Array.<number>} in
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype["in"] = $util.emptyArray;

        /**
         * DoubleRules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.notIn = $util.emptyArray;

        /**
         * DoubleRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.DoubleRules
         * @instance
         */
        DoubleRules.prototype.ignoreEmpty = false;

        /**
         * Verifies a DoubleRules message.
         * @function verify
         * @memberof validate.DoubleRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DoubleRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] !== "number")
                    return "const: number expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt !== "number")
                    return "lt: number expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte !== "number")
                    return "lte: number expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt !== "number")
                    return "gt: number expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte !== "number")
                    return "gte: number expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (typeof message["in"][i] !== "number")
                        return "in: number[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (typeof message.notIn[i] !== "number")
                        return "notIn: number[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a DoubleRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.DoubleRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.DoubleRules} DoubleRules
         */
        DoubleRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.DoubleRules)
                return object;
            let message = new $root.validate.DoubleRules();
            if (object["const"] != null)
                message["const"] = Number(object["const"]);
            if (object.lt != null)
                message.lt = Number(object.lt);
            if (object.lte != null)
                message.lte = Number(object.lte);
            if (object.gt != null)
                message.gt = Number(object.gt);
            if (object.gte != null)
                message.gte = Number(object.gte);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.DoubleRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = Number(object["in"][i]);
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.DoubleRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = Number(object.notIn[i]);
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a DoubleRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.DoubleRules
         * @static
         * @param {validate.DoubleRules} message DoubleRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DoubleRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = options.json && !isFinite(message["const"]) ? String(message["const"]) : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = options.json && !isFinite(message.lt) ? String(message.lt) : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = options.json && !isFinite(message.lte) ? String(message.lte) : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = options.json && !isFinite(message.gt) ? String(message.gt) : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = options.json && !isFinite(message.gte) ? String(message.gte) : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = options.json && !isFinite(message["in"][j]) ? String(message["in"][j]) : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = options.json && !isFinite(message.notIn[j]) ? String(message.notIn[j]) : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this DoubleRules to JSON.
         * @function toJSON
         * @memberof validate.DoubleRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DoubleRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DoubleRules;
    })();

    validate.Int32Rules = (function() {

        /**
         * Properties of an Int32Rules.
         * @memberof validate
         * @interface IInt32Rules
         * @property {number|null} ["const"] Int32Rules const
         * @property {number|null} [lt] Int32Rules lt
         * @property {number|null} [lte] Int32Rules lte
         * @property {number|null} [gt] Int32Rules gt
         * @property {number|null} [gte] Int32Rules gte
         * @property {Array.<number>|null} ["in"] Int32Rules in
         * @property {Array.<number>|null} [notIn] Int32Rules notIn
         * @property {boolean|null} [ignoreEmpty] Int32Rules ignoreEmpty
         */

        /**
         * Constructs a new Int32Rules.
         * @memberof validate
         * @classdesc Represents an Int32Rules.
         * @implements IInt32Rules
         * @constructor
         * @param {validate.IInt32Rules=} [properties] Properties to set
         */
        function Int32Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Int32Rules const.
         * @member {number} const
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype["const"] = 0;

        /**
         * Int32Rules lt.
         * @member {number} lt
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.lt = 0;

        /**
         * Int32Rules lte.
         * @member {number} lte
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.lte = 0;

        /**
         * Int32Rules gt.
         * @member {number} gt
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.gt = 0;

        /**
         * Int32Rules gte.
         * @member {number} gte
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.gte = 0;

        /**
         * Int32Rules in.
         * @member {Array.<number>} in
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype["in"] = $util.emptyArray;

        /**
         * Int32Rules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.notIn = $util.emptyArray;

        /**
         * Int32Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.Int32Rules
         * @instance
         */
        Int32Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies an Int32Rules message.
         * @function verify
         * @memberof validate.Int32Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Int32Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt))
                    return "lt: integer expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte))
                    return "lte: integer expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt))
                    return "gt: integer expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte))
                    return "gte: integer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates an Int32Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.Int32Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.Int32Rules} Int32Rules
         */
        Int32Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.Int32Rules)
                return object;
            let message = new $root.validate.Int32Rules();
            if (object["const"] != null)
                message["const"] = object["const"] | 0;
            if (object.lt != null)
                message.lt = object.lt | 0;
            if (object.lte != null)
                message.lte = object.lte | 0;
            if (object.gt != null)
                message.gt = object.gt | 0;
            if (object.gte != null)
                message.gte = object.gte | 0;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.Int32Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] | 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.Int32Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] | 0;
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from an Int32Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.Int32Rules
         * @static
         * @param {validate.Int32Rules} message Int32Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Int32Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this Int32Rules to JSON.
         * @function toJSON
         * @memberof validate.Int32Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Int32Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Int32Rules;
    })();

    validate.Int64Rules = (function() {

        /**
         * Properties of an Int64Rules.
         * @memberof validate
         * @interface IInt64Rules
         * @property {number|Long|null} ["const"] Int64Rules const
         * @property {number|Long|null} [lt] Int64Rules lt
         * @property {number|Long|null} [lte] Int64Rules lte
         * @property {number|Long|null} [gt] Int64Rules gt
         * @property {number|Long|null} [gte] Int64Rules gte
         * @property {Array.<number|Long>|null} ["in"] Int64Rules in
         * @property {Array.<number|Long>|null} [notIn] Int64Rules notIn
         * @property {boolean|null} [ignoreEmpty] Int64Rules ignoreEmpty
         */

        /**
         * Constructs a new Int64Rules.
         * @memberof validate
         * @classdesc Represents an Int64Rules.
         * @implements IInt64Rules
         * @constructor
         * @param {validate.IInt64Rules=} [properties] Properties to set
         */
        function Int64Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Int64Rules const.
         * @member {number|Long} const
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype["const"] = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Int64Rules lt.
         * @member {number|Long} lt
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.lt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Int64Rules lte.
         * @member {number|Long} lte
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.lte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Int64Rules gt.
         * @member {number|Long} gt
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.gt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Int64Rules gte.
         * @member {number|Long} gte
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.gte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Int64Rules in.
         * @member {Array.<number|Long>} in
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype["in"] = $util.emptyArray;

        /**
         * Int64Rules notIn.
         * @member {Array.<number|Long>} notIn
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.notIn = $util.emptyArray;

        /**
         * Int64Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.Int64Rules
         * @instance
         */
        Int64Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies an Int64Rules message.
         * @function verify
         * @memberof validate.Int64Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Int64Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                    return "const: integer|Long expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                    return "lt: integer|Long expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                    return "lte: integer|Long expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                    return "gt: integer|Long expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                    return "gte: integer|Long expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                        return "in: integer|Long[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                        return "notIn: integer|Long[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates an Int64Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.Int64Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.Int64Rules} Int64Rules
         */
        Int64Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.Int64Rules)
                return object;
            let message = new $root.validate.Int64Rules();
            if (object["const"] != null)
                if ($util.Long)
                    (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                else if (typeof object["const"] === "string")
                    message["const"] = parseInt(object["const"], 10);
                else if (typeof object["const"] === "number")
                    message["const"] = object["const"];
                else if (typeof object["const"] === "object")
                    message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
            if (object.lt != null)
                if ($util.Long)
                    (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                else if (typeof object.lt === "string")
                    message.lt = parseInt(object.lt, 10);
                else if (typeof object.lt === "number")
                    message.lt = object.lt;
                else if (typeof object.lt === "object")
                    message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
            if (object.lte != null)
                if ($util.Long)
                    (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                else if (typeof object.lte === "string")
                    message.lte = parseInt(object.lte, 10);
                else if (typeof object.lte === "number")
                    message.lte = object.lte;
                else if (typeof object.lte === "object")
                    message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
            if (object.gt != null)
                if ($util.Long)
                    (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                else if (typeof object.gt === "string")
                    message.gt = parseInt(object.gt, 10);
                else if (typeof object.gt === "number")
                    message.gt = object.gt;
                else if (typeof object.gt === "object")
                    message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
            if (object.gte != null)
                if ($util.Long)
                    (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                else if (typeof object.gte === "string")
                    message.gte = parseInt(object.gte, 10);
                else if (typeof object.gte === "number")
                    message.gte = object.gte;
                else if (typeof object.gte === "object")
                    message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.Int64Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if ($util.Long)
                        (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                    else if (typeof object["in"][i] === "string")
                        message["in"][i] = parseInt(object["in"][i], 10);
                    else if (typeof object["in"][i] === "number")
                        message["in"][i] = object["in"][i];
                    else if (typeof object["in"][i] === "object")
                        message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.Int64Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if ($util.Long)
                        (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                    else if (typeof object.notIn[i] === "string")
                        message.notIn[i] = parseInt(object.notIn[i], 10);
                    else if (typeof object.notIn[i] === "number")
                        message.notIn[i] = object.notIn[i];
                    else if (typeof object.notIn[i] === "object")
                        message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from an Int64Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.Int64Rules
         * @static
         * @param {validate.Int64Rules} message Int64Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Int64Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object["const"] = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object["const"] = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lte = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gte = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] === "number")
                    object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                else
                    object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt === "number")
                    object.lt = options.longs === String ? String(message.lt) : message.lt;
                else
                    object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte === "number")
                    object.lte = options.longs === String ? String(message.lte) : message.lte;
                else
                    object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt === "number")
                    object.gt = options.longs === String ? String(message.gt) : message.gt;
                else
                    object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte === "number")
                    object.gte = options.longs === String ? String(message.gte) : message.gte;
                else
                    object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    if (typeof message["in"][j] === "number")
                        object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                    else
                        object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    if (typeof message.notIn[j] === "number")
                        object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                    else
                        object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this Int64Rules to JSON.
         * @function toJSON
         * @memberof validate.Int64Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Int64Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Int64Rules;
    })();

    validate.UInt32Rules = (function() {

        /**
         * Properties of a UInt32Rules.
         * @memberof validate
         * @interface IUInt32Rules
         * @property {number|null} ["const"] UInt32Rules const
         * @property {number|null} [lt] UInt32Rules lt
         * @property {number|null} [lte] UInt32Rules lte
         * @property {number|null} [gt] UInt32Rules gt
         * @property {number|null} [gte] UInt32Rules gte
         * @property {Array.<number>|null} ["in"] UInt32Rules in
         * @property {Array.<number>|null} [notIn] UInt32Rules notIn
         * @property {boolean|null} [ignoreEmpty] UInt32Rules ignoreEmpty
         */

        /**
         * Constructs a new UInt32Rules.
         * @memberof validate
         * @classdesc Represents a UInt32Rules.
         * @implements IUInt32Rules
         * @constructor
         * @param {validate.IUInt32Rules=} [properties] Properties to set
         */
        function UInt32Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UInt32Rules const.
         * @member {number} const
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype["const"] = 0;

        /**
         * UInt32Rules lt.
         * @member {number} lt
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.lt = 0;

        /**
         * UInt32Rules lte.
         * @member {number} lte
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.lte = 0;

        /**
         * UInt32Rules gt.
         * @member {number} gt
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.gt = 0;

        /**
         * UInt32Rules gte.
         * @member {number} gte
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.gte = 0;

        /**
         * UInt32Rules in.
         * @member {Array.<number>} in
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype["in"] = $util.emptyArray;

        /**
         * UInt32Rules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.notIn = $util.emptyArray;

        /**
         * UInt32Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.UInt32Rules
         * @instance
         */
        UInt32Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a UInt32Rules message.
         * @function verify
         * @memberof validate.UInt32Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UInt32Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt))
                    return "lt: integer expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte))
                    return "lte: integer expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt))
                    return "gt: integer expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte))
                    return "gte: integer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a UInt32Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.UInt32Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.UInt32Rules} UInt32Rules
         */
        UInt32Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.UInt32Rules)
                return object;
            let message = new $root.validate.UInt32Rules();
            if (object["const"] != null)
                message["const"] = object["const"] >>> 0;
            if (object.lt != null)
                message.lt = object.lt >>> 0;
            if (object.lte != null)
                message.lte = object.lte >>> 0;
            if (object.gt != null)
                message.gt = object.gt >>> 0;
            if (object.gte != null)
                message.gte = object.gte >>> 0;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.UInt32Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] >>> 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.UInt32Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] >>> 0;
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a UInt32Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.UInt32Rules
         * @static
         * @param {validate.UInt32Rules} message UInt32Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UInt32Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this UInt32Rules to JSON.
         * @function toJSON
         * @memberof validate.UInt32Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UInt32Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UInt32Rules;
    })();

    validate.UInt64Rules = (function() {

        /**
         * Properties of a UInt64Rules.
         * @memberof validate
         * @interface IUInt64Rules
         * @property {number|Long|null} ["const"] UInt64Rules const
         * @property {number|Long|null} [lt] UInt64Rules lt
         * @property {number|Long|null} [lte] UInt64Rules lte
         * @property {number|Long|null} [gt] UInt64Rules gt
         * @property {number|Long|null} [gte] UInt64Rules gte
         * @property {Array.<number|Long>|null} ["in"] UInt64Rules in
         * @property {Array.<number|Long>|null} [notIn] UInt64Rules notIn
         * @property {boolean|null} [ignoreEmpty] UInt64Rules ignoreEmpty
         */

        /**
         * Constructs a new UInt64Rules.
         * @memberof validate
         * @classdesc Represents a UInt64Rules.
         * @implements IUInt64Rules
         * @constructor
         * @param {validate.IUInt64Rules=} [properties] Properties to set
         */
        function UInt64Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UInt64Rules const.
         * @member {number|Long} const
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype["const"] = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * UInt64Rules lt.
         * @member {number|Long} lt
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.lt = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * UInt64Rules lte.
         * @member {number|Long} lte
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.lte = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * UInt64Rules gt.
         * @member {number|Long} gt
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.gt = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * UInt64Rules gte.
         * @member {number|Long} gte
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.gte = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * UInt64Rules in.
         * @member {Array.<number|Long>} in
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype["in"] = $util.emptyArray;

        /**
         * UInt64Rules notIn.
         * @member {Array.<number|Long>} notIn
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.notIn = $util.emptyArray;

        /**
         * UInt64Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.UInt64Rules
         * @instance
         */
        UInt64Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a UInt64Rules message.
         * @function verify
         * @memberof validate.UInt64Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UInt64Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                    return "const: integer|Long expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                    return "lt: integer|Long expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                    return "lte: integer|Long expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                    return "gt: integer|Long expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                    return "gte: integer|Long expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                        return "in: integer|Long[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                        return "notIn: integer|Long[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a UInt64Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.UInt64Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.UInt64Rules} UInt64Rules
         */
        UInt64Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.UInt64Rules)
                return object;
            let message = new $root.validate.UInt64Rules();
            if (object["const"] != null)
                if ($util.Long)
                    (message["const"] = $util.Long.fromValue(object["const"])).unsigned = true;
                else if (typeof object["const"] === "string")
                    message["const"] = parseInt(object["const"], 10);
                else if (typeof object["const"] === "number")
                    message["const"] = object["const"];
                else if (typeof object["const"] === "object")
                    message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber(true);
            if (object.lt != null)
                if ($util.Long)
                    (message.lt = $util.Long.fromValue(object.lt)).unsigned = true;
                else if (typeof object.lt === "string")
                    message.lt = parseInt(object.lt, 10);
                else if (typeof object.lt === "number")
                    message.lt = object.lt;
                else if (typeof object.lt === "object")
                    message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber(true);
            if (object.lte != null)
                if ($util.Long)
                    (message.lte = $util.Long.fromValue(object.lte)).unsigned = true;
                else if (typeof object.lte === "string")
                    message.lte = parseInt(object.lte, 10);
                else if (typeof object.lte === "number")
                    message.lte = object.lte;
                else if (typeof object.lte === "object")
                    message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber(true);
            if (object.gt != null)
                if ($util.Long)
                    (message.gt = $util.Long.fromValue(object.gt)).unsigned = true;
                else if (typeof object.gt === "string")
                    message.gt = parseInt(object.gt, 10);
                else if (typeof object.gt === "number")
                    message.gt = object.gt;
                else if (typeof object.gt === "object")
                    message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber(true);
            if (object.gte != null)
                if ($util.Long)
                    (message.gte = $util.Long.fromValue(object.gte)).unsigned = true;
                else if (typeof object.gte === "string")
                    message.gte = parseInt(object.gte, 10);
                else if (typeof object.gte === "number")
                    message.gte = object.gte;
                else if (typeof object.gte === "object")
                    message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber(true);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.UInt64Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if ($util.Long)
                        (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = true;
                    else if (typeof object["in"][i] === "string")
                        message["in"][i] = parseInt(object["in"][i], 10);
                    else if (typeof object["in"][i] === "number")
                        message["in"][i] = object["in"][i];
                    else if (typeof object["in"][i] === "object")
                        message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber(true);
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.UInt64Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if ($util.Long)
                        (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = true;
                    else if (typeof object.notIn[i] === "string")
                        message.notIn[i] = parseInt(object.notIn[i], 10);
                    else if (typeof object.notIn[i] === "number")
                        message.notIn[i] = object.notIn[i];
                    else if (typeof object.notIn[i] === "object")
                        message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber(true);
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a UInt64Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.UInt64Rules
         * @static
         * @param {validate.UInt64Rules} message UInt64Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UInt64Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object["const"] = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object["const"] = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.lt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.lte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lte = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.gt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.gte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gte = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] === "number")
                    object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                else
                    object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber(true) : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt === "number")
                    object.lt = options.longs === String ? String(message.lt) : message.lt;
                else
                    object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber(true) : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte === "number")
                    object.lte = options.longs === String ? String(message.lte) : message.lte;
                else
                    object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber(true) : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt === "number")
                    object.gt = options.longs === String ? String(message.gt) : message.gt;
                else
                    object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber(true) : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte === "number")
                    object.gte = options.longs === String ? String(message.gte) : message.gte;
                else
                    object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber(true) : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    if (typeof message["in"][j] === "number")
                        object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                    else
                        object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber(true) : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    if (typeof message.notIn[j] === "number")
                        object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                    else
                        object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber(true) : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this UInt64Rules to JSON.
         * @function toJSON
         * @memberof validate.UInt64Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UInt64Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UInt64Rules;
    })();

    validate.SInt32Rules = (function() {

        /**
         * Properties of a SInt32Rules.
         * @memberof validate
         * @interface ISInt32Rules
         * @property {number|null} ["const"] SInt32Rules const
         * @property {number|null} [lt] SInt32Rules lt
         * @property {number|null} [lte] SInt32Rules lte
         * @property {number|null} [gt] SInt32Rules gt
         * @property {number|null} [gte] SInt32Rules gte
         * @property {Array.<number>|null} ["in"] SInt32Rules in
         * @property {Array.<number>|null} [notIn] SInt32Rules notIn
         * @property {boolean|null} [ignoreEmpty] SInt32Rules ignoreEmpty
         */

        /**
         * Constructs a new SInt32Rules.
         * @memberof validate
         * @classdesc Represents a SInt32Rules.
         * @implements ISInt32Rules
         * @constructor
         * @param {validate.ISInt32Rules=} [properties] Properties to set
         */
        function SInt32Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SInt32Rules const.
         * @member {number} const
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype["const"] = 0;

        /**
         * SInt32Rules lt.
         * @member {number} lt
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.lt = 0;

        /**
         * SInt32Rules lte.
         * @member {number} lte
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.lte = 0;

        /**
         * SInt32Rules gt.
         * @member {number} gt
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.gt = 0;

        /**
         * SInt32Rules gte.
         * @member {number} gte
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.gte = 0;

        /**
         * SInt32Rules in.
         * @member {Array.<number>} in
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype["in"] = $util.emptyArray;

        /**
         * SInt32Rules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.notIn = $util.emptyArray;

        /**
         * SInt32Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.SInt32Rules
         * @instance
         */
        SInt32Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a SInt32Rules message.
         * @function verify
         * @memberof validate.SInt32Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SInt32Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt))
                    return "lt: integer expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte))
                    return "lte: integer expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt))
                    return "gt: integer expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte))
                    return "gte: integer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a SInt32Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.SInt32Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.SInt32Rules} SInt32Rules
         */
        SInt32Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.SInt32Rules)
                return object;
            let message = new $root.validate.SInt32Rules();
            if (object["const"] != null)
                message["const"] = object["const"] | 0;
            if (object.lt != null)
                message.lt = object.lt | 0;
            if (object.lte != null)
                message.lte = object.lte | 0;
            if (object.gt != null)
                message.gt = object.gt | 0;
            if (object.gte != null)
                message.gte = object.gte | 0;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.SInt32Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] | 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.SInt32Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] | 0;
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a SInt32Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.SInt32Rules
         * @static
         * @param {validate.SInt32Rules} message SInt32Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SInt32Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this SInt32Rules to JSON.
         * @function toJSON
         * @memberof validate.SInt32Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SInt32Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SInt32Rules;
    })();

    validate.SInt64Rules = (function() {

        /**
         * Properties of a SInt64Rules.
         * @memberof validate
         * @interface ISInt64Rules
         * @property {number|Long|null} ["const"] SInt64Rules const
         * @property {number|Long|null} [lt] SInt64Rules lt
         * @property {number|Long|null} [lte] SInt64Rules lte
         * @property {number|Long|null} [gt] SInt64Rules gt
         * @property {number|Long|null} [gte] SInt64Rules gte
         * @property {Array.<number|Long>|null} ["in"] SInt64Rules in
         * @property {Array.<number|Long>|null} [notIn] SInt64Rules notIn
         * @property {boolean|null} [ignoreEmpty] SInt64Rules ignoreEmpty
         */

        /**
         * Constructs a new SInt64Rules.
         * @memberof validate
         * @classdesc Represents a SInt64Rules.
         * @implements ISInt64Rules
         * @constructor
         * @param {validate.ISInt64Rules=} [properties] Properties to set
         */
        function SInt64Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SInt64Rules const.
         * @member {number|Long} const
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype["const"] = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SInt64Rules lt.
         * @member {number|Long} lt
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.lt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SInt64Rules lte.
         * @member {number|Long} lte
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.lte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SInt64Rules gt.
         * @member {number|Long} gt
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.gt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SInt64Rules gte.
         * @member {number|Long} gte
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.gte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SInt64Rules in.
         * @member {Array.<number|Long>} in
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype["in"] = $util.emptyArray;

        /**
         * SInt64Rules notIn.
         * @member {Array.<number|Long>} notIn
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.notIn = $util.emptyArray;

        /**
         * SInt64Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.SInt64Rules
         * @instance
         */
        SInt64Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a SInt64Rules message.
         * @function verify
         * @memberof validate.SInt64Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SInt64Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                    return "const: integer|Long expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                    return "lt: integer|Long expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                    return "lte: integer|Long expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                    return "gt: integer|Long expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                    return "gte: integer|Long expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                        return "in: integer|Long[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                        return "notIn: integer|Long[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a SInt64Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.SInt64Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.SInt64Rules} SInt64Rules
         */
        SInt64Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.SInt64Rules)
                return object;
            let message = new $root.validate.SInt64Rules();
            if (object["const"] != null)
                if ($util.Long)
                    (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                else if (typeof object["const"] === "string")
                    message["const"] = parseInt(object["const"], 10);
                else if (typeof object["const"] === "number")
                    message["const"] = object["const"];
                else if (typeof object["const"] === "object")
                    message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
            if (object.lt != null)
                if ($util.Long)
                    (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                else if (typeof object.lt === "string")
                    message.lt = parseInt(object.lt, 10);
                else if (typeof object.lt === "number")
                    message.lt = object.lt;
                else if (typeof object.lt === "object")
                    message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
            if (object.lte != null)
                if ($util.Long)
                    (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                else if (typeof object.lte === "string")
                    message.lte = parseInt(object.lte, 10);
                else if (typeof object.lte === "number")
                    message.lte = object.lte;
                else if (typeof object.lte === "object")
                    message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
            if (object.gt != null)
                if ($util.Long)
                    (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                else if (typeof object.gt === "string")
                    message.gt = parseInt(object.gt, 10);
                else if (typeof object.gt === "number")
                    message.gt = object.gt;
                else if (typeof object.gt === "object")
                    message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
            if (object.gte != null)
                if ($util.Long)
                    (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                else if (typeof object.gte === "string")
                    message.gte = parseInt(object.gte, 10);
                else if (typeof object.gte === "number")
                    message.gte = object.gte;
                else if (typeof object.gte === "object")
                    message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.SInt64Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if ($util.Long)
                        (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                    else if (typeof object["in"][i] === "string")
                        message["in"][i] = parseInt(object["in"][i], 10);
                    else if (typeof object["in"][i] === "number")
                        message["in"][i] = object["in"][i];
                    else if (typeof object["in"][i] === "object")
                        message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.SInt64Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if ($util.Long)
                        (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                    else if (typeof object.notIn[i] === "string")
                        message.notIn[i] = parseInt(object.notIn[i], 10);
                    else if (typeof object.notIn[i] === "number")
                        message.notIn[i] = object.notIn[i];
                    else if (typeof object.notIn[i] === "object")
                        message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a SInt64Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.SInt64Rules
         * @static
         * @param {validate.SInt64Rules} message SInt64Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SInt64Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object["const"] = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object["const"] = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lte = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gte = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] === "number")
                    object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                else
                    object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt === "number")
                    object.lt = options.longs === String ? String(message.lt) : message.lt;
                else
                    object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte === "number")
                    object.lte = options.longs === String ? String(message.lte) : message.lte;
                else
                    object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt === "number")
                    object.gt = options.longs === String ? String(message.gt) : message.gt;
                else
                    object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte === "number")
                    object.gte = options.longs === String ? String(message.gte) : message.gte;
                else
                    object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    if (typeof message["in"][j] === "number")
                        object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                    else
                        object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    if (typeof message.notIn[j] === "number")
                        object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                    else
                        object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this SInt64Rules to JSON.
         * @function toJSON
         * @memberof validate.SInt64Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SInt64Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SInt64Rules;
    })();

    validate.Fixed32Rules = (function() {

        /**
         * Properties of a Fixed32Rules.
         * @memberof validate
         * @interface IFixed32Rules
         * @property {number|null} ["const"] Fixed32Rules const
         * @property {number|null} [lt] Fixed32Rules lt
         * @property {number|null} [lte] Fixed32Rules lte
         * @property {number|null} [gt] Fixed32Rules gt
         * @property {number|null} [gte] Fixed32Rules gte
         * @property {Array.<number>|null} ["in"] Fixed32Rules in
         * @property {Array.<number>|null} [notIn] Fixed32Rules notIn
         * @property {boolean|null} [ignoreEmpty] Fixed32Rules ignoreEmpty
         */

        /**
         * Constructs a new Fixed32Rules.
         * @memberof validate
         * @classdesc Represents a Fixed32Rules.
         * @implements IFixed32Rules
         * @constructor
         * @param {validate.IFixed32Rules=} [properties] Properties to set
         */
        function Fixed32Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Fixed32Rules const.
         * @member {number} const
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype["const"] = 0;

        /**
         * Fixed32Rules lt.
         * @member {number} lt
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.lt = 0;

        /**
         * Fixed32Rules lte.
         * @member {number} lte
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.lte = 0;

        /**
         * Fixed32Rules gt.
         * @member {number} gt
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.gt = 0;

        /**
         * Fixed32Rules gte.
         * @member {number} gte
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.gte = 0;

        /**
         * Fixed32Rules in.
         * @member {Array.<number>} in
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype["in"] = $util.emptyArray;

        /**
         * Fixed32Rules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.notIn = $util.emptyArray;

        /**
         * Fixed32Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.Fixed32Rules
         * @instance
         */
        Fixed32Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a Fixed32Rules message.
         * @function verify
         * @memberof validate.Fixed32Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Fixed32Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt))
                    return "lt: integer expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte))
                    return "lte: integer expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt))
                    return "gt: integer expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte))
                    return "gte: integer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a Fixed32Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.Fixed32Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.Fixed32Rules} Fixed32Rules
         */
        Fixed32Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.Fixed32Rules)
                return object;
            let message = new $root.validate.Fixed32Rules();
            if (object["const"] != null)
                message["const"] = object["const"] >>> 0;
            if (object.lt != null)
                message.lt = object.lt >>> 0;
            if (object.lte != null)
                message.lte = object.lte >>> 0;
            if (object.gt != null)
                message.gt = object.gt >>> 0;
            if (object.gte != null)
                message.gte = object.gte >>> 0;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.Fixed32Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] >>> 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.Fixed32Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] >>> 0;
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a Fixed32Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.Fixed32Rules
         * @static
         * @param {validate.Fixed32Rules} message Fixed32Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Fixed32Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this Fixed32Rules to JSON.
         * @function toJSON
         * @memberof validate.Fixed32Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Fixed32Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Fixed32Rules;
    })();

    validate.Fixed64Rules = (function() {

        /**
         * Properties of a Fixed64Rules.
         * @memberof validate
         * @interface IFixed64Rules
         * @property {number|Long|null} ["const"] Fixed64Rules const
         * @property {number|Long|null} [lt] Fixed64Rules lt
         * @property {number|Long|null} [lte] Fixed64Rules lte
         * @property {number|Long|null} [gt] Fixed64Rules gt
         * @property {number|Long|null} [gte] Fixed64Rules gte
         * @property {Array.<number|Long>|null} ["in"] Fixed64Rules in
         * @property {Array.<number|Long>|null} [notIn] Fixed64Rules notIn
         * @property {boolean|null} [ignoreEmpty] Fixed64Rules ignoreEmpty
         */

        /**
         * Constructs a new Fixed64Rules.
         * @memberof validate
         * @classdesc Represents a Fixed64Rules.
         * @implements IFixed64Rules
         * @constructor
         * @param {validate.IFixed64Rules=} [properties] Properties to set
         */
        function Fixed64Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Fixed64Rules const.
         * @member {number|Long} const
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype["const"] = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Fixed64Rules lt.
         * @member {number|Long} lt
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.lt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Fixed64Rules lte.
         * @member {number|Long} lte
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.lte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Fixed64Rules gt.
         * @member {number|Long} gt
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.gt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Fixed64Rules gte.
         * @member {number|Long} gte
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.gte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Fixed64Rules in.
         * @member {Array.<number|Long>} in
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype["in"] = $util.emptyArray;

        /**
         * Fixed64Rules notIn.
         * @member {Array.<number|Long>} notIn
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.notIn = $util.emptyArray;

        /**
         * Fixed64Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.Fixed64Rules
         * @instance
         */
        Fixed64Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a Fixed64Rules message.
         * @function verify
         * @memberof validate.Fixed64Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Fixed64Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                    return "const: integer|Long expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                    return "lt: integer|Long expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                    return "lte: integer|Long expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                    return "gt: integer|Long expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                    return "gte: integer|Long expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                        return "in: integer|Long[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                        return "notIn: integer|Long[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a Fixed64Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.Fixed64Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.Fixed64Rules} Fixed64Rules
         */
        Fixed64Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.Fixed64Rules)
                return object;
            let message = new $root.validate.Fixed64Rules();
            if (object["const"] != null)
                if ($util.Long)
                    (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                else if (typeof object["const"] === "string")
                    message["const"] = parseInt(object["const"], 10);
                else if (typeof object["const"] === "number")
                    message["const"] = object["const"];
                else if (typeof object["const"] === "object")
                    message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
            if (object.lt != null)
                if ($util.Long)
                    (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                else if (typeof object.lt === "string")
                    message.lt = parseInt(object.lt, 10);
                else if (typeof object.lt === "number")
                    message.lt = object.lt;
                else if (typeof object.lt === "object")
                    message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
            if (object.lte != null)
                if ($util.Long)
                    (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                else if (typeof object.lte === "string")
                    message.lte = parseInt(object.lte, 10);
                else if (typeof object.lte === "number")
                    message.lte = object.lte;
                else if (typeof object.lte === "object")
                    message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
            if (object.gt != null)
                if ($util.Long)
                    (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                else if (typeof object.gt === "string")
                    message.gt = parseInt(object.gt, 10);
                else if (typeof object.gt === "number")
                    message.gt = object.gt;
                else if (typeof object.gt === "object")
                    message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
            if (object.gte != null)
                if ($util.Long)
                    (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                else if (typeof object.gte === "string")
                    message.gte = parseInt(object.gte, 10);
                else if (typeof object.gte === "number")
                    message.gte = object.gte;
                else if (typeof object.gte === "object")
                    message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.Fixed64Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if ($util.Long)
                        (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                    else if (typeof object["in"][i] === "string")
                        message["in"][i] = parseInt(object["in"][i], 10);
                    else if (typeof object["in"][i] === "number")
                        message["in"][i] = object["in"][i];
                    else if (typeof object["in"][i] === "object")
                        message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.Fixed64Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if ($util.Long)
                        (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                    else if (typeof object.notIn[i] === "string")
                        message.notIn[i] = parseInt(object.notIn[i], 10);
                    else if (typeof object.notIn[i] === "number")
                        message.notIn[i] = object.notIn[i];
                    else if (typeof object.notIn[i] === "object")
                        message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a Fixed64Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.Fixed64Rules
         * @static
         * @param {validate.Fixed64Rules} message Fixed64Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Fixed64Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object["const"] = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object["const"] = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lte = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gte = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] === "number")
                    object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                else
                    object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt === "number")
                    object.lt = options.longs === String ? String(message.lt) : message.lt;
                else
                    object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte === "number")
                    object.lte = options.longs === String ? String(message.lte) : message.lte;
                else
                    object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt === "number")
                    object.gt = options.longs === String ? String(message.gt) : message.gt;
                else
                    object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte === "number")
                    object.gte = options.longs === String ? String(message.gte) : message.gte;
                else
                    object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    if (typeof message["in"][j] === "number")
                        object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                    else
                        object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    if (typeof message.notIn[j] === "number")
                        object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                    else
                        object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this Fixed64Rules to JSON.
         * @function toJSON
         * @memberof validate.Fixed64Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Fixed64Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Fixed64Rules;
    })();

    validate.SFixed32Rules = (function() {

        /**
         * Properties of a SFixed32Rules.
         * @memberof validate
         * @interface ISFixed32Rules
         * @property {number|null} ["const"] SFixed32Rules const
         * @property {number|null} [lt] SFixed32Rules lt
         * @property {number|null} [lte] SFixed32Rules lte
         * @property {number|null} [gt] SFixed32Rules gt
         * @property {number|null} [gte] SFixed32Rules gte
         * @property {Array.<number>|null} ["in"] SFixed32Rules in
         * @property {Array.<number>|null} [notIn] SFixed32Rules notIn
         * @property {boolean|null} [ignoreEmpty] SFixed32Rules ignoreEmpty
         */

        /**
         * Constructs a new SFixed32Rules.
         * @memberof validate
         * @classdesc Represents a SFixed32Rules.
         * @implements ISFixed32Rules
         * @constructor
         * @param {validate.ISFixed32Rules=} [properties] Properties to set
         */
        function SFixed32Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SFixed32Rules const.
         * @member {number} const
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype["const"] = 0;

        /**
         * SFixed32Rules lt.
         * @member {number} lt
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.lt = 0;

        /**
         * SFixed32Rules lte.
         * @member {number} lte
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.lte = 0;

        /**
         * SFixed32Rules gt.
         * @member {number} gt
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.gt = 0;

        /**
         * SFixed32Rules gte.
         * @member {number} gte
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.gte = 0;

        /**
         * SFixed32Rules in.
         * @member {Array.<number>} in
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype["in"] = $util.emptyArray;

        /**
         * SFixed32Rules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.notIn = $util.emptyArray;

        /**
         * SFixed32Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.SFixed32Rules
         * @instance
         */
        SFixed32Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a SFixed32Rules message.
         * @function verify
         * @memberof validate.SFixed32Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SFixed32Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt))
                    return "lt: integer expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte))
                    return "lte: integer expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt))
                    return "gt: integer expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte))
                    return "gte: integer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a SFixed32Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.SFixed32Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.SFixed32Rules} SFixed32Rules
         */
        SFixed32Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.SFixed32Rules)
                return object;
            let message = new $root.validate.SFixed32Rules();
            if (object["const"] != null)
                message["const"] = object["const"] | 0;
            if (object.lt != null)
                message.lt = object.lt | 0;
            if (object.lte != null)
                message.lte = object.lte | 0;
            if (object.gt != null)
                message.gt = object.gt | 0;
            if (object.gte != null)
                message.gte = object.gte | 0;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.SFixed32Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] | 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.SFixed32Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] | 0;
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a SFixed32Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.SFixed32Rules
         * @static
         * @param {validate.SFixed32Rules} message SFixed32Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SFixed32Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.lt = 0;
                object.lte = 0;
                object.gt = 0;
                object.gte = 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this SFixed32Rules to JSON.
         * @function toJSON
         * @memberof validate.SFixed32Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SFixed32Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SFixed32Rules;
    })();

    validate.SFixed64Rules = (function() {

        /**
         * Properties of a SFixed64Rules.
         * @memberof validate
         * @interface ISFixed64Rules
         * @property {number|Long|null} ["const"] SFixed64Rules const
         * @property {number|Long|null} [lt] SFixed64Rules lt
         * @property {number|Long|null} [lte] SFixed64Rules lte
         * @property {number|Long|null} [gt] SFixed64Rules gt
         * @property {number|Long|null} [gte] SFixed64Rules gte
         * @property {Array.<number|Long>|null} ["in"] SFixed64Rules in
         * @property {Array.<number|Long>|null} [notIn] SFixed64Rules notIn
         * @property {boolean|null} [ignoreEmpty] SFixed64Rules ignoreEmpty
         */

        /**
         * Constructs a new SFixed64Rules.
         * @memberof validate
         * @classdesc Represents a SFixed64Rules.
         * @implements ISFixed64Rules
         * @constructor
         * @param {validate.ISFixed64Rules=} [properties] Properties to set
         */
        function SFixed64Rules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SFixed64Rules const.
         * @member {number|Long} const
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype["const"] = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SFixed64Rules lt.
         * @member {number|Long} lt
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.lt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SFixed64Rules lte.
         * @member {number|Long} lte
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.lte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SFixed64Rules gt.
         * @member {number|Long} gt
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.gt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SFixed64Rules gte.
         * @member {number|Long} gte
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.gte = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SFixed64Rules in.
         * @member {Array.<number|Long>} in
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype["in"] = $util.emptyArray;

        /**
         * SFixed64Rules notIn.
         * @member {Array.<number|Long>} notIn
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.notIn = $util.emptyArray;

        /**
         * SFixed64Rules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.SFixed64Rules
         * @instance
         */
        SFixed64Rules.prototype.ignoreEmpty = false;

        /**
         * Verifies a SFixed64Rules message.
         * @function verify
         * @memberof validate.SFixed64Rules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SFixed64Rules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                    return "const: integer|Long expected";
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                    return "lt: integer|Long expected";
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                    return "lte: integer|Long expected";
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                    return "gt: integer|Long expected";
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                    return "gte: integer|Long expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                        return "in: integer|Long[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                        return "notIn: integer|Long[] expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a SFixed64Rules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.SFixed64Rules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.SFixed64Rules} SFixed64Rules
         */
        SFixed64Rules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.SFixed64Rules)
                return object;
            let message = new $root.validate.SFixed64Rules();
            if (object["const"] != null)
                if ($util.Long)
                    (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                else if (typeof object["const"] === "string")
                    message["const"] = parseInt(object["const"], 10);
                else if (typeof object["const"] === "number")
                    message["const"] = object["const"];
                else if (typeof object["const"] === "object")
                    message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
            if (object.lt != null)
                if ($util.Long)
                    (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                else if (typeof object.lt === "string")
                    message.lt = parseInt(object.lt, 10);
                else if (typeof object.lt === "number")
                    message.lt = object.lt;
                else if (typeof object.lt === "object")
                    message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
            if (object.lte != null)
                if ($util.Long)
                    (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                else if (typeof object.lte === "string")
                    message.lte = parseInt(object.lte, 10);
                else if (typeof object.lte === "number")
                    message.lte = object.lte;
                else if (typeof object.lte === "object")
                    message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
            if (object.gt != null)
                if ($util.Long)
                    (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                else if (typeof object.gt === "string")
                    message.gt = parseInt(object.gt, 10);
                else if (typeof object.gt === "number")
                    message.gt = object.gt;
                else if (typeof object.gt === "object")
                    message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
            if (object.gte != null)
                if ($util.Long)
                    (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                else if (typeof object.gte === "string")
                    message.gte = parseInt(object.gte, 10);
                else if (typeof object.gte === "number")
                    message.gte = object.gte;
                else if (typeof object.gte === "object")
                    message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.SFixed64Rules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if ($util.Long)
                        (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                    else if (typeof object["in"][i] === "string")
                        message["in"][i] = parseInt(object["in"][i], 10);
                    else if (typeof object["in"][i] === "number")
                        message["in"][i] = object["in"][i];
                    else if (typeof object["in"][i] === "object")
                        message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.SFixed64Rules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if ($util.Long)
                        (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                    else if (typeof object.notIn[i] === "string")
                        message.notIn[i] = parseInt(object.notIn[i], 10);
                    else if (typeof object.notIn[i] === "number")
                        message.notIn[i] = object.notIn[i];
                    else if (typeof object.notIn[i] === "object")
                        message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a SFixed64Rules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.SFixed64Rules
         * @static
         * @param {validate.SFixed64Rules} message SFixed64Rules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SFixed64Rules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object["const"] = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object["const"] = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.lte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lte = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gt = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, false);
                    object.gte = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gte = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] === "number")
                    object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                else
                    object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
            if (message.lt != null && message.hasOwnProperty("lt"))
                if (typeof message.lt === "number")
                    object.lt = options.longs === String ? String(message.lt) : message.lt;
                else
                    object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
            if (message.lte != null && message.hasOwnProperty("lte"))
                if (typeof message.lte === "number")
                    object.lte = options.longs === String ? String(message.lte) : message.lte;
                else
                    object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
            if (message.gt != null && message.hasOwnProperty("gt"))
                if (typeof message.gt === "number")
                    object.gt = options.longs === String ? String(message.gt) : message.gt;
                else
                    object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
            if (message.gte != null && message.hasOwnProperty("gte"))
                if (typeof message.gte === "number")
                    object.gte = options.longs === String ? String(message.gte) : message.gte;
                else
                    object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    if (typeof message["in"][j] === "number")
                        object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                    else
                        object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    if (typeof message.notIn[j] === "number")
                        object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                    else
                        object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this SFixed64Rules to JSON.
         * @function toJSON
         * @memberof validate.SFixed64Rules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SFixed64Rules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SFixed64Rules;
    })();

    validate.BoolRules = (function() {

        /**
         * Properties of a BoolRules.
         * @memberof validate
         * @interface IBoolRules
         * @property {boolean|null} ["const"] BoolRules const
         */

        /**
         * Constructs a new BoolRules.
         * @memberof validate
         * @classdesc Represents a BoolRules.
         * @implements IBoolRules
         * @constructor
         * @param {validate.IBoolRules=} [properties] Properties to set
         */
        function BoolRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BoolRules const.
         * @member {boolean} const
         * @memberof validate.BoolRules
         * @instance
         */
        BoolRules.prototype["const"] = false;

        /**
         * Verifies a BoolRules message.
         * @function verify
         * @memberof validate.BoolRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BoolRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (typeof message["const"] !== "boolean")
                    return "const: boolean expected";
            return null;
        };

        /**
         * Creates a BoolRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.BoolRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.BoolRules} BoolRules
         */
        BoolRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.BoolRules)
                return object;
            let message = new $root.validate.BoolRules();
            if (object["const"] != null)
                message["const"] = Boolean(object["const"]);
            return message;
        };

        /**
         * Creates a plain object from a BoolRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.BoolRules
         * @static
         * @param {validate.BoolRules} message BoolRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BoolRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults)
                object["const"] = false;
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            return object;
        };

        /**
         * Converts this BoolRules to JSON.
         * @function toJSON
         * @memberof validate.BoolRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BoolRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BoolRules;
    })();

    validate.StringRules = (function() {

        /**
         * Properties of a StringRules.
         * @memberof validate
         * @interface IStringRules
         * @property {string|null} ["const"] StringRules const
         * @property {number|Long|null} [len] StringRules len
         * @property {number|Long|null} [minLen] StringRules minLen
         * @property {number|Long|null} [maxLen] StringRules maxLen
         * @property {number|Long|null} [lenBytes] StringRules lenBytes
         * @property {number|Long|null} [minBytes] StringRules minBytes
         * @property {number|Long|null} [maxBytes] StringRules maxBytes
         * @property {string|null} [pattern] StringRules pattern
         * @property {string|null} [prefix] StringRules prefix
         * @property {string|null} [suffix] StringRules suffix
         * @property {string|null} [contains] StringRules contains
         * @property {string|null} [notContains] StringRules notContains
         * @property {Array.<string>|null} ["in"] StringRules in
         * @property {Array.<string>|null} [notIn] StringRules notIn
         * @property {boolean|null} [email] StringRules email
         * @property {boolean|null} [hostname] StringRules hostname
         * @property {boolean|null} [ip] StringRules ip
         * @property {boolean|null} [ipv4] StringRules ipv4
         * @property {boolean|null} [ipv6] StringRules ipv6
         * @property {boolean|null} [uri] StringRules uri
         * @property {boolean|null} [uriRef] StringRules uriRef
         * @property {boolean|null} [address] StringRules address
         * @property {boolean|null} [uuid] StringRules uuid
         * @property {validate.KnownRegex|null} [wellKnownRegex] StringRules wellKnownRegex
         * @property {boolean|null} [strict] StringRules strict
         * @property {boolean|null} [ignoreEmpty] StringRules ignoreEmpty
         */

        /**
         * Constructs a new StringRules.
         * @memberof validate
         * @classdesc Represents a StringRules.
         * @implements IStringRules
         * @constructor
         * @param {validate.IStringRules=} [properties] Properties to set
         */
        function StringRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StringRules const.
         * @member {string} const
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype["const"] = "";

        /**
         * StringRules len.
         * @member {number|Long} len
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.len = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules minLen.
         * @member {number|Long} minLen
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.minLen = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules maxLen.
         * @member {number|Long} maxLen
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.maxLen = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules lenBytes.
         * @member {number|Long} lenBytes
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.lenBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules minBytes.
         * @member {number|Long} minBytes
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.minBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules maxBytes.
         * @member {number|Long} maxBytes
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.maxBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StringRules pattern.
         * @member {string} pattern
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.pattern = "";

        /**
         * StringRules prefix.
         * @member {string} prefix
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.prefix = "";

        /**
         * StringRules suffix.
         * @member {string} suffix
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.suffix = "";

        /**
         * StringRules contains.
         * @member {string} contains
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.contains = "";

        /**
         * StringRules notContains.
         * @member {string} notContains
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.notContains = "";

        /**
         * StringRules in.
         * @member {Array.<string>} in
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype["in"] = $util.emptyArray;

        /**
         * StringRules notIn.
         * @member {Array.<string>} notIn
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.notIn = $util.emptyArray;

        /**
         * StringRules email.
         * @member {boolean|null|undefined} email
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.email = null;

        /**
         * StringRules hostname.
         * @member {boolean|null|undefined} hostname
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.hostname = null;

        /**
         * StringRules ip.
         * @member {boolean|null|undefined} ip
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.ip = null;

        /**
         * StringRules ipv4.
         * @member {boolean|null|undefined} ipv4
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.ipv4 = null;

        /**
         * StringRules ipv6.
         * @member {boolean|null|undefined} ipv6
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.ipv6 = null;

        /**
         * StringRules uri.
         * @member {boolean|null|undefined} uri
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.uri = null;

        /**
         * StringRules uriRef.
         * @member {boolean|null|undefined} uriRef
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.uriRef = null;

        /**
         * StringRules address.
         * @member {boolean|null|undefined} address
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.address = null;

        /**
         * StringRules uuid.
         * @member {boolean|null|undefined} uuid
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.uuid = null;

        /**
         * StringRules wellKnownRegex.
         * @member {validate.KnownRegex|null|undefined} wellKnownRegex
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.wellKnownRegex = null;

        /**
         * StringRules strict.
         * @member {boolean} strict
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.strict = true;

        /**
         * StringRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.StringRules
         * @instance
         */
        StringRules.prototype.ignoreEmpty = false;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * StringRules wellKnown.
         * @member {"email"|"hostname"|"ip"|"ipv4"|"ipv6"|"uri"|"uriRef"|"address"|"uuid"|"wellKnownRegex"|undefined} wellKnown
         * @memberof validate.StringRules
         * @instance
         */
        Object.defineProperty(StringRules.prototype, "wellKnown", {
            get: $util.oneOfGetter($oneOfFields = ["email", "hostname", "ip", "ipv4", "ipv6", "uri", "uriRef", "address", "uuid", "wellKnownRegex"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Verifies a StringRules message.
         * @function verify
         * @memberof validate.StringRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StringRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            let properties = {};
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isString(message["const"]))
                    return "const: string expected";
            if (message.len != null && message.hasOwnProperty("len"))
                if (!$util.isInteger(message.len) && !(message.len && $util.isInteger(message.len.low) && $util.isInteger(message.len.high)))
                    return "len: integer|Long expected";
            if (message.minLen != null && message.hasOwnProperty("minLen"))
                if (!$util.isInteger(message.minLen) && !(message.minLen && $util.isInteger(message.minLen.low) && $util.isInteger(message.minLen.high)))
                    return "minLen: integer|Long expected";
            if (message.maxLen != null && message.hasOwnProperty("maxLen"))
                if (!$util.isInteger(message.maxLen) && !(message.maxLen && $util.isInteger(message.maxLen.low) && $util.isInteger(message.maxLen.high)))
                    return "maxLen: integer|Long expected";
            if (message.lenBytes != null && message.hasOwnProperty("lenBytes"))
                if (!$util.isInteger(message.lenBytes) && !(message.lenBytes && $util.isInteger(message.lenBytes.low) && $util.isInteger(message.lenBytes.high)))
                    return "lenBytes: integer|Long expected";
            if (message.minBytes != null && message.hasOwnProperty("minBytes"))
                if (!$util.isInteger(message.minBytes) && !(message.minBytes && $util.isInteger(message.minBytes.low) && $util.isInteger(message.minBytes.high)))
                    return "minBytes: integer|Long expected";
            if (message.maxBytes != null && message.hasOwnProperty("maxBytes"))
                if (!$util.isInteger(message.maxBytes) && !(message.maxBytes && $util.isInteger(message.maxBytes.low) && $util.isInteger(message.maxBytes.high)))
                    return "maxBytes: integer|Long expected";
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                if (!$util.isString(message.pattern))
                    return "pattern: string expected";
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                if (!$util.isString(message.prefix))
                    return "prefix: string expected";
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                if (!$util.isString(message.suffix))
                    return "suffix: string expected";
            if (message.contains != null && message.hasOwnProperty("contains"))
                if (!$util.isString(message.contains))
                    return "contains: string expected";
            if (message.notContains != null && message.hasOwnProperty("notContains"))
                if (!$util.isString(message.notContains))
                    return "notContains: string expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isString(message["in"][i]))
                        return "in: string[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isString(message.notIn[i]))
                        return "notIn: string[] expected";
            }
            if (message.email != null && message.hasOwnProperty("email")) {
                properties.wellKnown = 1;
                if (typeof message.email !== "boolean")
                    return "email: boolean expected";
            }
            if (message.hostname != null && message.hasOwnProperty("hostname")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.hostname !== "boolean")
                    return "hostname: boolean expected";
            }
            if (message.ip != null && message.hasOwnProperty("ip")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.ip !== "boolean")
                    return "ip: boolean expected";
            }
            if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.ipv4 !== "boolean")
                    return "ipv4: boolean expected";
            }
            if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.ipv6 !== "boolean")
                    return "ipv6: boolean expected";
            }
            if (message.uri != null && message.hasOwnProperty("uri")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.uri !== "boolean")
                    return "uri: boolean expected";
            }
            if (message.uriRef != null && message.hasOwnProperty("uriRef")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.uriRef !== "boolean")
                    return "uriRef: boolean expected";
            }
            if (message.address != null && message.hasOwnProperty("address")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.address !== "boolean")
                    return "address: boolean expected";
            }
            if (message.uuid != null && message.hasOwnProperty("uuid")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.uuid !== "boolean")
                    return "uuid: boolean expected";
            }
            if (message.wellKnownRegex != null && message.hasOwnProperty("wellKnownRegex")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                switch (message.wellKnownRegex) {
                default:
                    return "wellKnownRegex: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            if (message.strict != null && message.hasOwnProperty("strict"))
                if (typeof message.strict !== "boolean")
                    return "strict: boolean expected";
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a StringRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.StringRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.StringRules} StringRules
         */
        StringRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.StringRules)
                return object;
            let message = new $root.validate.StringRules();
            if (object["const"] != null)
                message["const"] = String(object["const"]);
            if (object.len != null)
                if ($util.Long)
                    (message.len = $util.Long.fromValue(object.len)).unsigned = true;
                else if (typeof object.len === "string")
                    message.len = parseInt(object.len, 10);
                else if (typeof object.len === "number")
                    message.len = object.len;
                else if (typeof object.len === "object")
                    message.len = new $util.LongBits(object.len.low >>> 0, object.len.high >>> 0).toNumber(true);
            if (object.minLen != null)
                if ($util.Long)
                    (message.minLen = $util.Long.fromValue(object.minLen)).unsigned = true;
                else if (typeof object.minLen === "string")
                    message.minLen = parseInt(object.minLen, 10);
                else if (typeof object.minLen === "number")
                    message.minLen = object.minLen;
                else if (typeof object.minLen === "object")
                    message.minLen = new $util.LongBits(object.minLen.low >>> 0, object.minLen.high >>> 0).toNumber(true);
            if (object.maxLen != null)
                if ($util.Long)
                    (message.maxLen = $util.Long.fromValue(object.maxLen)).unsigned = true;
                else if (typeof object.maxLen === "string")
                    message.maxLen = parseInt(object.maxLen, 10);
                else if (typeof object.maxLen === "number")
                    message.maxLen = object.maxLen;
                else if (typeof object.maxLen === "object")
                    message.maxLen = new $util.LongBits(object.maxLen.low >>> 0, object.maxLen.high >>> 0).toNumber(true);
            if (object.lenBytes != null)
                if ($util.Long)
                    (message.lenBytes = $util.Long.fromValue(object.lenBytes)).unsigned = true;
                else if (typeof object.lenBytes === "string")
                    message.lenBytes = parseInt(object.lenBytes, 10);
                else if (typeof object.lenBytes === "number")
                    message.lenBytes = object.lenBytes;
                else if (typeof object.lenBytes === "object")
                    message.lenBytes = new $util.LongBits(object.lenBytes.low >>> 0, object.lenBytes.high >>> 0).toNumber(true);
            if (object.minBytes != null)
                if ($util.Long)
                    (message.minBytes = $util.Long.fromValue(object.minBytes)).unsigned = true;
                else if (typeof object.minBytes === "string")
                    message.minBytes = parseInt(object.minBytes, 10);
                else if (typeof object.minBytes === "number")
                    message.minBytes = object.minBytes;
                else if (typeof object.minBytes === "object")
                    message.minBytes = new $util.LongBits(object.minBytes.low >>> 0, object.minBytes.high >>> 0).toNumber(true);
            if (object.maxBytes != null)
                if ($util.Long)
                    (message.maxBytes = $util.Long.fromValue(object.maxBytes)).unsigned = true;
                else if (typeof object.maxBytes === "string")
                    message.maxBytes = parseInt(object.maxBytes, 10);
                else if (typeof object.maxBytes === "number")
                    message.maxBytes = object.maxBytes;
                else if (typeof object.maxBytes === "object")
                    message.maxBytes = new $util.LongBits(object.maxBytes.low >>> 0, object.maxBytes.high >>> 0).toNumber(true);
            if (object.pattern != null)
                message.pattern = String(object.pattern);
            if (object.prefix != null)
                message.prefix = String(object.prefix);
            if (object.suffix != null)
                message.suffix = String(object.suffix);
            if (object.contains != null)
                message.contains = String(object.contains);
            if (object.notContains != null)
                message.notContains = String(object.notContains);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.StringRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = String(object["in"][i]);
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.StringRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = String(object.notIn[i]);
            }
            if (object.email != null)
                message.email = Boolean(object.email);
            if (object.hostname != null)
                message.hostname = Boolean(object.hostname);
            if (object.ip != null)
                message.ip = Boolean(object.ip);
            if (object.ipv4 != null)
                message.ipv4 = Boolean(object.ipv4);
            if (object.ipv6 != null)
                message.ipv6 = Boolean(object.ipv6);
            if (object.uri != null)
                message.uri = Boolean(object.uri);
            if (object.uriRef != null)
                message.uriRef = Boolean(object.uriRef);
            if (object.address != null)
                message.address = Boolean(object.address);
            if (object.uuid != null)
                message.uuid = Boolean(object.uuid);
            switch (object.wellKnownRegex) {
            case "UNKNOWN":
            case 0:
                message.wellKnownRegex = 0;
                break;
            case "HTTP_HEADER_NAME":
            case 1:
                message.wellKnownRegex = 1;
                break;
            case "HTTP_HEADER_VALUE":
            case 2:
                message.wellKnownRegex = 2;
                break;
            }
            if (object.strict != null)
                message.strict = Boolean(object.strict);
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a StringRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.StringRules
         * @static
         * @param {validate.StringRules} message StringRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StringRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = "";
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.minLen = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.minLen = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.maxLen = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.maxLen = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.minBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.minBytes = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.maxBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.maxBytes = options.longs === String ? "0" : 0;
                object.pattern = "";
                object.prefix = "";
                object.suffix = "";
                object.contains = "";
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.len = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.len = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.lenBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lenBytes = options.longs === String ? "0" : 0;
                object.notContains = "";
                object.strict = true;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.minLen != null && message.hasOwnProperty("minLen"))
                if (typeof message.minLen === "number")
                    object.minLen = options.longs === String ? String(message.minLen) : message.minLen;
                else
                    object.minLen = options.longs === String ? $util.Long.prototype.toString.call(message.minLen) : options.longs === Number ? new $util.LongBits(message.minLen.low >>> 0, message.minLen.high >>> 0).toNumber(true) : message.minLen;
            if (message.maxLen != null && message.hasOwnProperty("maxLen"))
                if (typeof message.maxLen === "number")
                    object.maxLen = options.longs === String ? String(message.maxLen) : message.maxLen;
                else
                    object.maxLen = options.longs === String ? $util.Long.prototype.toString.call(message.maxLen) : options.longs === Number ? new $util.LongBits(message.maxLen.low >>> 0, message.maxLen.high >>> 0).toNumber(true) : message.maxLen;
            if (message.minBytes != null && message.hasOwnProperty("minBytes"))
                if (typeof message.minBytes === "number")
                    object.minBytes = options.longs === String ? String(message.minBytes) : message.minBytes;
                else
                    object.minBytes = options.longs === String ? $util.Long.prototype.toString.call(message.minBytes) : options.longs === Number ? new $util.LongBits(message.minBytes.low >>> 0, message.minBytes.high >>> 0).toNumber(true) : message.minBytes;
            if (message.maxBytes != null && message.hasOwnProperty("maxBytes"))
                if (typeof message.maxBytes === "number")
                    object.maxBytes = options.longs === String ? String(message.maxBytes) : message.maxBytes;
                else
                    object.maxBytes = options.longs === String ? $util.Long.prototype.toString.call(message.maxBytes) : options.longs === Number ? new $util.LongBits(message.maxBytes.low >>> 0, message.maxBytes.high >>> 0).toNumber(true) : message.maxBytes;
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                object.pattern = message.pattern;
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                object.prefix = message.prefix;
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                object.suffix = message.suffix;
            if (message.contains != null && message.hasOwnProperty("contains"))
                object.contains = message.contains;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            if (message.email != null && message.hasOwnProperty("email")) {
                object.email = message.email;
                if (options.oneofs)
                    object.wellKnown = "email";
            }
            if (message.hostname != null && message.hasOwnProperty("hostname")) {
                object.hostname = message.hostname;
                if (options.oneofs)
                    object.wellKnown = "hostname";
            }
            if (message.ip != null && message.hasOwnProperty("ip")) {
                object.ip = message.ip;
                if (options.oneofs)
                    object.wellKnown = "ip";
            }
            if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                object.ipv4 = message.ipv4;
                if (options.oneofs)
                    object.wellKnown = "ipv4";
            }
            if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                object.ipv6 = message.ipv6;
                if (options.oneofs)
                    object.wellKnown = "ipv6";
            }
            if (message.uri != null && message.hasOwnProperty("uri")) {
                object.uri = message.uri;
                if (options.oneofs)
                    object.wellKnown = "uri";
            }
            if (message.uriRef != null && message.hasOwnProperty("uriRef")) {
                object.uriRef = message.uriRef;
                if (options.oneofs)
                    object.wellKnown = "uriRef";
            }
            if (message.len != null && message.hasOwnProperty("len"))
                if (typeof message.len === "number")
                    object.len = options.longs === String ? String(message.len) : message.len;
                else
                    object.len = options.longs === String ? $util.Long.prototype.toString.call(message.len) : options.longs === Number ? new $util.LongBits(message.len.low >>> 0, message.len.high >>> 0).toNumber(true) : message.len;
            if (message.lenBytes != null && message.hasOwnProperty("lenBytes"))
                if (typeof message.lenBytes === "number")
                    object.lenBytes = options.longs === String ? String(message.lenBytes) : message.lenBytes;
                else
                    object.lenBytes = options.longs === String ? $util.Long.prototype.toString.call(message.lenBytes) : options.longs === Number ? new $util.LongBits(message.lenBytes.low >>> 0, message.lenBytes.high >>> 0).toNumber(true) : message.lenBytes;
            if (message.address != null && message.hasOwnProperty("address")) {
                object.address = message.address;
                if (options.oneofs)
                    object.wellKnown = "address";
            }
            if (message.uuid != null && message.hasOwnProperty("uuid")) {
                object.uuid = message.uuid;
                if (options.oneofs)
                    object.wellKnown = "uuid";
            }
            if (message.notContains != null && message.hasOwnProperty("notContains"))
                object.notContains = message.notContains;
            if (message.wellKnownRegex != null && message.hasOwnProperty("wellKnownRegex")) {
                object.wellKnownRegex = options.enums === String ? $root.validate.KnownRegex[message.wellKnownRegex] : message.wellKnownRegex;
                if (options.oneofs)
                    object.wellKnown = "wellKnownRegex";
            }
            if (message.strict != null && message.hasOwnProperty("strict"))
                object.strict = message.strict;
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this StringRules to JSON.
         * @function toJSON
         * @memberof validate.StringRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StringRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StringRules;
    })();

    /**
     * KnownRegex enum.
     * @name validate.KnownRegex
     * @enum {number}
     * @property {number} UNKNOWN=0 UNKNOWN value
     * @property {number} HTTP_HEADER_NAME=1 HTTP_HEADER_NAME value
     * @property {number} HTTP_HEADER_VALUE=2 HTTP_HEADER_VALUE value
     */
    validate.KnownRegex = (function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "UNKNOWN"] = 0;
        values[valuesById[1] = "HTTP_HEADER_NAME"] = 1;
        values[valuesById[2] = "HTTP_HEADER_VALUE"] = 2;
        return values;
    })();

    validate.BytesRules = (function() {

        /**
         * Properties of a BytesRules.
         * @memberof validate
         * @interface IBytesRules
         * @property {Uint8Array|null} ["const"] BytesRules const
         * @property {number|Long|null} [len] BytesRules len
         * @property {number|Long|null} [minLen] BytesRules minLen
         * @property {number|Long|null} [maxLen] BytesRules maxLen
         * @property {string|null} [pattern] BytesRules pattern
         * @property {Uint8Array|null} [prefix] BytesRules prefix
         * @property {Uint8Array|null} [suffix] BytesRules suffix
         * @property {Uint8Array|null} [contains] BytesRules contains
         * @property {Array.<Uint8Array>|null} ["in"] BytesRules in
         * @property {Array.<Uint8Array>|null} [notIn] BytesRules notIn
         * @property {boolean|null} [ip] BytesRules ip
         * @property {boolean|null} [ipv4] BytesRules ipv4
         * @property {boolean|null} [ipv6] BytesRules ipv6
         * @property {boolean|null} [ignoreEmpty] BytesRules ignoreEmpty
         */

        /**
         * Constructs a new BytesRules.
         * @memberof validate
         * @classdesc Represents a BytesRules.
         * @implements IBytesRules
         * @constructor
         * @param {validate.IBytesRules=} [properties] Properties to set
         */
        function BytesRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BytesRules const.
         * @member {Uint8Array} const
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype["const"] = $util.newBuffer([]);

        /**
         * BytesRules len.
         * @member {number|Long} len
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.len = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BytesRules minLen.
         * @member {number|Long} minLen
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.minLen = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BytesRules maxLen.
         * @member {number|Long} maxLen
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.maxLen = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BytesRules pattern.
         * @member {string} pattern
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.pattern = "";

        /**
         * BytesRules prefix.
         * @member {Uint8Array} prefix
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.prefix = $util.newBuffer([]);

        /**
         * BytesRules suffix.
         * @member {Uint8Array} suffix
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.suffix = $util.newBuffer([]);

        /**
         * BytesRules contains.
         * @member {Uint8Array} contains
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.contains = $util.newBuffer([]);

        /**
         * BytesRules in.
         * @member {Array.<Uint8Array>} in
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype["in"] = $util.emptyArray;

        /**
         * BytesRules notIn.
         * @member {Array.<Uint8Array>} notIn
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.notIn = $util.emptyArray;

        /**
         * BytesRules ip.
         * @member {boolean|null|undefined} ip
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.ip = null;

        /**
         * BytesRules ipv4.
         * @member {boolean|null|undefined} ipv4
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.ipv4 = null;

        /**
         * BytesRules ipv6.
         * @member {boolean|null|undefined} ipv6
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.ipv6 = null;

        /**
         * BytesRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.BytesRules
         * @instance
         */
        BytesRules.prototype.ignoreEmpty = false;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * BytesRules wellKnown.
         * @member {"ip"|"ipv4"|"ipv6"|undefined} wellKnown
         * @memberof validate.BytesRules
         * @instance
         */
        Object.defineProperty(BytesRules.prototype, "wellKnown", {
            get: $util.oneOfGetter($oneOfFields = ["ip", "ipv4", "ipv6"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Verifies a BytesRules message.
         * @function verify
         * @memberof validate.BytesRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BytesRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            let properties = {};
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!(message["const"] && typeof message["const"].length === "number" || $util.isString(message["const"])))
                    return "const: buffer expected";
            if (message.len != null && message.hasOwnProperty("len"))
                if (!$util.isInteger(message.len) && !(message.len && $util.isInteger(message.len.low) && $util.isInteger(message.len.high)))
                    return "len: integer|Long expected";
            if (message.minLen != null && message.hasOwnProperty("minLen"))
                if (!$util.isInteger(message.minLen) && !(message.minLen && $util.isInteger(message.minLen.low) && $util.isInteger(message.minLen.high)))
                    return "minLen: integer|Long expected";
            if (message.maxLen != null && message.hasOwnProperty("maxLen"))
                if (!$util.isInteger(message.maxLen) && !(message.maxLen && $util.isInteger(message.maxLen.low) && $util.isInteger(message.maxLen.high)))
                    return "maxLen: integer|Long expected";
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                if (!$util.isString(message.pattern))
                    return "pattern: string expected";
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                if (!(message.prefix && typeof message.prefix.length === "number" || $util.isString(message.prefix)))
                    return "prefix: buffer expected";
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                if (!(message.suffix && typeof message.suffix.length === "number" || $util.isString(message.suffix)))
                    return "suffix: buffer expected";
            if (message.contains != null && message.hasOwnProperty("contains"))
                if (!(message.contains && typeof message.contains.length === "number" || $util.isString(message.contains)))
                    return "contains: buffer expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!(message["in"][i] && typeof message["in"][i].length === "number" || $util.isString(message["in"][i])))
                        return "in: buffer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!(message.notIn[i] && typeof message.notIn[i].length === "number" || $util.isString(message.notIn[i])))
                        return "notIn: buffer[] expected";
            }
            if (message.ip != null && message.hasOwnProperty("ip")) {
                properties.wellKnown = 1;
                if (typeof message.ip !== "boolean")
                    return "ip: boolean expected";
            }
            if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.ipv4 !== "boolean")
                    return "ipv4: boolean expected";
            }
            if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                if (properties.wellKnown === 1)
                    return "wellKnown: multiple values";
                properties.wellKnown = 1;
                if (typeof message.ipv6 !== "boolean")
                    return "ipv6: boolean expected";
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a BytesRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.BytesRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.BytesRules} BytesRules
         */
        BytesRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.BytesRules)
                return object;
            let message = new $root.validate.BytesRules();
            if (object["const"] != null)
                if (typeof object["const"] === "string")
                    $util.base64.decode(object["const"], message["const"] = $util.newBuffer($util.base64.length(object["const"])), 0);
                else if (object["const"].length)
                    message["const"] = object["const"];
            if (object.len != null)
                if ($util.Long)
                    (message.len = $util.Long.fromValue(object.len)).unsigned = true;
                else if (typeof object.len === "string")
                    message.len = parseInt(object.len, 10);
                else if (typeof object.len === "number")
                    message.len = object.len;
                else if (typeof object.len === "object")
                    message.len = new $util.LongBits(object.len.low >>> 0, object.len.high >>> 0).toNumber(true);
            if (object.minLen != null)
                if ($util.Long)
                    (message.minLen = $util.Long.fromValue(object.minLen)).unsigned = true;
                else if (typeof object.minLen === "string")
                    message.minLen = parseInt(object.minLen, 10);
                else if (typeof object.minLen === "number")
                    message.minLen = object.minLen;
                else if (typeof object.minLen === "object")
                    message.minLen = new $util.LongBits(object.minLen.low >>> 0, object.minLen.high >>> 0).toNumber(true);
            if (object.maxLen != null)
                if ($util.Long)
                    (message.maxLen = $util.Long.fromValue(object.maxLen)).unsigned = true;
                else if (typeof object.maxLen === "string")
                    message.maxLen = parseInt(object.maxLen, 10);
                else if (typeof object.maxLen === "number")
                    message.maxLen = object.maxLen;
                else if (typeof object.maxLen === "object")
                    message.maxLen = new $util.LongBits(object.maxLen.low >>> 0, object.maxLen.high >>> 0).toNumber(true);
            if (object.pattern != null)
                message.pattern = String(object.pattern);
            if (object.prefix != null)
                if (typeof object.prefix === "string")
                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);
                else if (object.prefix.length)
                    message.prefix = object.prefix;
            if (object.suffix != null)
                if (typeof object.suffix === "string")
                    $util.base64.decode(object.suffix, message.suffix = $util.newBuffer($util.base64.length(object.suffix)), 0);
                else if (object.suffix.length)
                    message.suffix = object.suffix;
            if (object.contains != null)
                if (typeof object.contains === "string")
                    $util.base64.decode(object.contains, message.contains = $util.newBuffer($util.base64.length(object.contains)), 0);
                else if (object.contains.length)
                    message.contains = object.contains;
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.BytesRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    if (typeof object["in"][i] === "string")
                        $util.base64.decode(object["in"][i], message["in"][i] = $util.newBuffer($util.base64.length(object["in"][i])), 0);
                    else if (object["in"][i].length)
                        message["in"][i] = object["in"][i];
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.BytesRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    if (typeof object.notIn[i] === "string")
                        $util.base64.decode(object.notIn[i], message.notIn[i] = $util.newBuffer($util.base64.length(object.notIn[i])), 0);
                    else if (object.notIn[i].length)
                        message.notIn[i] = object.notIn[i];
            }
            if (object.ip != null)
                message.ip = Boolean(object.ip);
            if (object.ipv4 != null)
                message.ipv4 = Boolean(object.ipv4);
            if (object.ipv6 != null)
                message.ipv6 = Boolean(object.ipv6);
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a BytesRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.BytesRules
         * @static
         * @param {validate.BytesRules} message BytesRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BytesRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                if (options.bytes === String)
                    object["const"] = "";
                else {
                    object["const"] = [];
                    if (options.bytes !== Array)
                        object["const"] = $util.newBuffer(object["const"]);
                }
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.minLen = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.minLen = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.maxLen = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.maxLen = options.longs === String ? "0" : 0;
                object.pattern = "";
                if (options.bytes === String)
                    object.prefix = "";
                else {
                    object.prefix = [];
                    if (options.bytes !== Array)
                        object.prefix = $util.newBuffer(object.prefix);
                }
                if (options.bytes === String)
                    object.suffix = "";
                else {
                    object.suffix = [];
                    if (options.bytes !== Array)
                        object.suffix = $util.newBuffer(object.suffix);
                }
                if (options.bytes === String)
                    object.contains = "";
                else {
                    object.contains = [];
                    if (options.bytes !== Array)
                        object.contains = $util.newBuffer(object.contains);
                }
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.len = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.len = options.longs === String ? "0" : 0;
                object.ignoreEmpty = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = options.bytes === String ? $util.base64.encode(message["const"], 0, message["const"].length) : options.bytes === Array ? Array.prototype.slice.call(message["const"]) : message["const"];
            if (message.minLen != null && message.hasOwnProperty("minLen"))
                if (typeof message.minLen === "number")
                    object.minLen = options.longs === String ? String(message.minLen) : message.minLen;
                else
                    object.minLen = options.longs === String ? $util.Long.prototype.toString.call(message.minLen) : options.longs === Number ? new $util.LongBits(message.minLen.low >>> 0, message.minLen.high >>> 0).toNumber(true) : message.minLen;
            if (message.maxLen != null && message.hasOwnProperty("maxLen"))
                if (typeof message.maxLen === "number")
                    object.maxLen = options.longs === String ? String(message.maxLen) : message.maxLen;
                else
                    object.maxLen = options.longs === String ? $util.Long.prototype.toString.call(message.maxLen) : options.longs === Number ? new $util.LongBits(message.maxLen.low >>> 0, message.maxLen.high >>> 0).toNumber(true) : message.maxLen;
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                object.pattern = message.pattern;
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                object.suffix = options.bytes === String ? $util.base64.encode(message.suffix, 0, message.suffix.length) : options.bytes === Array ? Array.prototype.slice.call(message.suffix) : message.suffix;
            if (message.contains != null && message.hasOwnProperty("contains"))
                object.contains = options.bytes === String ? $util.base64.encode(message.contains, 0, message.contains.length) : options.bytes === Array ? Array.prototype.slice.call(message.contains) : message.contains;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = options.bytes === String ? $util.base64.encode(message["in"][j], 0, message["in"][j].length) : options.bytes === Array ? Array.prototype.slice.call(message["in"][j]) : message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = options.bytes === String ? $util.base64.encode(message.notIn[j], 0, message.notIn[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.notIn[j]) : message.notIn[j];
            }
            if (message.ip != null && message.hasOwnProperty("ip")) {
                object.ip = message.ip;
                if (options.oneofs)
                    object.wellKnown = "ip";
            }
            if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                object.ipv4 = message.ipv4;
                if (options.oneofs)
                    object.wellKnown = "ipv4";
            }
            if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                object.ipv6 = message.ipv6;
                if (options.oneofs)
                    object.wellKnown = "ipv6";
            }
            if (message.len != null && message.hasOwnProperty("len"))
                if (typeof message.len === "number")
                    object.len = options.longs === String ? String(message.len) : message.len;
                else
                    object.len = options.longs === String ? $util.Long.prototype.toString.call(message.len) : options.longs === Number ? new $util.LongBits(message.len.low >>> 0, message.len.high >>> 0).toNumber(true) : message.len;
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this BytesRules to JSON.
         * @function toJSON
         * @memberof validate.BytesRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BytesRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BytesRules;
    })();

    validate.EnumRules = (function() {

        /**
         * Properties of an EnumRules.
         * @memberof validate
         * @interface IEnumRules
         * @property {number|null} ["const"] EnumRules const
         * @property {boolean|null} [definedOnly] EnumRules definedOnly
         * @property {Array.<number>|null} ["in"] EnumRules in
         * @property {Array.<number>|null} [notIn] EnumRules notIn
         */

        /**
         * Constructs a new EnumRules.
         * @memberof validate
         * @classdesc Represents an EnumRules.
         * @implements IEnumRules
         * @constructor
         * @param {validate.IEnumRules=} [properties] Properties to set
         */
        function EnumRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EnumRules const.
         * @member {number} const
         * @memberof validate.EnumRules
         * @instance
         */
        EnumRules.prototype["const"] = 0;

        /**
         * EnumRules definedOnly.
         * @member {boolean} definedOnly
         * @memberof validate.EnumRules
         * @instance
         */
        EnumRules.prototype.definedOnly = false;

        /**
         * EnumRules in.
         * @member {Array.<number>} in
         * @memberof validate.EnumRules
         * @instance
         */
        EnumRules.prototype["in"] = $util.emptyArray;

        /**
         * EnumRules notIn.
         * @member {Array.<number>} notIn
         * @memberof validate.EnumRules
         * @instance
         */
        EnumRules.prototype.notIn = $util.emptyArray;

        /**
         * Verifies an EnumRules message.
         * @function verify
         * @memberof validate.EnumRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EnumRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["const"] != null && message.hasOwnProperty("const"))
                if (!$util.isInteger(message["const"]))
                    return "const: integer expected";
            if (message.definedOnly != null && message.hasOwnProperty("definedOnly"))
                if (typeof message.definedOnly !== "boolean")
                    return "definedOnly: boolean expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isInteger(message["in"][i]))
                        return "in: integer[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isInteger(message.notIn[i]))
                        return "notIn: integer[] expected";
            }
            return null;
        };

        /**
         * Creates an EnumRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.EnumRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.EnumRules} EnumRules
         */
        EnumRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.EnumRules)
                return object;
            let message = new $root.validate.EnumRules();
            if (object["const"] != null)
                message["const"] = object["const"] | 0;
            if (object.definedOnly != null)
                message.definedOnly = Boolean(object.definedOnly);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.EnumRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = object["in"][i] | 0;
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.EnumRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = object.notIn[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from an EnumRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.EnumRules
         * @static
         * @param {validate.EnumRules} message EnumRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EnumRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object["const"] = 0;
                object.definedOnly = false;
            }
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = message["const"];
            if (message.definedOnly != null && message.hasOwnProperty("definedOnly"))
                object.definedOnly = message.definedOnly;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            return object;
        };

        /**
         * Converts this EnumRules to JSON.
         * @function toJSON
         * @memberof validate.EnumRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EnumRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EnumRules;
    })();

    validate.MessageRules = (function() {

        /**
         * Properties of a MessageRules.
         * @memberof validate
         * @interface IMessageRules
         * @property {boolean|null} [skip] MessageRules skip
         * @property {boolean|null} [required] MessageRules required
         */

        /**
         * Constructs a new MessageRules.
         * @memberof validate
         * @classdesc Represents a MessageRules.
         * @implements IMessageRules
         * @constructor
         * @param {validate.IMessageRules=} [properties] Properties to set
         */
        function MessageRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MessageRules skip.
         * @member {boolean} skip
         * @memberof validate.MessageRules
         * @instance
         */
        MessageRules.prototype.skip = false;

        /**
         * MessageRules required.
         * @member {boolean} required
         * @memberof validate.MessageRules
         * @instance
         */
        MessageRules.prototype.required = false;

        /**
         * Verifies a MessageRules message.
         * @function verify
         * @memberof validate.MessageRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MessageRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.skip != null && message.hasOwnProperty("skip"))
                if (typeof message.skip !== "boolean")
                    return "skip: boolean expected";
            if (message.required != null && message.hasOwnProperty("required"))
                if (typeof message.required !== "boolean")
                    return "required: boolean expected";
            return null;
        };

        /**
         * Creates a MessageRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.MessageRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.MessageRules} MessageRules
         */
        MessageRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.MessageRules)
                return object;
            let message = new $root.validate.MessageRules();
            if (object.skip != null)
                message.skip = Boolean(object.skip);
            if (object.required != null)
                message.required = Boolean(object.required);
            return message;
        };

        /**
         * Creates a plain object from a MessageRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.MessageRules
         * @static
         * @param {validate.MessageRules} message MessageRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MessageRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.skip = false;
                object.required = false;
            }
            if (message.skip != null && message.hasOwnProperty("skip"))
                object.skip = message.skip;
            if (message.required != null && message.hasOwnProperty("required"))
                object.required = message.required;
            return object;
        };

        /**
         * Converts this MessageRules to JSON.
         * @function toJSON
         * @memberof validate.MessageRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MessageRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MessageRules;
    })();

    validate.RepeatedRules = (function() {

        /**
         * Properties of a RepeatedRules.
         * @memberof validate
         * @interface IRepeatedRules
         * @property {number|Long|null} [minItems] RepeatedRules minItems
         * @property {number|Long|null} [maxItems] RepeatedRules maxItems
         * @property {boolean|null} [unique] RepeatedRules unique
         * @property {validate.IFieldRules|null} [items] RepeatedRules items
         * @property {boolean|null} [ignoreEmpty] RepeatedRules ignoreEmpty
         */

        /**
         * Constructs a new RepeatedRules.
         * @memberof validate
         * @classdesc Represents a RepeatedRules.
         * @implements IRepeatedRules
         * @constructor
         * @param {validate.IRepeatedRules=} [properties] Properties to set
         */
        function RepeatedRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RepeatedRules minItems.
         * @member {number|Long} minItems
         * @memberof validate.RepeatedRules
         * @instance
         */
        RepeatedRules.prototype.minItems = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * RepeatedRules maxItems.
         * @member {number|Long} maxItems
         * @memberof validate.RepeatedRules
         * @instance
         */
        RepeatedRules.prototype.maxItems = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * RepeatedRules unique.
         * @member {boolean} unique
         * @memberof validate.RepeatedRules
         * @instance
         */
        RepeatedRules.prototype.unique = false;

        /**
         * RepeatedRules items.
         * @member {validate.IFieldRules|null|undefined} items
         * @memberof validate.RepeatedRules
         * @instance
         */
        RepeatedRules.prototype.items = null;

        /**
         * RepeatedRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.RepeatedRules
         * @instance
         */
        RepeatedRules.prototype.ignoreEmpty = false;

        /**
         * Verifies a RepeatedRules message.
         * @function verify
         * @memberof validate.RepeatedRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RepeatedRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.minItems != null && message.hasOwnProperty("minItems"))
                if (!$util.isInteger(message.minItems) && !(message.minItems && $util.isInteger(message.minItems.low) && $util.isInteger(message.minItems.high)))
                    return "minItems: integer|Long expected";
            if (message.maxItems != null && message.hasOwnProperty("maxItems"))
                if (!$util.isInteger(message.maxItems) && !(message.maxItems && $util.isInteger(message.maxItems.low) && $util.isInteger(message.maxItems.high)))
                    return "maxItems: integer|Long expected";
            if (message.unique != null && message.hasOwnProperty("unique"))
                if (typeof message.unique !== "boolean")
                    return "unique: boolean expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                let error = $root.validate.FieldRules.verify(message.items);
                if (error)
                    return "items." + error;
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a RepeatedRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.RepeatedRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.RepeatedRules} RepeatedRules
         */
        RepeatedRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.RepeatedRules)
                return object;
            let message = new $root.validate.RepeatedRules();
            if (object.minItems != null)
                if ($util.Long)
                    (message.minItems = $util.Long.fromValue(object.minItems)).unsigned = true;
                else if (typeof object.minItems === "string")
                    message.minItems = parseInt(object.minItems, 10);
                else if (typeof object.minItems === "number")
                    message.minItems = object.minItems;
                else if (typeof object.minItems === "object")
                    message.minItems = new $util.LongBits(object.minItems.low >>> 0, object.minItems.high >>> 0).toNumber(true);
            if (object.maxItems != null)
                if ($util.Long)
                    (message.maxItems = $util.Long.fromValue(object.maxItems)).unsigned = true;
                else if (typeof object.maxItems === "string")
                    message.maxItems = parseInt(object.maxItems, 10);
                else if (typeof object.maxItems === "number")
                    message.maxItems = object.maxItems;
                else if (typeof object.maxItems === "object")
                    message.maxItems = new $util.LongBits(object.maxItems.low >>> 0, object.maxItems.high >>> 0).toNumber(true);
            if (object.unique != null)
                message.unique = Boolean(object.unique);
            if (object.items != null) {
                if (typeof object.items !== "object")
                    throw TypeError(".validate.RepeatedRules.items: object expected");
                message.items = $root.validate.FieldRules.fromObject(object.items);
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a RepeatedRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.RepeatedRules
         * @static
         * @param {validate.RepeatedRules} message RepeatedRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RepeatedRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.minItems = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.minItems = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.maxItems = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.maxItems = options.longs === String ? "0" : 0;
                object.unique = false;
                object.items = null;
                object.ignoreEmpty = false;
            }
            if (message.minItems != null && message.hasOwnProperty("minItems"))
                if (typeof message.minItems === "number")
                    object.minItems = options.longs === String ? String(message.minItems) : message.minItems;
                else
                    object.minItems = options.longs === String ? $util.Long.prototype.toString.call(message.minItems) : options.longs === Number ? new $util.LongBits(message.minItems.low >>> 0, message.minItems.high >>> 0).toNumber(true) : message.minItems;
            if (message.maxItems != null && message.hasOwnProperty("maxItems"))
                if (typeof message.maxItems === "number")
                    object.maxItems = options.longs === String ? String(message.maxItems) : message.maxItems;
                else
                    object.maxItems = options.longs === String ? $util.Long.prototype.toString.call(message.maxItems) : options.longs === Number ? new $util.LongBits(message.maxItems.low >>> 0, message.maxItems.high >>> 0).toNumber(true) : message.maxItems;
            if (message.unique != null && message.hasOwnProperty("unique"))
                object.unique = message.unique;
            if (message.items != null && message.hasOwnProperty("items"))
                object.items = $root.validate.FieldRules.toObject(message.items, options);
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this RepeatedRules to JSON.
         * @function toJSON
         * @memberof validate.RepeatedRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RepeatedRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RepeatedRules;
    })();

    validate.MapRules = (function() {

        /**
         * Properties of a MapRules.
         * @memberof validate
         * @interface IMapRules
         * @property {number|Long|null} [minPairs] MapRules minPairs
         * @property {number|Long|null} [maxPairs] MapRules maxPairs
         * @property {boolean|null} [noSparse] MapRules noSparse
         * @property {validate.IFieldRules|null} [keys] MapRules keys
         * @property {validate.IFieldRules|null} [values] MapRules values
         * @property {boolean|null} [ignoreEmpty] MapRules ignoreEmpty
         */

        /**
         * Constructs a new MapRules.
         * @memberof validate
         * @classdesc Represents a MapRules.
         * @implements IMapRules
         * @constructor
         * @param {validate.IMapRules=} [properties] Properties to set
         */
        function MapRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MapRules minPairs.
         * @member {number|Long} minPairs
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.minPairs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * MapRules maxPairs.
         * @member {number|Long} maxPairs
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.maxPairs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * MapRules noSparse.
         * @member {boolean} noSparse
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.noSparse = false;

        /**
         * MapRules keys.
         * @member {validate.IFieldRules|null|undefined} keys
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.keys = null;

        /**
         * MapRules values.
         * @member {validate.IFieldRules|null|undefined} values
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.values = null;

        /**
         * MapRules ignoreEmpty.
         * @member {boolean} ignoreEmpty
         * @memberof validate.MapRules
         * @instance
         */
        MapRules.prototype.ignoreEmpty = false;

        /**
         * Verifies a MapRules message.
         * @function verify
         * @memberof validate.MapRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MapRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.minPairs != null && message.hasOwnProperty("minPairs"))
                if (!$util.isInteger(message.minPairs) && !(message.minPairs && $util.isInteger(message.minPairs.low) && $util.isInteger(message.minPairs.high)))
                    return "minPairs: integer|Long expected";
            if (message.maxPairs != null && message.hasOwnProperty("maxPairs"))
                if (!$util.isInteger(message.maxPairs) && !(message.maxPairs && $util.isInteger(message.maxPairs.low) && $util.isInteger(message.maxPairs.high)))
                    return "maxPairs: integer|Long expected";
            if (message.noSparse != null && message.hasOwnProperty("noSparse"))
                if (typeof message.noSparse !== "boolean")
                    return "noSparse: boolean expected";
            if (message.keys != null && message.hasOwnProperty("keys")) {
                let error = $root.validate.FieldRules.verify(message.keys);
                if (error)
                    return "keys." + error;
            }
            if (message.values != null && message.hasOwnProperty("values")) {
                let error = $root.validate.FieldRules.verify(message.values);
                if (error)
                    return "values." + error;
            }
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                if (typeof message.ignoreEmpty !== "boolean")
                    return "ignoreEmpty: boolean expected";
            return null;
        };

        /**
         * Creates a MapRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.MapRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.MapRules} MapRules
         */
        MapRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.MapRules)
                return object;
            let message = new $root.validate.MapRules();
            if (object.minPairs != null)
                if ($util.Long)
                    (message.minPairs = $util.Long.fromValue(object.minPairs)).unsigned = true;
                else if (typeof object.minPairs === "string")
                    message.minPairs = parseInt(object.minPairs, 10);
                else if (typeof object.minPairs === "number")
                    message.minPairs = object.minPairs;
                else if (typeof object.minPairs === "object")
                    message.minPairs = new $util.LongBits(object.minPairs.low >>> 0, object.minPairs.high >>> 0).toNumber(true);
            if (object.maxPairs != null)
                if ($util.Long)
                    (message.maxPairs = $util.Long.fromValue(object.maxPairs)).unsigned = true;
                else if (typeof object.maxPairs === "string")
                    message.maxPairs = parseInt(object.maxPairs, 10);
                else if (typeof object.maxPairs === "number")
                    message.maxPairs = object.maxPairs;
                else if (typeof object.maxPairs === "object")
                    message.maxPairs = new $util.LongBits(object.maxPairs.low >>> 0, object.maxPairs.high >>> 0).toNumber(true);
            if (object.noSparse != null)
                message.noSparse = Boolean(object.noSparse);
            if (object.keys != null) {
                if (typeof object.keys !== "object")
                    throw TypeError(".validate.MapRules.keys: object expected");
                message.keys = $root.validate.FieldRules.fromObject(object.keys);
            }
            if (object.values != null) {
                if (typeof object.values !== "object")
                    throw TypeError(".validate.MapRules.values: object expected");
                message.values = $root.validate.FieldRules.fromObject(object.values);
            }
            if (object.ignoreEmpty != null)
                message.ignoreEmpty = Boolean(object.ignoreEmpty);
            return message;
        };

        /**
         * Creates a plain object from a MapRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.MapRules
         * @static
         * @param {validate.MapRules} message MapRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MapRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.minPairs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.minPairs = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    let long = new $util.Long(0, 0, true);
                    object.maxPairs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.maxPairs = options.longs === String ? "0" : 0;
                object.noSparse = false;
                object.keys = null;
                object.values = null;
                object.ignoreEmpty = false;
            }
            if (message.minPairs != null && message.hasOwnProperty("minPairs"))
                if (typeof message.minPairs === "number")
                    object.minPairs = options.longs === String ? String(message.minPairs) : message.minPairs;
                else
                    object.minPairs = options.longs === String ? $util.Long.prototype.toString.call(message.minPairs) : options.longs === Number ? new $util.LongBits(message.minPairs.low >>> 0, message.minPairs.high >>> 0).toNumber(true) : message.minPairs;
            if (message.maxPairs != null && message.hasOwnProperty("maxPairs"))
                if (typeof message.maxPairs === "number")
                    object.maxPairs = options.longs === String ? String(message.maxPairs) : message.maxPairs;
                else
                    object.maxPairs = options.longs === String ? $util.Long.prototype.toString.call(message.maxPairs) : options.longs === Number ? new $util.LongBits(message.maxPairs.low >>> 0, message.maxPairs.high >>> 0).toNumber(true) : message.maxPairs;
            if (message.noSparse != null && message.hasOwnProperty("noSparse"))
                object.noSparse = message.noSparse;
            if (message.keys != null && message.hasOwnProperty("keys"))
                object.keys = $root.validate.FieldRules.toObject(message.keys, options);
            if (message.values != null && message.hasOwnProperty("values"))
                object.values = $root.validate.FieldRules.toObject(message.values, options);
            if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                object.ignoreEmpty = message.ignoreEmpty;
            return object;
        };

        /**
         * Converts this MapRules to JSON.
         * @function toJSON
         * @memberof validate.MapRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MapRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MapRules;
    })();

    validate.AnyRules = (function() {

        /**
         * Properties of an AnyRules.
         * @memberof validate
         * @interface IAnyRules
         * @property {boolean|null} [required] AnyRules required
         * @property {Array.<string>|null} ["in"] AnyRules in
         * @property {Array.<string>|null} [notIn] AnyRules notIn
         */

        /**
         * Constructs a new AnyRules.
         * @memberof validate
         * @classdesc Represents an AnyRules.
         * @implements IAnyRules
         * @constructor
         * @param {validate.IAnyRules=} [properties] Properties to set
         */
        function AnyRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AnyRules required.
         * @member {boolean} required
         * @memberof validate.AnyRules
         * @instance
         */
        AnyRules.prototype.required = false;

        /**
         * AnyRules in.
         * @member {Array.<string>} in
         * @memberof validate.AnyRules
         * @instance
         */
        AnyRules.prototype["in"] = $util.emptyArray;

        /**
         * AnyRules notIn.
         * @member {Array.<string>} notIn
         * @memberof validate.AnyRules
         * @instance
         */
        AnyRules.prototype.notIn = $util.emptyArray;

        /**
         * Verifies an AnyRules message.
         * @function verify
         * @memberof validate.AnyRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AnyRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.required != null && message.hasOwnProperty("required"))
                if (typeof message.required !== "boolean")
                    return "required: boolean expected";
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i)
                    if (!$util.isString(message["in"][i]))
                        return "in: string[] expected";
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i)
                    if (!$util.isString(message.notIn[i]))
                        return "notIn: string[] expected";
            }
            return null;
        };

        /**
         * Creates an AnyRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.AnyRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.AnyRules} AnyRules
         */
        AnyRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.AnyRules)
                return object;
            let message = new $root.validate.AnyRules();
            if (object.required != null)
                message.required = Boolean(object.required);
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.AnyRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i)
                    message["in"][i] = String(object["in"][i]);
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.AnyRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i)
                    message.notIn[i] = String(object.notIn[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from an AnyRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.AnyRules
         * @static
         * @param {validate.AnyRules} message AnyRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AnyRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults)
                object.required = false;
            if (message.required != null && message.hasOwnProperty("required"))
                object.required = message.required;
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = message["in"][j];
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = message.notIn[j];
            }
            return object;
        };

        /**
         * Converts this AnyRules to JSON.
         * @function toJSON
         * @memberof validate.AnyRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AnyRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AnyRules;
    })();

    validate.DurationRules = (function() {

        /**
         * Properties of a DurationRules.
         * @memberof validate
         * @interface IDurationRules
         * @property {boolean|null} [required] DurationRules required
         * @property {google.protobuf.IDuration|null} ["const"] DurationRules const
         * @property {google.protobuf.IDuration|null} [lt] DurationRules lt
         * @property {google.protobuf.IDuration|null} [lte] DurationRules lte
         * @property {google.protobuf.IDuration|null} [gt] DurationRules gt
         * @property {google.protobuf.IDuration|null} [gte] DurationRules gte
         * @property {Array.<google.protobuf.IDuration>|null} ["in"] DurationRules in
         * @property {Array.<google.protobuf.IDuration>|null} [notIn] DurationRules notIn
         */

        /**
         * Constructs a new DurationRules.
         * @memberof validate
         * @classdesc Represents a DurationRules.
         * @implements IDurationRules
         * @constructor
         * @param {validate.IDurationRules=} [properties] Properties to set
         */
        function DurationRules(properties) {
            this["in"] = [];
            this.notIn = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DurationRules required.
         * @member {boolean} required
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.required = false;

        /**
         * DurationRules const.
         * @member {google.protobuf.IDuration|null|undefined} const
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype["const"] = null;

        /**
         * DurationRules lt.
         * @member {google.protobuf.IDuration|null|undefined} lt
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.lt = null;

        /**
         * DurationRules lte.
         * @member {google.protobuf.IDuration|null|undefined} lte
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.lte = null;

        /**
         * DurationRules gt.
         * @member {google.protobuf.IDuration|null|undefined} gt
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.gt = null;

        /**
         * DurationRules gte.
         * @member {google.protobuf.IDuration|null|undefined} gte
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.gte = null;

        /**
         * DurationRules in.
         * @member {Array.<google.protobuf.IDuration>} in
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype["in"] = $util.emptyArray;

        /**
         * DurationRules notIn.
         * @member {Array.<google.protobuf.IDuration>} notIn
         * @memberof validate.DurationRules
         * @instance
         */
        DurationRules.prototype.notIn = $util.emptyArray;

        /**
         * Verifies a DurationRules message.
         * @function verify
         * @memberof validate.DurationRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DurationRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.required != null && message.hasOwnProperty("required"))
                if (typeof message.required !== "boolean")
                    return "required: boolean expected";
            if (message["const"] != null && message.hasOwnProperty("const")) {
                let error = $root.google.protobuf.Duration.verify(message["const"]);
                if (error)
                    return "const." + error;
            }
            if (message.lt != null && message.hasOwnProperty("lt")) {
                let error = $root.google.protobuf.Duration.verify(message.lt);
                if (error)
                    return "lt." + error;
            }
            if (message.lte != null && message.hasOwnProperty("lte")) {
                let error = $root.google.protobuf.Duration.verify(message.lte);
                if (error)
                    return "lte." + error;
            }
            if (message.gt != null && message.hasOwnProperty("gt")) {
                let error = $root.google.protobuf.Duration.verify(message.gt);
                if (error)
                    return "gt." + error;
            }
            if (message.gte != null && message.hasOwnProperty("gte")) {
                let error = $root.google.protobuf.Duration.verify(message.gte);
                if (error)
                    return "gte." + error;
            }
            if (message["in"] != null && message.hasOwnProperty("in")) {
                if (!Array.isArray(message["in"]))
                    return "in: array expected";
                for (let i = 0; i < message["in"].length; ++i) {
                    let error = $root.google.protobuf.Duration.verify(message["in"][i]);
                    if (error)
                        return "in." + error;
                }
            }
            if (message.notIn != null && message.hasOwnProperty("notIn")) {
                if (!Array.isArray(message.notIn))
                    return "notIn: array expected";
                for (let i = 0; i < message.notIn.length; ++i) {
                    let error = $root.google.protobuf.Duration.verify(message.notIn[i]);
                    if (error)
                        return "notIn." + error;
                }
            }
            return null;
        };

        /**
         * Creates a DurationRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.DurationRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.DurationRules} DurationRules
         */
        DurationRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.DurationRules)
                return object;
            let message = new $root.validate.DurationRules();
            if (object.required != null)
                message.required = Boolean(object.required);
            if (object["const"] != null) {
                if (typeof object["const"] !== "object")
                    throw TypeError(".validate.DurationRules.const: object expected");
                message["const"] = $root.google.protobuf.Duration.fromObject(object["const"]);
            }
            if (object.lt != null) {
                if (typeof object.lt !== "object")
                    throw TypeError(".validate.DurationRules.lt: object expected");
                message.lt = $root.google.protobuf.Duration.fromObject(object.lt);
            }
            if (object.lte != null) {
                if (typeof object.lte !== "object")
                    throw TypeError(".validate.DurationRules.lte: object expected");
                message.lte = $root.google.protobuf.Duration.fromObject(object.lte);
            }
            if (object.gt != null) {
                if (typeof object.gt !== "object")
                    throw TypeError(".validate.DurationRules.gt: object expected");
                message.gt = $root.google.protobuf.Duration.fromObject(object.gt);
            }
            if (object.gte != null) {
                if (typeof object.gte !== "object")
                    throw TypeError(".validate.DurationRules.gte: object expected");
                message.gte = $root.google.protobuf.Duration.fromObject(object.gte);
            }
            if (object["in"]) {
                if (!Array.isArray(object["in"]))
                    throw TypeError(".validate.DurationRules.in: array expected");
                message["in"] = [];
                for (let i = 0; i < object["in"].length; ++i) {
                    if (typeof object["in"][i] !== "object")
                        throw TypeError(".validate.DurationRules.in: object expected");
                    message["in"][i] = $root.google.protobuf.Duration.fromObject(object["in"][i]);
                }
            }
            if (object.notIn) {
                if (!Array.isArray(object.notIn))
                    throw TypeError(".validate.DurationRules.notIn: array expected");
                message.notIn = [];
                for (let i = 0; i < object.notIn.length; ++i) {
                    if (typeof object.notIn[i] !== "object")
                        throw TypeError(".validate.DurationRules.notIn: object expected");
                    message.notIn[i] = $root.google.protobuf.Duration.fromObject(object.notIn[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a DurationRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.DurationRules
         * @static
         * @param {validate.DurationRules} message DurationRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DurationRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object["in"] = [];
                object.notIn = [];
            }
            if (options.defaults) {
                object.required = false;
                object["const"] = null;
                object.lt = null;
                object.lte = null;
                object.gt = null;
                object.gte = null;
            }
            if (message.required != null && message.hasOwnProperty("required"))
                object.required = message.required;
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = $root.google.protobuf.Duration.toObject(message["const"], options);
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = $root.google.protobuf.Duration.toObject(message.lt, options);
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = $root.google.protobuf.Duration.toObject(message.lte, options);
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = $root.google.protobuf.Duration.toObject(message.gt, options);
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = $root.google.protobuf.Duration.toObject(message.gte, options);
            if (message["in"] && message["in"].length) {
                object["in"] = [];
                for (let j = 0; j < message["in"].length; ++j)
                    object["in"][j] = $root.google.protobuf.Duration.toObject(message["in"][j], options);
            }
            if (message.notIn && message.notIn.length) {
                object.notIn = [];
                for (let j = 0; j < message.notIn.length; ++j)
                    object.notIn[j] = $root.google.protobuf.Duration.toObject(message.notIn[j], options);
            }
            return object;
        };

        /**
         * Converts this DurationRules to JSON.
         * @function toJSON
         * @memberof validate.DurationRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DurationRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DurationRules;
    })();

    validate.TimestampRules = (function() {

        /**
         * Properties of a TimestampRules.
         * @memberof validate
         * @interface ITimestampRules
         * @property {boolean|null} [required] TimestampRules required
         * @property {google.protobuf.ITimestamp|null} ["const"] TimestampRules const
         * @property {google.protobuf.ITimestamp|null} [lt] TimestampRules lt
         * @property {google.protobuf.ITimestamp|null} [lte] TimestampRules lte
         * @property {google.protobuf.ITimestamp|null} [gt] TimestampRules gt
         * @property {google.protobuf.ITimestamp|null} [gte] TimestampRules gte
         * @property {boolean|null} [ltNow] TimestampRules ltNow
         * @property {boolean|null} [gtNow] TimestampRules gtNow
         * @property {google.protobuf.IDuration|null} [within] TimestampRules within
         */

        /**
         * Constructs a new TimestampRules.
         * @memberof validate
         * @classdesc Represents a TimestampRules.
         * @implements ITimestampRules
         * @constructor
         * @param {validate.ITimestampRules=} [properties] Properties to set
         */
        function TimestampRules(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TimestampRules required.
         * @member {boolean} required
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.required = false;

        /**
         * TimestampRules const.
         * @member {google.protobuf.ITimestamp|null|undefined} const
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype["const"] = null;

        /**
         * TimestampRules lt.
         * @member {google.protobuf.ITimestamp|null|undefined} lt
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.lt = null;

        /**
         * TimestampRules lte.
         * @member {google.protobuf.ITimestamp|null|undefined} lte
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.lte = null;

        /**
         * TimestampRules gt.
         * @member {google.protobuf.ITimestamp|null|undefined} gt
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.gt = null;

        /**
         * TimestampRules gte.
         * @member {google.protobuf.ITimestamp|null|undefined} gte
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.gte = null;

        /**
         * TimestampRules ltNow.
         * @member {boolean} ltNow
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.ltNow = false;

        /**
         * TimestampRules gtNow.
         * @member {boolean} gtNow
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.gtNow = false;

        /**
         * TimestampRules within.
         * @member {google.protobuf.IDuration|null|undefined} within
         * @memberof validate.TimestampRules
         * @instance
         */
        TimestampRules.prototype.within = null;

        /**
         * Verifies a TimestampRules message.
         * @function verify
         * @memberof validate.TimestampRules
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TimestampRules.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.required != null && message.hasOwnProperty("required"))
                if (typeof message.required !== "boolean")
                    return "required: boolean expected";
            if (message["const"] != null && message.hasOwnProperty("const")) {
                let error = $root.google.protobuf.Timestamp.verify(message["const"]);
                if (error)
                    return "const." + error;
            }
            if (message.lt != null && message.hasOwnProperty("lt")) {
                let error = $root.google.protobuf.Timestamp.verify(message.lt);
                if (error)
                    return "lt." + error;
            }
            if (message.lte != null && message.hasOwnProperty("lte")) {
                let error = $root.google.protobuf.Timestamp.verify(message.lte);
                if (error)
                    return "lte." + error;
            }
            if (message.gt != null && message.hasOwnProperty("gt")) {
                let error = $root.google.protobuf.Timestamp.verify(message.gt);
                if (error)
                    return "gt." + error;
            }
            if (message.gte != null && message.hasOwnProperty("gte")) {
                let error = $root.google.protobuf.Timestamp.verify(message.gte);
                if (error)
                    return "gte." + error;
            }
            if (message.ltNow != null && message.hasOwnProperty("ltNow"))
                if (typeof message.ltNow !== "boolean")
                    return "ltNow: boolean expected";
            if (message.gtNow != null && message.hasOwnProperty("gtNow"))
                if (typeof message.gtNow !== "boolean")
                    return "gtNow: boolean expected";
            if (message.within != null && message.hasOwnProperty("within")) {
                let error = $root.google.protobuf.Duration.verify(message.within);
                if (error)
                    return "within." + error;
            }
            return null;
        };

        /**
         * Creates a TimestampRules message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof validate.TimestampRules
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {validate.TimestampRules} TimestampRules
         */
        TimestampRules.fromObject = function fromObject(object) {
            if (object instanceof $root.validate.TimestampRules)
                return object;
            let message = new $root.validate.TimestampRules();
            if (object.required != null)
                message.required = Boolean(object.required);
            if (object["const"] != null) {
                if (typeof object["const"] !== "object")
                    throw TypeError(".validate.TimestampRules.const: object expected");
                message["const"] = $root.google.protobuf.Timestamp.fromObject(object["const"]);
            }
            if (object.lt != null) {
                if (typeof object.lt !== "object")
                    throw TypeError(".validate.TimestampRules.lt: object expected");
                message.lt = $root.google.protobuf.Timestamp.fromObject(object.lt);
            }
            if (object.lte != null) {
                if (typeof object.lte !== "object")
                    throw TypeError(".validate.TimestampRules.lte: object expected");
                message.lte = $root.google.protobuf.Timestamp.fromObject(object.lte);
            }
            if (object.gt != null) {
                if (typeof object.gt !== "object")
                    throw TypeError(".validate.TimestampRules.gt: object expected");
                message.gt = $root.google.protobuf.Timestamp.fromObject(object.gt);
            }
            if (object.gte != null) {
                if (typeof object.gte !== "object")
                    throw TypeError(".validate.TimestampRules.gte: object expected");
                message.gte = $root.google.protobuf.Timestamp.fromObject(object.gte);
            }
            if (object.ltNow != null)
                message.ltNow = Boolean(object.ltNow);
            if (object.gtNow != null)
                message.gtNow = Boolean(object.gtNow);
            if (object.within != null) {
                if (typeof object.within !== "object")
                    throw TypeError(".validate.TimestampRules.within: object expected");
                message.within = $root.google.protobuf.Duration.fromObject(object.within);
            }
            return message;
        };

        /**
         * Creates a plain object from a TimestampRules message. Also converts values to other types if specified.
         * @function toObject
         * @memberof validate.TimestampRules
         * @static
         * @param {validate.TimestampRules} message TimestampRules
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TimestampRules.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.required = false;
                object["const"] = null;
                object.lt = null;
                object.lte = null;
                object.gt = null;
                object.gte = null;
                object.ltNow = false;
                object.gtNow = false;
                object.within = null;
            }
            if (message.required != null && message.hasOwnProperty("required"))
                object.required = message.required;
            if (message["const"] != null && message.hasOwnProperty("const"))
                object["const"] = $root.google.protobuf.Timestamp.toObject(message["const"], options);
            if (message.lt != null && message.hasOwnProperty("lt"))
                object.lt = $root.google.protobuf.Timestamp.toObject(message.lt, options);
            if (message.lte != null && message.hasOwnProperty("lte"))
                object.lte = $root.google.protobuf.Timestamp.toObject(message.lte, options);
            if (message.gt != null && message.hasOwnProperty("gt"))
                object.gt = $root.google.protobuf.Timestamp.toObject(message.gt, options);
            if (message.gte != null && message.hasOwnProperty("gte"))
                object.gte = $root.google.protobuf.Timestamp.toObject(message.gte, options);
            if (message.ltNow != null && message.hasOwnProperty("ltNow"))
                object.ltNow = message.ltNow;
            if (message.gtNow != null && message.hasOwnProperty("gtNow"))
                object.gtNow = message.gtNow;
            if (message.within != null && message.hasOwnProperty("within"))
                object.within = $root.google.protobuf.Duration.toObject(message.within, options);
            return object;
        };

        /**
         * Converts this TimestampRules to JSON.
         * @function toJSON
         * @memberof validate.TimestampRules
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TimestampRules.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TimestampRules;
    })();

    return validate;
})();

export const clutch = $root.clutch = (() => {

    /**
     * Namespace clutch.
     * @exports clutch
     * @namespace
     */
    const clutch = {};

    clutch.api = (function() {

        /**
         * Namespace api.
         * @memberof clutch
         * @namespace
         */
        const api = {};

        api.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof clutch.api
             * @namespace
             */
            const v1 = {};

            /**
             * ActionType enum.
             * @name clutch.api.v1.ActionType
             * @enum {number}
             * @property {number} UNSPECIFIED=0 UNSPECIFIED value
             * @property {number} CREATE=1 CREATE value
             * @property {number} READ=2 READ value
             * @property {number} UPDATE=3 UPDATE value
             * @property {number} DELETE=4 DELETE value
             */
            v1.ActionType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNSPECIFIED"] = 0;
                values[valuesById[1] = "CREATE"] = 1;
                values[valuesById[2] = "READ"] = 2;
                values[valuesById[3] = "UPDATE"] = 3;
                values[valuesById[4] = "DELETE"] = 4;
                return values;
            })();

            v1.Action = (function() {

                /**
                 * Properties of an Action.
                 * @memberof clutch.api.v1
                 * @interface IAction
                 * @property {clutch.api.v1.ActionType|null} [type] Action type
                 */

                /**
                 * Constructs a new Action.
                 * @memberof clutch.api.v1
                 * @classdesc Represents an Action.
                 * @implements IAction
                 * @constructor
                 * @param {clutch.api.v1.IAction=} [properties] Properties to set
                 */
                function Action(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Action type.
                 * @member {clutch.api.v1.ActionType} type
                 * @memberof clutch.api.v1.Action
                 * @instance
                 */
                Action.prototype.type = 0;

                /**
                 * Verifies an Action message.
                 * @function verify
                 * @memberof clutch.api.v1.Action
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Action.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates an Action message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof clutch.api.v1.Action
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {clutch.api.v1.Action} Action
                 */
                Action.fromObject = function fromObject(object) {
                    if (object instanceof $root.clutch.api.v1.Action)
                        return object;
                    let message = new $root.clutch.api.v1.Action();
                    switch (object.type) {
                    case "UNSPECIFIED":
                    case 0:
                        message.type = 0;
                        break;
                    case "CREATE":
                    case 1:
                        message.type = 1;
                        break;
                    case "READ":
                    case 2:
                        message.type = 2;
                        break;
                    case "UPDATE":
                    case 3:
                        message.type = 3;
                        break;
                    case "DELETE":
                    case 4:
                        message.type = 4;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an Action message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof clutch.api.v1.Action
                 * @static
                 * @param {clutch.api.v1.Action} message Action
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Action.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.type = options.enums === String ? "UNSPECIFIED" : 0;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.clutch.api.v1.ActionType[message.type] : message.type;
                    return object;
                };

                /**
                 * Converts this Action to JSON.
                 * @function toJSON
                 * @memberof clutch.api.v1.Action
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Action.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Action;
            })();

            v1.Pattern = (function() {

                /**
                 * Properties of a Pattern.
                 * @memberof clutch.api.v1
                 * @interface IPattern
                 * @property {string|null} [typeUrl] Pattern typeUrl
                 * @property {string|null} [pattern] Pattern pattern
                 */

                /**
                 * Constructs a new Pattern.
                 * @memberof clutch.api.v1
                 * @classdesc Represents a Pattern.
                 * @implements IPattern
                 * @constructor
                 * @param {clutch.api.v1.IPattern=} [properties] Properties to set
                 */
                function Pattern(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Pattern typeUrl.
                 * @member {string} typeUrl
                 * @memberof clutch.api.v1.Pattern
                 * @instance
                 */
                Pattern.prototype.typeUrl = "";

                /**
                 * Pattern pattern.
                 * @member {string} pattern
                 * @memberof clutch.api.v1.Pattern
                 * @instance
                 */
                Pattern.prototype.pattern = "";

                /**
                 * Verifies a Pattern message.
                 * @function verify
                 * @memberof clutch.api.v1.Pattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Pattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.typeUrl != null && message.hasOwnProperty("typeUrl"))
                        if (!$util.isString(message.typeUrl))
                            return "typeUrl: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern"))
                        if (!$util.isString(message.pattern))
                            return "pattern: string expected";
                    return null;
                };

                /**
                 * Creates a Pattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof clutch.api.v1.Pattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {clutch.api.v1.Pattern} Pattern
                 */
                Pattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.clutch.api.v1.Pattern)
                        return object;
                    let message = new $root.clutch.api.v1.Pattern();
                    if (object.typeUrl != null)
                        message.typeUrl = String(object.typeUrl);
                    if (object.pattern != null)
                        message.pattern = String(object.pattern);
                    return message;
                };

                /**
                 * Creates a plain object from a Pattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof clutch.api.v1.Pattern
                 * @static
                 * @param {clutch.api.v1.Pattern} message Pattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Pattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.typeUrl = "";
                        object.pattern = "";
                    }
                    if (message.typeUrl != null && message.hasOwnProperty("typeUrl"))
                        object.typeUrl = message.typeUrl;
                    if (message.pattern != null && message.hasOwnProperty("pattern"))
                        object.pattern = message.pattern;
                    return object;
                };

                /**
                 * Converts this Pattern to JSON.
                 * @function toJSON
                 * @memberof clutch.api.v1.Pattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Pattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Pattern;
            })();

            v1.Identifier = (function() {

                /**
                 * Properties of an Identifier.
                 * @memberof clutch.api.v1
                 * @interface IIdentifier
                 * @property {Array.<clutch.api.v1.IPattern>|null} [patterns] Identifier patterns
                 */

                /**
                 * Constructs a new Identifier.
                 * @memberof clutch.api.v1
                 * @classdesc Represents an Identifier.
                 * @implements IIdentifier
                 * @constructor
                 * @param {clutch.api.v1.IIdentifier=} [properties] Properties to set
                 */
                function Identifier(properties) {
                    this.patterns = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Identifier patterns.
                 * @member {Array.<clutch.api.v1.IPattern>} patterns
                 * @memberof clutch.api.v1.Identifier
                 * @instance
                 */
                Identifier.prototype.patterns = $util.emptyArray;

                /**
                 * Verifies an Identifier message.
                 * @function verify
                 * @memberof clutch.api.v1.Identifier
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Identifier.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.patterns != null && message.hasOwnProperty("patterns")) {
                        if (!Array.isArray(message.patterns))
                            return "patterns: array expected";
                        for (let i = 0; i < message.patterns.length; ++i) {
                            let error = $root.clutch.api.v1.Pattern.verify(message.patterns[i]);
                            if (error)
                                return "patterns." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an Identifier message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof clutch.api.v1.Identifier
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {clutch.api.v1.Identifier} Identifier
                 */
                Identifier.fromObject = function fromObject(object) {
                    if (object instanceof $root.clutch.api.v1.Identifier)
                        return object;
                    let message = new $root.clutch.api.v1.Identifier();
                    if (object.patterns) {
                        if (!Array.isArray(object.patterns))
                            throw TypeError(".clutch.api.v1.Identifier.patterns: array expected");
                        message.patterns = [];
                        for (let i = 0; i < object.patterns.length; ++i) {
                            if (typeof object.patterns[i] !== "object")
                                throw TypeError(".clutch.api.v1.Identifier.patterns: object expected");
                            message.patterns[i] = $root.clutch.api.v1.Pattern.fromObject(object.patterns[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an Identifier message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof clutch.api.v1.Identifier
                 * @static
                 * @param {clutch.api.v1.Identifier} message Identifier
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Identifier.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.patterns = [];
                    if (message.patterns && message.patterns.length) {
                        object.patterns = [];
                        for (let j = 0; j < message.patterns.length; ++j)
                            object.patterns[j] = $root.clutch.api.v1.Pattern.toObject(message.patterns[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this Identifier to JSON.
                 * @function toJSON
                 * @memberof clutch.api.v1.Identifier
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Identifier.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Identifier;
            })();

            v1.Reference = (function() {

                /**
                 * Properties of a Reference.
                 * @memberof clutch.api.v1
                 * @interface IReference
                 * @property {Array.<string>|null} [fields] Reference fields
                 */

                /**
                 * Constructs a new Reference.
                 * @memberof clutch.api.v1
                 * @classdesc Represents a Reference.
                 * @implements IReference
                 * @constructor
                 * @param {clutch.api.v1.IReference=} [properties] Properties to set
                 */
                function Reference(properties) {
                    this.fields = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Reference fields.
                 * @member {Array.<string>} fields
                 * @memberof clutch.api.v1.Reference
                 * @instance
                 */
                Reference.prototype.fields = $util.emptyArray;

                /**
                 * Verifies a Reference message.
                 * @function verify
                 * @memberof clutch.api.v1.Reference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Reference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fields != null && message.hasOwnProperty("fields")) {
                        if (!Array.isArray(message.fields))
                            return "fields: array expected";
                        for (let i = 0; i < message.fields.length; ++i)
                            if (!$util.isString(message.fields[i]))
                                return "fields: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Reference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof clutch.api.v1.Reference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {clutch.api.v1.Reference} Reference
                 */
                Reference.fromObject = function fromObject(object) {
                    if (object instanceof $root.clutch.api.v1.Reference)
                        return object;
                    let message = new $root.clutch.api.v1.Reference();
                    if (object.fields) {
                        if (!Array.isArray(object.fields))
                            throw TypeError(".clutch.api.v1.Reference.fields: array expected");
                        message.fields = [];
                        for (let i = 0; i < object.fields.length; ++i)
                            message.fields[i] = String(object.fields[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Reference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof clutch.api.v1.Reference
                 * @static
                 * @param {clutch.api.v1.Reference} message Reference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Reference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.fields = [];
                    if (message.fields && message.fields.length) {
                        object.fields = [];
                        for (let j = 0; j < message.fields.length; ++j)
                            object.fields[j] = message.fields[j];
                    }
                    return object;
                };

                /**
                 * Converts this Reference to JSON.
                 * @function toJSON
                 * @memberof clutch.api.v1.Reference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Reference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Reference;
            })();

            v1.Redacted = (function() {

                /**
                 * Properties of a Redacted.
                 * @memberof clutch.api.v1
                 * @interface IRedacted
                 * @property {string|null} [redactedTypeUrl] Redacted redactedTypeUrl
                 */

                /**
                 * Constructs a new Redacted.
                 * @memberof clutch.api.v1
                 * @classdesc Represents a Redacted.
                 * @implements IRedacted
                 * @constructor
                 * @param {clutch.api.v1.IRedacted=} [properties] Properties to set
                 */
                function Redacted(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Redacted redactedTypeUrl.
                 * @member {string} redactedTypeUrl
                 * @memberof clutch.api.v1.Redacted
                 * @instance
                 */
                Redacted.prototype.redactedTypeUrl = "";

                /**
                 * Verifies a Redacted message.
                 * @function verify
                 * @memberof clutch.api.v1.Redacted
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Redacted.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.redactedTypeUrl != null && message.hasOwnProperty("redactedTypeUrl"))
                        if (!$util.isString(message.redactedTypeUrl))
                            return "redactedTypeUrl: string expected";
                    return null;
                };

                /**
                 * Creates a Redacted message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof clutch.api.v1.Redacted
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {clutch.api.v1.Redacted} Redacted
                 */
                Redacted.fromObject = function fromObject(object) {
                    if (object instanceof $root.clutch.api.v1.Redacted)
                        return object;
                    let message = new $root.clutch.api.v1.Redacted();
                    if (object.redactedTypeUrl != null)
                        message.redactedTypeUrl = String(object.redactedTypeUrl);
                    return message;
                };

                /**
                 * Creates a plain object from a Redacted message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof clutch.api.v1.Redacted
                 * @static
                 * @param {clutch.api.v1.Redacted} message Redacted
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Redacted.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.redactedTypeUrl = "";
                    if (message.redactedTypeUrl != null && message.hasOwnProperty("redactedTypeUrl"))
                        object.redactedTypeUrl = message.redactedTypeUrl;
                    return object;
                };

                /**
                 * Converts this Redacted to JSON.
                 * @function toJSON
                 * @memberof clutch.api.v1.Redacted
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Redacted.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Redacted;
            })();

            return v1;
        })();

        return api;
    })();

    return clutch;
})();

export const google = $root.google = (() => {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    const google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        const protobuf = {};

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (let i = 0; i < message.file.length; ++i) {
                        let error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (let i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (let j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
             * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.publicDependency = [];
                this.weakDependency = [];
                this.messageType = [];
                this.enumType = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto publicDependency.
             * @member {Array.<number>} publicDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;

            /**
             * FileDescriptorProto weakDependency.
             * @member {Array.<number>} weakDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;

            /**
             * FileDescriptorProto messageType.
             * @member {Array.<google.protobuf.IDescriptorProto>} messageType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.messageType = $util.emptyArray;

            /**
             * FileDescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto sourceCodeInfo.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.sourceCodeInfo = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (let i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                    if (!Array.isArray(message.publicDependency))
                        return "publicDependency: array expected";
                    for (let i = 0; i < message.publicDependency.length; ++i)
                        if (!$util.isInteger(message.publicDependency[i]))
                            return "publicDependency: integer[] expected";
                }
                if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                    if (!Array.isArray(message.weakDependency))
                        return "weakDependency: array expected";
                    for (let i = 0; i < message.weakDependency.length; ++i)
                        if (!$util.isInteger(message.weakDependency[i]))
                            return "weakDependency: integer[] expected";
                }
                if (message.messageType != null && message.hasOwnProperty("messageType")) {
                    if (!Array.isArray(message.messageType))
                        return "messageType: array expected";
                    for (let i = 0; i < message.messageType.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                        if (error)
                            return "messageType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (let i = 0; i < message.enumType.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (let i = 0; i < message.service.length; ++i) {
                        let error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                    let error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                    if (error)
                        return "sourceCodeInfo." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (let i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.publicDependency) {
                    if (!Array.isArray(object.publicDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                    message.publicDependency = [];
                    for (let i = 0; i < object.publicDependency.length; ++i)
                        message.publicDependency[i] = object.publicDependency[i] | 0;
                }
                if (object.weakDependency) {
                    if (!Array.isArray(object.weakDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                    message.weakDependency = [];
                    for (let i = 0; i < object.weakDependency.length; ++i)
                        message.weakDependency[i] = object.weakDependency[i] | 0;
                }
                if (object.messageType) {
                    if (!Array.isArray(object.messageType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                    message.messageType = [];
                    for (let i = 0; i < object.messageType.length; ++i) {
                        if (typeof object.messageType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                        message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (let i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (let i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.sourceCodeInfo != null) {
                    if (typeof object.sourceCodeInfo !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.messageType = [];
                    object.enumType = [];
                    object.service = [];
                    object.extension = [];
                    object.publicDependency = [];
                    object.weakDependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.sourceCodeInfo = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (let j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.messageType && message.messageType.length) {
                    object.messageType = [];
                    for (let j = 0; j < message.messageType.length; ++j)
                        object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (let j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (let j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                    object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                if (message.publicDependency && message.publicDependency.length) {
                    object.publicDependency = [];
                    for (let j = 0; j < message.publicDependency.length; ++j)
                        object.publicDependency[j] = message.publicDependency[j];
                }
                if (message.weakDependency && message.weakDependency.length) {
                    object.weakDependency = [];
                    for (let j = 0; j < message.weakDependency.length; ++j)
                        object.weakDependency[j] = message.weakDependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nestedType = [];
                this.enumType = [];
                this.extensionRange = [];
                this.oneofDecl = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nestedType.
             * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nestedType = $util.emptyArray;

            /**
             * DescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * DescriptorProto extensionRange.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extensionRange = $util.emptyArray;

            /**
             * DescriptorProto oneofDecl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reservedRange.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * DescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (let i = 0; i < message.field.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                    if (!Array.isArray(message.nestedType))
                        return "nestedType: array expected";
                    for (let i = 0; i < message.nestedType.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                        if (error)
                            return "nestedType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (let i = 0; i < message.enumType.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                    if (!Array.isArray(message.extensionRange))
                        return "extensionRange: array expected";
                    for (let i = 0; i < message.extensionRange.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                        if (error)
                            return "extensionRange." + error;
                    }
                }
                if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                    if (!Array.isArray(message.oneofDecl))
                        return "oneofDecl: array expected";
                    for (let i = 0; i < message.oneofDecl.length; ++i) {
                        let error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                        if (error)
                            return "oneofDecl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (let i = 0; i < message.reservedRange.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (let i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                let message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (let i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nestedType) {
                    if (!Array.isArray(object.nestedType))
                        throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                    message.nestedType = [];
                    for (let i = 0; i < object.nestedType.length; ++i) {
                        if (typeof object.nestedType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                        message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (let i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.extensionRange) {
                    if (!Array.isArray(object.extensionRange))
                        throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                    message.extensionRange = [];
                    for (let i = 0; i < object.extensionRange.length; ++i) {
                        if (typeof object.extensionRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                        message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                    }
                }
                if (object.oneofDecl) {
                    if (!Array.isArray(object.oneofDecl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                    message.oneofDecl = [];
                    for (let i = 0; i < object.oneofDecl.length; ++i) {
                        if (typeof object.oneofDecl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                        message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (let i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (let i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nestedType = [];
                    object.enumType = [];
                    object.extensionRange = [];
                    object.extension = [];
                    object.oneofDecl = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (let j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nestedType && message.nestedType.length) {
                    object.nestedType = [];
                    for (let j = 0; j < message.nestedType.length; ++j)
                        object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (let j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.extensionRange && message.extensionRange.length) {
                    object.extensionRange = [];
                    for (let j = 0; j < message.extensionRange.length; ++j)
                        object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneofDecl && message.oneofDecl.length) {
                    object.oneofDecl = [];
                    for (let j = 0; j < message.oneofDecl.length; ++j)
                        object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                }
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (let j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (let j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * ExtensionRange options.
                 * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.options = null;

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        let error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                        message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                        object.options = null;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.ExtensionRangeOptions = (function() {

            /**
             * Properties of an ExtensionRangeOptions.
             * @memberof google.protobuf
             * @interface IExtensionRangeOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
             */

            /**
             * Constructs a new ExtensionRangeOptions.
             * @memberof google.protobuf
             * @classdesc Represents an ExtensionRangeOptions.
             * @implements IExtensionRangeOptions
             * @constructor
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             */
            function ExtensionRangeOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExtensionRangeOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             */
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Verifies an ExtensionRangeOptions message.
             * @function verify
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExtensionRangeOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             */
            ExtensionRangeOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                    return object;
                let message = new $root.google.protobuf.ExtensionRangeOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExtensionRangeOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ExtensionRangeOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ExtensionRangeOptions;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [typeName] FieldDescriptorProto typeName
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
             * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
             * @property {string|null} [jsonName] FieldDescriptorProto jsonName
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto typeName.
             * @member {string} typeName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.typeName = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto defaultValue.
             * @member {string} defaultValue
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.defaultValue = "";

            /**
             * FieldDescriptorProto oneofIndex.
             * @member {number} oneofIndex
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneofIndex = 0;

            /**
             * FieldDescriptorProto jsonName.
             * @member {string} jsonName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.jsonName = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * FieldDescriptorProto proto3Optional.
             * @member {boolean} proto3Optional
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.proto3Optional = false;

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    if (!$util.isString(message.typeName))
                        return "typeName: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    if (!$util.isString(message.defaultValue))
                        return "defaultValue: string expected";
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    if (!$util.isInteger(message.oneofIndex))
                        return "oneofIndex: integer expected";
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    if (!$util.isString(message.jsonName))
                        return "jsonName: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                    if (typeof message.proto3Optional !== "boolean")
                        return "proto3Optional: boolean expected";
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.typeName != null)
                    message.typeName = String(object.typeName);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.defaultValue != null)
                    message.defaultValue = String(object.defaultValue);
                if (object.oneofIndex != null)
                    message.oneofIndex = object.oneofIndex | 0;
                if (object.jsonName != null)
                    message.jsonName = String(object.jsonName);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                if (object.proto3Optional != null)
                    message.proto3Optional = Boolean(object.proto3Optional);
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.typeName = "";
                    object.defaultValue = "";
                    object.options = null;
                    object.oneofIndex = 0;
                    object.jsonName = "";
                    object.proto3Optional = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    object.typeName = message.typeName;
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    object.defaultValue = message.defaultValue;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    object.oneofIndex = message.oneofIndex;
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    object.jsonName = message.jsonName;
                if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                    object.proto3Optional = message.proto3Optional;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * EnumDescriptorProto reservedRange.
             * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * EnumDescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (let i = 0; i < message.value.length; ++i) {
                        let error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (let i = 0; i < message.reservedRange.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (let i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (let i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (let i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (let i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.value = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (let j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (let j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (let j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EnumDescriptorProto.EnumReservedRange = (function() {

                /**
                 * Properties of an EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @interface IEnumReservedRange
                 * @property {number|null} [start] EnumReservedRange start
                 * @property {number|null} [end] EnumReservedRange end
                 */

                /**
                 * Constructs a new EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @classdesc Represents an EnumReservedRange.
                 * @implements IEnumReservedRange
                 * @constructor
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 */
                function EnumReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EnumReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.start = 0;

                /**
                 * EnumReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.end = 0;

                /**
                 * Verifies an EnumReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 */
                EnumReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                        return object;
                    let message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this EnumReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EnumReservedRange;
            })();

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (let i = 0; i < message.method.length; ++i) {
                        let error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (let i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (let j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [inputType] MethodDescriptorProto inputType
             * @property {string|null} [outputType] MethodDescriptorProto outputType
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
             * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto inputType.
             * @member {string} inputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.inputType = "";

            /**
             * MethodDescriptorProto outputType.
             * @member {string} outputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.outputType = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto clientStreaming.
             * @member {boolean} clientStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.clientStreaming = false;

            /**
             * MethodDescriptorProto serverStreaming.
             * @member {boolean} serverStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.serverStreaming = false;

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    if (!$util.isString(message.inputType))
                        return "inputType: string expected";
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    if (!$util.isString(message.outputType))
                        return "outputType: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    if (typeof message.clientStreaming !== "boolean")
                        return "clientStreaming: boolean expected";
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    if (typeof message.serverStreaming !== "boolean")
                        return "serverStreaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.inputType != null)
                    message.inputType = String(object.inputType);
                if (object.outputType != null)
                    message.outputType = String(object.outputType);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.clientStreaming != null)
                    message.clientStreaming = Boolean(object.clientStreaming);
                if (object.serverStreaming != null)
                    message.serverStreaming = Boolean(object.serverStreaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.inputType = "";
                    object.outputType = "";
                    object.options = null;
                    object.clientStreaming = false;
                    object.serverStreaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    object.inputType = message.inputType;
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    object.outputType = message.outputType;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    object.clientStreaming = message.clientStreaming;
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    object.serverStreaming = message.serverStreaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [javaPackage] FileOptions javaPackage
             * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
             * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
             * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
             * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
             * @property {string|null} [goPackage] FileOptions goPackage
             * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
             * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
             * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
             * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
             * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
             * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
             * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
             * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
             * @property {string|null} [phpNamespace] FileOptions phpNamespace
             * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
             * @property {string|null} [rubyPackage] FileOptions rubyPackage
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions javaPackage.
             * @member {string} javaPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaPackage = "";

            /**
             * FileOptions javaOuterClassname.
             * @member {string} javaOuterClassname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaOuterClassname = "";

            /**
             * FileOptions javaMultipleFiles.
             * @member {boolean} javaMultipleFiles
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaMultipleFiles = false;

            /**
             * FileOptions javaGenerateEqualsAndHash.
             * @member {boolean} javaGenerateEqualsAndHash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenerateEqualsAndHash = false;

            /**
             * FileOptions javaStringCheckUtf8.
             * @member {boolean} javaStringCheckUtf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaStringCheckUtf8 = false;

            /**
             * FileOptions optimizeFor.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimizeFor = 1;

            /**
             * FileOptions goPackage.
             * @member {string} goPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.goPackage = "";

            /**
             * FileOptions ccGenericServices.
             * @member {boolean} ccGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccGenericServices = false;

            /**
             * FileOptions javaGenericServices.
             * @member {boolean} javaGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenericServices = false;

            /**
             * FileOptions pyGenericServices.
             * @member {boolean} pyGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.pyGenericServices = false;

            /**
             * FileOptions phpGenericServices.
             * @member {boolean} phpGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpGenericServices = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions ccEnableArenas.
             * @member {boolean} ccEnableArenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccEnableArenas = true;

            /**
             * FileOptions objcClassPrefix.
             * @member {string} objcClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objcClassPrefix = "";

            /**
             * FileOptions csharpNamespace.
             * @member {string} csharpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharpNamespace = "";

            /**
             * FileOptions swiftPrefix.
             * @member {string} swiftPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.swiftPrefix = "";

            /**
             * FileOptions phpClassPrefix.
             * @member {string} phpClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpClassPrefix = "";

            /**
             * FileOptions phpNamespace.
             * @member {string} phpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpNamespace = "";

            /**
             * FileOptions phpMetadataNamespace.
             * @member {string} phpMetadataNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpMetadataNamespace = "";

            /**
             * FileOptions rubyPackage.
             * @member {string} rubyPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.rubyPackage = "";

            /**
             * FileOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    if (!$util.isString(message.javaPackage))
                        return "javaPackage: string expected";
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    if (!$util.isString(message.javaOuterClassname))
                        return "javaOuterClassname: string expected";
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    if (typeof message.javaMultipleFiles !== "boolean")
                        return "javaMultipleFiles: boolean expected";
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                        return "javaGenerateEqualsAndHash: boolean expected";
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    if (typeof message.javaStringCheckUtf8 !== "boolean")
                        return "javaStringCheckUtf8: boolean expected";
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    switch (message.optimizeFor) {
                    default:
                        return "optimizeFor: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    if (!$util.isString(message.goPackage))
                        return "goPackage: string expected";
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    if (typeof message.ccGenericServices !== "boolean")
                        return "ccGenericServices: boolean expected";
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    if (typeof message.javaGenericServices !== "boolean")
                        return "javaGenericServices: boolean expected";
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    if (typeof message.pyGenericServices !== "boolean")
                        return "pyGenericServices: boolean expected";
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    if (typeof message.phpGenericServices !== "boolean")
                        return "phpGenericServices: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    if (typeof message.ccEnableArenas !== "boolean")
                        return "ccEnableArenas: boolean expected";
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    if (!$util.isString(message.objcClassPrefix))
                        return "objcClassPrefix: string expected";
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    if (!$util.isString(message.csharpNamespace))
                        return "csharpNamespace: string expected";
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    if (!$util.isString(message.swiftPrefix))
                        return "swiftPrefix: string expected";
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    if (!$util.isString(message.phpClassPrefix))
                        return "phpClassPrefix: string expected";
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    if (!$util.isString(message.phpNamespace))
                        return "phpNamespace: string expected";
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    if (!$util.isString(message.phpMetadataNamespace))
                        return "phpMetadataNamespace: string expected";
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    if (!$util.isString(message.rubyPackage))
                        return "rubyPackage: string expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                let message = new $root.google.protobuf.FileOptions();
                if (object.javaPackage != null)
                    message.javaPackage = String(object.javaPackage);
                if (object.javaOuterClassname != null)
                    message.javaOuterClassname = String(object.javaOuterClassname);
                if (object.javaMultipleFiles != null)
                    message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                if (object.javaGenerateEqualsAndHash != null)
                    message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                if (object.javaStringCheckUtf8 != null)
                    message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                switch (object.optimizeFor) {
                case "SPEED":
                case 1:
                    message.optimizeFor = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimizeFor = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimizeFor = 3;
                    break;
                }
                if (object.goPackage != null)
                    message.goPackage = String(object.goPackage);
                if (object.ccGenericServices != null)
                    message.ccGenericServices = Boolean(object.ccGenericServices);
                if (object.javaGenericServices != null)
                    message.javaGenericServices = Boolean(object.javaGenericServices);
                if (object.pyGenericServices != null)
                    message.pyGenericServices = Boolean(object.pyGenericServices);
                if (object.phpGenericServices != null)
                    message.phpGenericServices = Boolean(object.phpGenericServices);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.ccEnableArenas != null)
                    message.ccEnableArenas = Boolean(object.ccEnableArenas);
                if (object.objcClassPrefix != null)
                    message.objcClassPrefix = String(object.objcClassPrefix);
                if (object.csharpNamespace != null)
                    message.csharpNamespace = String(object.csharpNamespace);
                if (object.swiftPrefix != null)
                    message.swiftPrefix = String(object.swiftPrefix);
                if (object.phpClassPrefix != null)
                    message.phpClassPrefix = String(object.phpClassPrefix);
                if (object.phpNamespace != null)
                    message.phpNamespace = String(object.phpNamespace);
                if (object.phpMetadataNamespace != null)
                    message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                if (object.rubyPackage != null)
                    message.rubyPackage = String(object.rubyPackage);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.javaPackage = "";
                    object.javaOuterClassname = "";
                    object.optimizeFor = options.enums === String ? "SPEED" : 1;
                    object.javaMultipleFiles = false;
                    object.goPackage = "";
                    object.ccGenericServices = false;
                    object.javaGenericServices = false;
                    object.pyGenericServices = false;
                    object.javaGenerateEqualsAndHash = false;
                    object.deprecated = false;
                    object.javaStringCheckUtf8 = false;
                    object.ccEnableArenas = true;
                    object.objcClassPrefix = "";
                    object.csharpNamespace = "";
                    object.swiftPrefix = "";
                    object.phpClassPrefix = "";
                    object.phpNamespace = "";
                    object.phpGenericServices = false;
                    object.phpMetadataNamespace = "";
                    object.rubyPackage = "";
                }
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    object.javaPackage = message.javaPackage;
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    object.javaOuterClassname = message.javaOuterClassname;
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    object.javaMultipleFiles = message.javaMultipleFiles;
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    object.goPackage = message.goPackage;
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    object.ccGenericServices = message.ccGenericServices;
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    object.javaGenericServices = message.javaGenericServices;
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    object.pyGenericServices = message.pyGenericServices;
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    object.ccEnableArenas = message.ccEnableArenas;
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    object.objcClassPrefix = message.objcClassPrefix;
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    object.csharpNamespace = message.csharpNamespace;
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    object.swiftPrefix = message.swiftPrefix;
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    object.phpClassPrefix = message.phpClassPrefix;
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    object.phpNamespace = message.phpNamespace;
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    object.phpGenericServices = message.phpGenericServices;
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    object.phpMetadataNamespace = message.phpMetadataNamespace;
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    object.rubyPackage = message.rubyPackage;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
             * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [mapEntry] MessageOptions mapEntry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
             * @property {boolean|null} [".validate.disabled"] MessageOptions .validate.disabled
             * @property {boolean|null} [".validate.ignored"] MessageOptions .validate.ignored
             * @property {clutch.api.v1.IReference|null} [".clutch.api.v1.reference"] MessageOptions .clutch.api.v1.reference
             * @property {clutch.api.v1.IIdentifier|null} [".clutch.api.v1.id"] MessageOptions .clutch.api.v1.id
             * @property {boolean|null} [".clutch.api.v1.redacted"] MessageOptions .clutch.api.v1.redacted
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions messageSetWireFormat.
             * @member {boolean} messageSetWireFormat
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.messageSetWireFormat = false;

            /**
             * MessageOptions noStandardDescriptorAccessor.
             * @member {boolean} noStandardDescriptorAccessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.noStandardDescriptorAccessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions mapEntry.
             * @member {boolean} mapEntry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.mapEntry = false;

            /**
             * MessageOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * MessageOptions .validate.disabled.
             * @member {boolean} .validate.disabled
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".validate.disabled"] = false;

            /**
             * MessageOptions .validate.ignored.
             * @member {boolean} .validate.ignored
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".validate.ignored"] = false;

            /**
             * MessageOptions .clutch.api.v1.reference.
             * @member {clutch.api.v1.IReference|null|undefined} .clutch.api.v1.reference
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".clutch.api.v1.reference"] = null;

            /**
             * MessageOptions .clutch.api.v1.id.
             * @member {clutch.api.v1.IIdentifier|null|undefined} .clutch.api.v1.id
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".clutch.api.v1.id"] = null;

            /**
             * MessageOptions .clutch.api.v1.redacted.
             * @member {boolean} .clutch.api.v1.redacted
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".clutch.api.v1.redacted"] = false;

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    if (typeof message.messageSetWireFormat !== "boolean")
                        return "messageSetWireFormat: boolean expected";
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    if (typeof message.noStandardDescriptorAccessor !== "boolean")
                        return "noStandardDescriptorAccessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    if (typeof message.mapEntry !== "boolean")
                        return "mapEntry: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".validate.disabled"] != null && message.hasOwnProperty(".validate.disabled"))
                    if (typeof message[".validate.disabled"] !== "boolean")
                        return ".validate.disabled: boolean expected";
                if (message[".validate.ignored"] != null && message.hasOwnProperty(".validate.ignored"))
                    if (typeof message[".validate.ignored"] !== "boolean")
                        return ".validate.ignored: boolean expected";
                if (message[".clutch.api.v1.reference"] != null && message.hasOwnProperty(".clutch.api.v1.reference")) {
                    let error = $root.clutch.api.v1.Reference.verify(message[".clutch.api.v1.reference"]);
                    if (error)
                        return ".clutch.api.v1.reference." + error;
                }
                if (message[".clutch.api.v1.id"] != null && message.hasOwnProperty(".clutch.api.v1.id")) {
                    let error = $root.clutch.api.v1.Identifier.verify(message[".clutch.api.v1.id"]);
                    if (error)
                        return ".clutch.api.v1.id." + error;
                }
                if (message[".clutch.api.v1.redacted"] != null && message.hasOwnProperty(".clutch.api.v1.redacted"))
                    if (typeof message[".clutch.api.v1.redacted"] !== "boolean")
                        return ".clutch.api.v1.redacted: boolean expected";
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                let message = new $root.google.protobuf.MessageOptions();
                if (object.messageSetWireFormat != null)
                    message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                if (object.noStandardDescriptorAccessor != null)
                    message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.mapEntry != null)
                    message.mapEntry = Boolean(object.mapEntry);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".validate.disabled"] != null)
                    message[".validate.disabled"] = Boolean(object[".validate.disabled"]);
                if (object[".validate.ignored"] != null)
                    message[".validate.ignored"] = Boolean(object[".validate.ignored"]);
                if (object[".clutch.api.v1.reference"] != null) {
                    if (typeof object[".clutch.api.v1.reference"] !== "object")
                        throw TypeError(".google.protobuf.MessageOptions..clutch.api.v1.reference: object expected");
                    message[".clutch.api.v1.reference"] = $root.clutch.api.v1.Reference.fromObject(object[".clutch.api.v1.reference"]);
                }
                if (object[".clutch.api.v1.id"] != null) {
                    if (typeof object[".clutch.api.v1.id"] !== "object")
                        throw TypeError(".google.protobuf.MessageOptions..clutch.api.v1.id: object expected");
                    message[".clutch.api.v1.id"] = $root.clutch.api.v1.Identifier.fromObject(object[".clutch.api.v1.id"]);
                }
                if (object[".clutch.api.v1.redacted"] != null)
                    message[".clutch.api.v1.redacted"] = Boolean(object[".clutch.api.v1.redacted"]);
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.messageSetWireFormat = false;
                    object.noStandardDescriptorAccessor = false;
                    object.deprecated = false;
                    object.mapEntry = false;
                    object[".validate.disabled"] = false;
                    object[".validate.ignored"] = false;
                    object[".clutch.api.v1.reference"] = null;
                    object[".clutch.api.v1.id"] = null;
                    object[".clutch.api.v1.redacted"] = false;
                }
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    object.messageSetWireFormat = message.messageSetWireFormat;
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    object.mapEntry = message.mapEntry;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".validate.disabled"] != null && message.hasOwnProperty(".validate.disabled"))
                    object[".validate.disabled"] = message[".validate.disabled"];
                if (message[".validate.ignored"] != null && message.hasOwnProperty(".validate.ignored"))
                    object[".validate.ignored"] = message[".validate.ignored"];
                if (message[".clutch.api.v1.reference"] != null && message.hasOwnProperty(".clutch.api.v1.reference"))
                    object[".clutch.api.v1.reference"] = $root.clutch.api.v1.Reference.toObject(message[".clutch.api.v1.reference"], options);
                if (message[".clutch.api.v1.id"] != null && message.hasOwnProperty(".clutch.api.v1.id"))
                    object[".clutch.api.v1.id"] = $root.clutch.api.v1.Identifier.toObject(message[".clutch.api.v1.id"], options);
                if (message[".clutch.api.v1.redacted"] != null && message.hasOwnProperty(".clutch.api.v1.redacted"))
                    object[".clutch.api.v1.redacted"] = message[".clutch.api.v1.redacted"];
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
             * @property {validate.IFieldRules|null} [".validate.rules"] FieldOptions .validate.rules
             * @property {boolean|null} [".clutch.api.v1.log"] FieldOptions .clutch.api.v1.log
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * FieldOptions .validate.rules.
             * @member {validate.IFieldRules|null|undefined} .validate.rules
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".validate.rules"] = null;

            /**
             * FieldOptions .clutch.api.v1.log.
             * @member {boolean} .clutch.api.v1.log
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".clutch.api.v1.log"] = false;

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".validate.rules"] != null && message.hasOwnProperty(".validate.rules")) {
                    let error = $root.validate.FieldRules.verify(message[".validate.rules"]);
                    if (error)
                        return ".validate.rules." + error;
                }
                if (message[".clutch.api.v1.log"] != null && message.hasOwnProperty(".clutch.api.v1.log"))
                    if (typeof message[".clutch.api.v1.log"] !== "boolean")
                        return ".clutch.api.v1.log: boolean expected";
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                let message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".validate.rules"] != null) {
                    if (typeof object[".validate.rules"] !== "object")
                        throw TypeError(".google.protobuf.FieldOptions..validate.rules: object expected");
                    message[".validate.rules"] = $root.validate.FieldRules.fromObject(object[".validate.rules"]);
                }
                if (object[".clutch.api.v1.log"] != null)
                    message[".clutch.api.v1.log"] = Boolean(object[".clutch.api.v1.log"]);
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                    object[".validate.rules"] = null;
                    object[".clutch.api.v1.log"] = false;
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".validate.rules"] != null && message.hasOwnProperty(".validate.rules"))
                    object[".validate.rules"] = $root.validate.FieldRules.toObject(message[".validate.rules"], options);
                if (message[".clutch.api.v1.log"] != null && message.hasOwnProperty(".clutch.api.v1.log"))
                    object[".clutch.api.v1.log"] = message[".clutch.api.v1.log"];
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
             * @property {boolean|null} [".validate.required"] OneofOptions .validate.required
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * OneofOptions .validate.required.
             * @member {boolean} .validate.required
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype[".validate.required"] = false;

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".validate.required"] != null && message.hasOwnProperty(".validate.required"))
                    if (typeof message[".validate.required"] !== "boolean")
                        return ".validate.required: boolean expected";
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                let message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".validate.required"] != null)
                    message[".validate.required"] = Boolean(object[".validate.required"]);
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object[".validate.required"] = false;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".validate.required"] != null && message.hasOwnProperty(".validate.required"))
                    object[".validate.required"] = message[".validate.required"];
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allowAlias] EnumOptions allowAlias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allowAlias.
             * @member {boolean} allowAlias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allowAlias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    if (typeof message.allowAlias !== "boolean")
                        return "allowAlias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                let message = new $root.google.protobuf.EnumOptions();
                if (object.allowAlias != null)
                    message.allowAlias = Boolean(object.allowAlias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.allowAlias = false;
                    object.deprecated = false;
                }
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    object.allowAlias = message.allowAlias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                let message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                let message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
             * @property {clutch.api.v1.IAction|null} [".clutch.api.v1.action"] MethodOptions .clutch.api.v1.action
             * @property {boolean|null} [".clutch.api.v1.disableAudit"] MethodOptions .clutch.api.v1.disableAudit
             * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions idempotencyLevel.
             * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.idempotencyLevel = 0;

            /**
             * MethodOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * MethodOptions .clutch.api.v1.action.
             * @member {clutch.api.v1.IAction|null|undefined} .clutch.api.v1.action
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".clutch.api.v1.action"] = null;

            /**
             * MethodOptions .clutch.api.v1.disableAudit.
             * @member {boolean} .clutch.api.v1.disableAudit
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".clutch.api.v1.disableAudit"] = false;

            /**
             * MethodOptions .google.api.http.
             * @member {google.api.IHttpRule|null|undefined} .google.api.http
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".google.api.http"] = null;

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    switch (message.idempotencyLevel) {
                    default:
                        return "idempotencyLevel: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".clutch.api.v1.action"] != null && message.hasOwnProperty(".clutch.api.v1.action")) {
                    let error = $root.clutch.api.v1.Action.verify(message[".clutch.api.v1.action"]);
                    if (error)
                        return ".clutch.api.v1.action." + error;
                }
                if (message[".clutch.api.v1.disableAudit"] != null && message.hasOwnProperty(".clutch.api.v1.disableAudit"))
                    if (typeof message[".clutch.api.v1.disableAudit"] !== "boolean")
                        return ".clutch.api.v1.disableAudit: boolean expected";
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                    let error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                    if (error)
                        return ".google.api.http." + error;
                }
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                let message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                switch (object.idempotencyLevel) {
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                    message.idempotencyLevel = 0;
                    break;
                case "NO_SIDE_EFFECTS":
                case 1:
                    message.idempotencyLevel = 1;
                    break;
                case "IDEMPOTENT":
                case 2:
                    message.idempotencyLevel = 2;
                    break;
                }
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".clutch.api.v1.action"] != null) {
                    if (typeof object[".clutch.api.v1.action"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..clutch.api.v1.action: object expected");
                    message[".clutch.api.v1.action"] = $root.clutch.api.v1.Action.fromObject(object[".clutch.api.v1.action"]);
                }
                if (object[".clutch.api.v1.disableAudit"] != null)
                    message[".clutch.api.v1.disableAudit"] = Boolean(object[".clutch.api.v1.disableAudit"]);
                if (object[".google.api.http"] != null) {
                    if (typeof object[".google.api.http"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                    message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                    object[".clutch.api.v1.action"] = null;
                    object[".clutch.api.v1.disableAudit"] = false;
                    object[".google.api.http"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".clutch.api.v1.action"] != null && message.hasOwnProperty(".clutch.api.v1.action"))
                    object[".clutch.api.v1.action"] = $root.clutch.api.v1.Action.toObject(message[".clutch.api.v1.action"], options);
                if (message[".clutch.api.v1.disableAudit"] != null && message.hasOwnProperty(".clutch.api.v1.disableAudit"))
                    object[".clutch.api.v1.disableAudit"] = message[".clutch.api.v1.disableAudit"];
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                    object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * IdempotencyLevel enum.
             * @name google.protobuf.MethodOptions.IdempotencyLevel
             * @enum {number}
             * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
             * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
             * @property {number} IDEMPOTENT=2 IDEMPOTENT value
             */
            MethodOptions.IdempotencyLevel = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                values[valuesById[2] = "IDEMPOTENT"] = 2;
                return values;
            })();

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifierValue] UninterpretedOption identifierValue
             * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
             * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
             * @property {number|null} [doubleValue] UninterpretedOption doubleValue
             * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
             * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifierValue.
             * @member {string} identifierValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifierValue = "";

            /**
             * UninterpretedOption positiveIntValue.
             * @member {number|Long} positiveIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negativeIntValue.
             * @member {number|Long} negativeIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption doubleValue.
             * @member {number} doubleValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.doubleValue = 0;

            /**
             * UninterpretedOption stringValue.
             * @member {Uint8Array} stringValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregateValue.
             * @member {string} aggregateValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregateValue = "";

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (let i = 0; i < message.name.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    if (!$util.isString(message.identifierValue))
                        return "identifierValue: string expected";
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                        return "positiveIntValue: integer|Long expected";
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                        return "negativeIntValue: integer|Long expected";
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    if (typeof message.doubleValue !== "number")
                        return "doubleValue: number expected";
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                        return "stringValue: buffer expected";
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    if (!$util.isString(message.aggregateValue))
                        return "aggregateValue: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                let message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (let i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifierValue != null)
                    message.identifierValue = String(object.identifierValue);
                if (object.positiveIntValue != null)
                    if ($util.Long)
                        (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                    else if (typeof object.positiveIntValue === "string")
                        message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                    else if (typeof object.positiveIntValue === "number")
                        message.positiveIntValue = object.positiveIntValue;
                    else if (typeof object.positiveIntValue === "object")
                        message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                if (object.negativeIntValue != null)
                    if ($util.Long)
                        (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                    else if (typeof object.negativeIntValue === "string")
                        message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                    else if (typeof object.negativeIntValue === "number")
                        message.negativeIntValue = object.negativeIntValue;
                    else if (typeof object.negativeIntValue === "object")
                        message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                if (object.doubleValue != null)
                    message.doubleValue = Number(object.doubleValue);
                if (object.stringValue != null)
                    if (typeof object.stringValue === "string")
                        $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                    else if (object.stringValue.length)
                        message.stringValue = object.stringValue;
                if (object.aggregateValue != null)
                    message.aggregateValue = String(object.aggregateValue);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifierValue = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positiveIntValue = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negativeIntValue = options.longs === String ? "0" : 0;
                    object.doubleValue = 0;
                    if (options.bytes === String)
                        object.stringValue = "";
                    else {
                        object.stringValue = [];
                        if (options.bytes !== Array)
                            object.stringValue = $util.newBuffer(object.stringValue);
                    }
                    object.aggregateValue = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (let j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    object.identifierValue = message.identifierValue;
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (typeof message.positiveIntValue === "number")
                        object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                    else
                        object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (typeof message.negativeIntValue === "number")
                        object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                    else
                        object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    object.aggregateValue = message.aggregateValue;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} namePart NamePart namePart
                 * @property {boolean} isExtension NamePart isExtension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart namePart.
                 * @member {string} namePart
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.namePart = "";

                /**
                 * NamePart isExtension.
                 * @member {boolean} isExtension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.isExtension = false;

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.namePart))
                        return "namePart: string expected";
                    if (typeof message.isExtension !== "boolean")
                        return "isExtension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    let message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.namePart != null)
                        message.namePart = String(object.namePart);
                    if (object.isExtension != null)
                        message.isExtension = Boolean(object.isExtension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.namePart = "";
                        object.isExtension = false;
                    }
                    if (message.namePart != null && message.hasOwnProperty("namePart"))
                        object.namePart = message.namePart;
                    if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                        object.isExtension = message.isExtension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (let i = 0; i < message.location.length; ++i) {
                        let error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                let message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (let i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (let j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leadingComments] Location leadingComments
                 * @property {string|null} [trailingComments] Location trailingComments
                 * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leadingDetachedComments = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leadingComments.
                 * @member {string} leadingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingComments = "";

                /**
                 * Location trailingComments.
                 * @member {string} trailingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailingComments = "";

                /**
                 * Location leadingDetachedComments.
                 * @member {Array.<string>} leadingDetachedComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingDetachedComments = $util.emptyArray;

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (let i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        if (!$util.isString(message.leadingComments))
                            return "leadingComments: string expected";
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        if (!$util.isString(message.trailingComments))
                            return "trailingComments: string expected";
                    if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                        if (!Array.isArray(message.leadingDetachedComments))
                            return "leadingDetachedComments: array expected";
                        for (let i = 0; i < message.leadingDetachedComments.length; ++i)
                            if (!$util.isString(message.leadingDetachedComments[i]))
                                return "leadingDetachedComments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    let message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (let i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leadingComments != null)
                        message.leadingComments = String(object.leadingComments);
                    if (object.trailingComments != null)
                        message.trailingComments = String(object.trailingComments);
                    if (object.leadingDetachedComments) {
                        if (!Array.isArray(object.leadingDetachedComments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                        message.leadingDetachedComments = [];
                        for (let i = 0; i < object.leadingDetachedComments.length; ++i)
                            message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leadingDetachedComments = [];
                    }
                    if (options.defaults) {
                        object.leadingComments = "";
                        object.trailingComments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (let j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        object.leadingComments = message.leadingComments;
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        object.trailingComments = message.trailingComments;
                    if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                        object.leadingDetachedComments = [];
                        for (let j = 0; j < message.leadingDetachedComments.length; ++j)
                            object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (let i = 0; i < message.annotation.length; ++i) {
                        let error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                let message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (let i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (let j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [sourceFile] Annotation sourceFile
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation sourceFile.
                 * @member {string} sourceFile
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.sourceFile = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        if (!$util.isString(message.sourceFile))
                            return "sourceFile: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    let message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.sourceFile != null)
                        message.sourceFile = String(object.sourceFile);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.sourceFile = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        object.sourceFile = message.sourceFile;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        protobuf.Duration = (function() {

            /**
             * Properties of a Duration.
             * @memberof google.protobuf
             * @interface IDuration
             * @property {number|Long|null} [seconds] Duration seconds
             * @property {number|null} [nanos] Duration nanos
             */

            /**
             * Constructs a new Duration.
             * @memberof google.protobuf
             * @classdesc Represents a Duration.
             * @implements IDuration
             * @constructor
             * @param {google.protobuf.IDuration=} [properties] Properties to set
             */
            function Duration(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Duration seconds.
             * @member {number|Long} seconds
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Duration nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.nanos = 0;

            /**
             * Verifies a Duration message.
             * @function verify
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Duration.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Duration message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Duration} Duration
             */
            Duration.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Duration)
                    return object;
                let message = new $root.google.protobuf.Duration();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Duration message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.Duration} message Duration
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Duration.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Duration to JSON.
             * @function toJSON
             * @memberof google.protobuf.Duration
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Duration.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Duration;
        })();

        protobuf.Timestamp = (function() {

            /**
             * Properties of a Timestamp.
             * @memberof google.protobuf
             * @interface ITimestamp
             * @property {number|Long|null} [seconds] Timestamp seconds
             * @property {number|null} [nanos] Timestamp nanos
             */

            /**
             * Constructs a new Timestamp.
             * @memberof google.protobuf
             * @classdesc Represents a Timestamp.
             * @implements ITimestamp
             * @constructor
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             */
            function Timestamp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Timestamp seconds.
             * @member {number|Long} seconds
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Timestamp nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.nanos = 0;

            /**
             * Verifies a Timestamp message.
             * @function verify
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Timestamp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Timestamp} Timestamp
             */
            Timestamp.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Timestamp)
                    return object;
                let message = new $root.google.protobuf.Timestamp();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.Timestamp} message Timestamp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Timestamp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Timestamp to JSON.
             * @function toJSON
             * @memberof google.protobuf.Timestamp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Timestamp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Timestamp;
        })();

        protobuf.Empty = (function() {

            /**
             * Properties of an Empty.
             * @memberof google.protobuf
             * @interface IEmpty
             */

            /**
             * Constructs a new Empty.
             * @memberof google.protobuf
             * @classdesc Represents an Empty.
             * @implements IEmpty
             * @constructor
             * @param {google.protobuf.IEmpty=} [properties] Properties to set
             */
            function Empty(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Verifies an Empty message.
             * @function verify
             * @memberof google.protobuf.Empty
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Empty.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates an Empty message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Empty
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Empty} Empty
             */
            Empty.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Empty)
                    return object;
                return new $root.google.protobuf.Empty();
            };

            /**
             * Creates a plain object from an Empty message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.Empty} message Empty
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Empty.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Empty to JSON.
             * @function toJSON
             * @memberof google.protobuf.Empty
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Empty.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Empty;
        })();

        return protobuf;
    })();

    google.api = (function() {

        /**
         * Namespace api.
         * @memberof google
         * @namespace
         */
        const api = {};

        api.Http = (function() {

            /**
             * Properties of a Http.
             * @memberof google.api
             * @interface IHttp
             * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
             * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
             */

            /**
             * Constructs a new Http.
             * @memberof google.api
             * @classdesc Represents a Http.
             * @implements IHttp
             * @constructor
             * @param {google.api.IHttp=} [properties] Properties to set
             */
            function Http(properties) {
                this.rules = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Http rules.
             * @member {Array.<google.api.IHttpRule>} rules
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.rules = $util.emptyArray;

            /**
             * Http fullyDecodeReservedExpansion.
             * @member {boolean} fullyDecodeReservedExpansion
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.fullyDecodeReservedExpansion = false;

            /**
             * Verifies a Http message.
             * @function verify
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Http.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rules != null && message.hasOwnProperty("rules")) {
                    if (!Array.isArray(message.rules))
                        return "rules: array expected";
                    for (let i = 0; i < message.rules.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.rules[i]);
                        if (error)
                            return "rules." + error;
                    }
                }
                if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                    if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                        return "fullyDecodeReservedExpansion: boolean expected";
                return null;
            };

            /**
             * Creates a Http message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.Http} Http
             */
            Http.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.Http)
                    return object;
                let message = new $root.google.api.Http();
                if (object.rules) {
                    if (!Array.isArray(object.rules))
                        throw TypeError(".google.api.Http.rules: array expected");
                    message.rules = [];
                    for (let i = 0; i < object.rules.length; ++i) {
                        if (typeof object.rules[i] !== "object")
                            throw TypeError(".google.api.Http.rules: object expected");
                        message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                    }
                }
                if (object.fullyDecodeReservedExpansion != null)
                    message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                return message;
            };

            /**
             * Creates a plain object from a Http message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.Http
             * @static
             * @param {google.api.Http} message Http
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Http.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.rules = [];
                if (options.defaults)
                    object.fullyDecodeReservedExpansion = false;
                if (message.rules && message.rules.length) {
                    object.rules = [];
                    for (let j = 0; j < message.rules.length; ++j)
                        object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                }
                if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                    object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                return object;
            };

            /**
             * Converts this Http to JSON.
             * @function toJSON
             * @memberof google.api.Http
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Http.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Http;
        })();

        api.HttpRule = (function() {

            /**
             * Properties of a HttpRule.
             * @memberof google.api
             * @interface IHttpRule
             * @property {string|null} [selector] HttpRule selector
             * @property {string|null} [get] HttpRule get
             * @property {string|null} [put] HttpRule put
             * @property {string|null} [post] HttpRule post
             * @property {string|null} ["delete"] HttpRule delete
             * @property {string|null} [patch] HttpRule patch
             * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
             * @property {string|null} [body] HttpRule body
             * @property {string|null} [responseBody] HttpRule responseBody
             * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
             */

            /**
             * Constructs a new HttpRule.
             * @memberof google.api
             * @classdesc Represents a HttpRule.
             * @implements IHttpRule
             * @constructor
             * @param {google.api.IHttpRule=} [properties] Properties to set
             */
            function HttpRule(properties) {
                this.additionalBindings = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HttpRule selector.
             * @member {string} selector
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.selector = "";

            /**
             * HttpRule get.
             * @member {string|null|undefined} get
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.get = null;

            /**
             * HttpRule put.
             * @member {string|null|undefined} put
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.put = null;

            /**
             * HttpRule post.
             * @member {string|null|undefined} post
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.post = null;

            /**
             * HttpRule delete.
             * @member {string|null|undefined} delete
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype["delete"] = null;

            /**
             * HttpRule patch.
             * @member {string|null|undefined} patch
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.patch = null;

            /**
             * HttpRule custom.
             * @member {google.api.ICustomHttpPattern|null|undefined} custom
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.custom = null;

            /**
             * HttpRule body.
             * @member {string} body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.body = "";

            /**
             * HttpRule responseBody.
             * @member {string} responseBody
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.responseBody = "";

            /**
             * HttpRule additionalBindings.
             * @member {Array.<google.api.IHttpRule>} additionalBindings
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.additionalBindings = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * HttpRule pattern.
             * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
             * @memberof google.api.HttpRule
             * @instance
             */
            Object.defineProperty(HttpRule.prototype, "pattern", {
                get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Verifies a HttpRule message.
             * @function verify
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HttpRule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.selector != null && message.hasOwnProperty("selector"))
                    if (!$util.isString(message.selector))
                        return "selector: string expected";
                if (message.get != null && message.hasOwnProperty("get")) {
                    properties.pattern = 1;
                    if (!$util.isString(message.get))
                        return "get: string expected";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.put))
                        return "put: string expected";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.post))
                        return "post: string expected";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message["delete"]))
                        return "delete: string expected";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.patch))
                        return "patch: string expected";
                }
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    {
                        let error = $root.google.api.CustomHttpPattern.verify(message.custom);
                        if (error)
                            return "custom." + error;
                    }
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    if (!$util.isString(message.body))
                        return "body: string expected";
                if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                    if (!$util.isString(message.responseBody))
                        return "responseBody: string expected";
                if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                    if (!Array.isArray(message.additionalBindings))
                        return "additionalBindings: array expected";
                    for (let i = 0; i < message.additionalBindings.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                        if (error)
                            return "additionalBindings." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.HttpRule} HttpRule
             */
            HttpRule.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.HttpRule)
                    return object;
                let message = new $root.google.api.HttpRule();
                if (object.selector != null)
                    message.selector = String(object.selector);
                if (object.get != null)
                    message.get = String(object.get);
                if (object.put != null)
                    message.put = String(object.put);
                if (object.post != null)
                    message.post = String(object.post);
                if (object["delete"] != null)
                    message["delete"] = String(object["delete"]);
                if (object.patch != null)
                    message.patch = String(object.patch);
                if (object.custom != null) {
                    if (typeof object.custom !== "object")
                        throw TypeError(".google.api.HttpRule.custom: object expected");
                    message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                }
                if (object.body != null)
                    message.body = String(object.body);
                if (object.responseBody != null)
                    message.responseBody = String(object.responseBody);
                if (object.additionalBindings) {
                    if (!Array.isArray(object.additionalBindings))
                        throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                    message.additionalBindings = [];
                    for (let i = 0; i < object.additionalBindings.length; ++i) {
                        if (typeof object.additionalBindings[i] !== "object")
                            throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                        message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.HttpRule} message HttpRule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HttpRule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.additionalBindings = [];
                if (options.defaults) {
                    object.selector = "";
                    object.body = "";
                    object.responseBody = "";
                }
                if (message.selector != null && message.hasOwnProperty("selector"))
                    object.selector = message.selector;
                if (message.get != null && message.hasOwnProperty("get")) {
                    object.get = message.get;
                    if (options.oneofs)
                        object.pattern = "get";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    object.put = message.put;
                    if (options.oneofs)
                        object.pattern = "put";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    object.post = message.post;
                    if (options.oneofs)
                        object.pattern = "post";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    object["delete"] = message["delete"];
                    if (options.oneofs)
                        object.pattern = "delete";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    object.patch = message.patch;
                    if (options.oneofs)
                        object.pattern = "patch";
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = message.body;
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                    if (options.oneofs)
                        object.pattern = "custom";
                }
                if (message.additionalBindings && message.additionalBindings.length) {
                    object.additionalBindings = [];
                    for (let j = 0; j < message.additionalBindings.length; ++j)
                        object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                }
                if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                    object.responseBody = message.responseBody;
                return object;
            };

            /**
             * Converts this HttpRule to JSON.
             * @function toJSON
             * @memberof google.api.HttpRule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HttpRule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HttpRule;
        })();

        api.CustomHttpPattern = (function() {

            /**
             * Properties of a CustomHttpPattern.
             * @memberof google.api
             * @interface ICustomHttpPattern
             * @property {string|null} [kind] CustomHttpPattern kind
             * @property {string|null} [path] CustomHttpPattern path
             */

            /**
             * Constructs a new CustomHttpPattern.
             * @memberof google.api
             * @classdesc Represents a CustomHttpPattern.
             * @implements ICustomHttpPattern
             * @constructor
             * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
             */
            function CustomHttpPattern(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CustomHttpPattern kind.
             * @member {string} kind
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.kind = "";

            /**
             * CustomHttpPattern path.
             * @member {string} path
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.path = "";

            /**
             * Verifies a CustomHttpPattern message.
             * @function verify
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CustomHttpPattern.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.kind != null && message.hasOwnProperty("kind"))
                    if (!$util.isString(message.kind))
                        return "kind: string expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                return null;
            };

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             */
            CustomHttpPattern.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.CustomHttpPattern)
                    return object;
                let message = new $root.google.api.CustomHttpPattern();
                if (object.kind != null)
                    message.kind = String(object.kind);
                if (object.path != null)
                    message.path = String(object.path);
                return message;
            };

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.CustomHttpPattern} message CustomHttpPattern
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CustomHttpPattern.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.kind = "";
                    object.path = "";
                }
                if (message.kind != null && message.hasOwnProperty("kind"))
                    object.kind = message.kind;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @function toJSON
             * @memberof google.api.CustomHttpPattern
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CustomHttpPattern.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CustomHttpPattern;
        })();

        return api;
    })();

    return google;
})();

export { $root as default };
